import React from './react.js';
import ReactDOM from './react-dom.js';

import * as primary_icons from '../icons/primary_icons.js';
import * as primary_icons_medium from '../icons/primary_icons_medium.js';

var global$1 =
  typeof global !== 'undefined'
    ? global
    : typeof self !== 'undefined'
    ? self
    : typeof window !== 'undefined'
    ? window
    : {};

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
  cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
  cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if (
    (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
    setTimeout
  ) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if (
    (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&
    clearTimeout
  ) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;

  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;

function binding(name) {
  throw new Error('process.binding is not supported');
}

function cwd() {
  return '/';
}
function chdir(dir) {
  throw new Error('process.chdir is not supported');
}
function umask() {
  return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow =
  performance.now ||
  performance.mozNow ||
  performance.msNow ||
  performance.oNow ||
  performance.webkitNow ||
  function() {
    return new Date().getTime();
  };

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor((clocktime % 1) * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}

var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}

var process = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: env,
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime,
};

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function(it) {
  return isNaN((it = +it)) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function(it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

// true  -> String#at
// false -> String#codePointAt
var _stringAt = function(TO_STRING) {
  return function(that, pos) {
    var s = String(_defined(that));
    var i = _toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 ||
      a > 0xdbff ||
      i + 1 === l ||
      (b = s.charCodeAt(i + 1)) < 0xdc00 ||
      b > 0xdfff
      ? TO_STRING
        ? s.charAt(i)
        : a
      : TO_STRING
      ? s.slice(i, i + 2)
      : ((a - 0xd800) << 10) + (b - 0xdc00) + 0x10000;
  };
};

function unwrapExports(x) {
  return x &&
    x.__esModule &&
    Object.prototype.hasOwnProperty.call(x, 'default')
    ? x['default']
    : x;
}

function createCommonjsModule(fn, module) {
  return (
    (module = { exports: {} }), fn(module, module.exports), module.exports
  );
}

var _global = createCommonjsModule(function(module) {
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = (module.exports =
    typeof window != 'undefined' && window.Math == Math
      ? window
      : typeof self != 'undefined' && self.Math == Math
      ? self
      : // eslint-disable-next-line no-new-func
        Function('return this')());
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
});

var _core = createCommonjsModule(function(module) {
  var core = (module.exports = { version: '2.6.11' });
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
});
var _core_1 = _core.version;

var _isObject = function(it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var _anObject = function(it) {
  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

var _fails = function(exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function() {
  return (
    Object.defineProperty({}, 'a', {
      get: function() {
        return 7;
      },
    }).a != 7
  );
});

var document$1 = _global.document;
// typeof document.createElement is 'object' in old IE
var is = _isObject(document$1) && _isObject(document$1.createElement);
var _domCreate = function(it) {
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine =
  !_descriptors &&
  !_fails(function() {
    return (
      Object.defineProperty(_domCreate('div'), 'a', {
        get: function() {
          return 7;
        },
      }).a != 7
    );
  });

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function(it, S) {
  if (!_isObject(it)) return it;
  var fn, val;
  if (
    S &&
    typeof (fn = it.toString) == 'function' &&
    !_isObject((val = fn.call(it)))
  )
    return val;
  if (
    typeof (fn = it.valueOf) == 'function' &&
    !_isObject((val = fn.call(it)))
  )
    return val;
  if (
    !S &&
    typeof (fn = it.toString) == 'function' &&
    !_isObject((val = fn.call(it)))
  )
    return val;
  throw TypeError("Can't convert object to primitive value");
};

var dP = Object.defineProperty;

var f = _descriptors
  ? Object.defineProperty
  : function defineProperty(O, P, Attributes) {
      _anObject(O);
      P = _toPrimitive(P, true);
      _anObject(Attributes);
      if (_ie8DomDefine)
        try {
          return dP(O, P, Attributes);
        } catch (e) {
          /* empty */
        }
      if ('get' in Attributes || 'set' in Attributes)
        throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };

var _objectDp = {
  f: f,
};

var _propertyDesc = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value,
  };
};

var _hide = _descriptors
  ? function(object, key, value) {
      return _objectDp.f(object, key, _propertyDesc(1, value));
    }
  : function(object, key, value) {
      object[key] = value;
      return object;
    };

var hasOwnProperty = {}.hasOwnProperty;
var _has = function(it, key) {
  return hasOwnProperty.call(it, key);
};

var id = 0;
var px = Math.random();
var _uid = function(key) {
  return 'Symbol('.concat(
    key === undefined ? '' : key,
    ')_',
    (++id + px).toString(36)
  );
};

var _shared = createCommonjsModule(function(module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});

  (module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode: 'global',
    copyright: '© 2019 Denis Pushkarev (zloirock.ru)',
  });
});

var _functionToString = _shared(
  'native-function-to-string',
  Function.toString
);

var _redefine = createCommonjsModule(function(module) {
  var SRC = _uid('src');

  var TO_STRING = 'toString';
  var TPL = ('' + _functionToString).split(TO_STRING);

  _core.inspectSource = function(it) {
    return _functionToString.call(it);
  };

  (module.exports = function(O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction)
      _has(val, SRC) ||
        _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === _global) {
      O[key] = val;
    } else if (!safe) {
      delete O[key];
      _hide(O, key, val);
    } else if (O[key]) {
      O[key] = val;
    } else {
      _hide(O, key, val);
    }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return (
      (typeof this == 'function' && this[SRC]) ||
      _functionToString.call(this)
    );
  });
});

var _aFunction = function(it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding

var _ctx = function(fn, that, length) {
  _aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1:
      return function(a) {
        return fn.call(that, a);
      };
    case 2:
      return function(a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function(a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function(/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var PROTOTYPE = 'prototype';

var $export = function(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL
    ? _global
    : IS_STATIC
    ? _global[name] || (_global[name] = {})
    : (_global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp =
      IS_BIND && own
        ? _ctx(out, _global)
        : IS_PROTO && typeof out == 'function'
        ? _ctx(Function.call, out)
        : out;
    // extend global
    if (target) _redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) _hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
_global.core = _core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
var _export = $export;

var _iterators = {};

var toString = {}.toString;

var _cof = function(it) {
  return toString.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0)
  ? Object
  : function(it) {
      return _cof(it) == 'String' ? it.split('') : Object(it);
    };

// to indexed object, toObject with fallback for non-array-like ES3 strings

var _toIobject = function(it) {
  return _iobject(_defined(it));
};

// 7.1.15 ToLength

var min = Math.min;
var _toLength = function(it) {
  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var max = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function(index, length) {
  index = _toInteger(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes

var _arrayIncludes = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = _toIobject($this);
    var length = _toLength(O.length);
    var index = _toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el)
      while (length > index) {
        value = O[index++];
        // eslint-disable-next-line no-self-compare
        if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
      }
    else
      for (; length > index; index++)
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
    return !IS_INCLUDES && -1;
  };
};

var shared = _shared('keys');

var _sharedKey = function(key) {
  return shared[key] || (shared[key] = _uid(key));
};

var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO = _sharedKey('IE_PROTO');

var _objectKeysInternal = function(object, names) {
  var O = _toIobject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i)
    if (_has(O, (key = names[i++]))) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(
  ','
);

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

var _objectKeys =
  Object.keys ||
  function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

var _objectDps = _descriptors
  ? Object.defineProperties
  : function defineProperties(O, Properties) {
      _anObject(O);
      var keys = _objectKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;
      while (length > i) _objectDp.f(O, (P = keys[i++]), Properties[P]);
      return O;
    };

var document$2 = _global.document;
var _html = document$2 && document$2.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

var IE_PROTO$1 = _sharedKey('IE_PROTO');
var Empty = function() {
  /* empty */
};
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe');
  var i = _enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(
    lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt
  );
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
  return createDict();
};

var _objectCreate =
  Object.create ||
  function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO$1] = O;
    } else result = createDict();
    return Properties === undefined
      ? result
      : _objectDps(result, Properties);
  };

var _wks = createCommonjsModule(function(module) {
  var store = _shared('wks');

  var Symbol = _global.Symbol;
  var USE_SYMBOL = typeof Symbol == 'function';

  var $exports = (module.exports = function(name) {
    return (
      store[name] ||
      (store[name] =
        (USE_SYMBOL && Symbol[name]) ||
        (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name))
    );
  });

  $exports.store = store;
});

var def = _objectDp.f;

var TAG = _wks('toStringTag');

var _setToStringTag = function(it, tag, stat) {
  if (it && !_has((it = stat ? it : it.prototype), TAG))
    def(it, TAG, { configurable: true, value: tag });
};

var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function() {
  return this;
});

var _iterCreate = function(Constructor, NAME, next) {
  Constructor.prototype = _objectCreate(IteratorPrototype, {
    next: _propertyDesc(1, next),
  });
  _setToStringTag(Constructor, NAME + ' Iterator');
};

// 7.1.13 ToObject(argument)

var _toObject = function(it) {
  return Object(_defined(it));
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

var IE_PROTO$2 = _sharedKey('IE_PROTO');
var ObjectProto = Object.prototype;

var _objectGpo =
  Object.getPrototypeOf ||
  function(O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }
    return O instanceof Object ? ObjectProto : null;
  };

var ITERATOR = _wks('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function() {
  return this;
};

var _iterDefine = function(
  Base,
  NAME,
  Constructor,
  next,
  DEFAULT,
  IS_SET,
  FORCED
) {
  _iterCreate(Constructor, NAME, next);
  var getMethod = function(kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }
    return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native =
    proto[ITERATOR] || proto[FF_ITERATOR] || (DEFAULT && proto[DEFAULT]);
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT
    ? !DEF_VALUES
      ? $default
      : getMethod('entries')
    : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      _setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (typeof IteratorPrototype[ITERATOR] != 'function')
        _hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  // Define iterator
  if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {
    _hide(proto, ITERATOR, $default);
  }
  // Plug for library
  _iterators[NAME] = $default;
  _iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries,
    };
    if (FORCED)
      for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      }
    else
      _export(
        _export.P + _export.F * (BUGGY || VALUES_BUG),
        NAME,
        methods
      );
  }
  return methods;
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(
  String,
  'String',
  function(iterated) {
    this._t = String(iterated); // target
    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  },
  function() {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at(O, index);
    this._i += point.length;
    return { value: point, done: false };
  }
);

// call something on iterator step with safe closing on error

var _iterCall = function(iterator, fn, value, entries) {
  try {
    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) _anObject(ret.call(iterator));
    throw e;
  }
};

// check on default Array iterator

var ITERATOR$1 = _wks('iterator');
var ArrayProto = Array.prototype;

var _isArrayIter = function(it) {
  return (
    it !== undefined &&
    (_iterators.Array === it || ArrayProto[ITERATOR$1] === it)
  );
};

var _createProperty = function(object, index, value) {
  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
  else object[index] = value;
};

// getting tag from 19.1.3.6 Object.prototype.toString()

var TAG$1 = _wks('toStringTag');
// ES3 wrong here
var ARG =
  _cof(
    (function() {
      return arguments;
    })()
  ) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

var _classof = function(it) {
  var O, T, B;
  return it === undefined
    ? 'Undefined'
    : it === null
    ? 'Null'
    : // @@toStringTag case
    typeof (T = tryGet((O = Object(it)), TAG$1)) == 'string'
    ? T
    : // builtinTag case
    ARG
    ? _cof(O)
    : // ES3 arguments fallback
    (B = _cof(O)) == 'Object' && typeof O.callee == 'function'
    ? 'Arguments'
    : B;
};

var ITERATOR$2 = _wks('iterator');

var core_getIteratorMethod = (_core.getIteratorMethod = function(it) {
  if (it != undefined)
    return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];
});

var ITERATOR$3 = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$3]();
  riter['return'] = function() {
    SAFE_CLOSING = true;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function() {
    throw 2;
  });
} catch (e) {
  /* empty */
}

var _iterDetect = function(exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$3]();
    iter.next = function() {
      return { done: (safe = true) };
    };
    arr[ITERATOR$3] = function() {
      return iter;
    };
    exec(arr);
  } catch (e) {
    /* empty */
  }
  return safe;
};

_export(
  _export.S +
    _export.F *
      !_iterDetect(function(iter) {
        Array.from(iter);
      }),
  'Array',
  {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(
      arrayLike /* , mapfn = undefined, thisArg = undefined */
    ) {
      var O = _toObject(arrayLike);
      var C = typeof this == 'function' ? this : Array;
      var aLen = arguments.length;
      var mapfn = aLen > 1 ? arguments[1] : undefined;
      var mapping = mapfn !== undefined;
      var index = 0;
      var iterFn = core_getIteratorMethod(O);
      var length, result, step, iterator;
      if (mapping)
        mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
        for (
          iterator = iterFn.call(O), result = new C();
          !(step = iterator.next()).done;
          index++
        ) {
          _createProperty(
            result,
            index,
            mapping
              ? _iterCall(iterator, mapfn, [step.value, index], true)
              : step.value
          );
        }
      } else {
        length = _toLength(O.length);
        for (result = new C(length); length > index; index++) {
          _createProperty(
            result,
            index,
            mapping ? mapfn(O[index], index) : O[index]
          );
        }
      }
      result.length = index;
      return result;
    },
  }
);

// 21.2.5.3 get RegExp.prototype.flags

var _flags = function() {
  var that = _anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

// 21.2.5.3 get RegExp.prototype.flags()
if (_descriptors && /./g.flags != 'g')
  _objectDp.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: _flags,
  });

var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function(fn) {
  _redefine(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (
  _fails(function() {
    return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
  })
) {
  define(function toString() {
    var R = _anObject(this);
    return '/'.concat(
      R.source,
      '/',
      'flags' in R
        ? R.flags
        : !_descriptors && R instanceof RegExp
        ? _flags.call(R)
        : undefined
    );
  });
  // FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks('unscopables');
var ArrayProto$1 = Array.prototype;
if (ArrayProto$1[UNSCOPABLES] == undefined)
  _hide(ArrayProto$1, UNSCOPABLES, {});
var _addToUnscopables = function(key) {
  ArrayProto$1[UNSCOPABLES][key] = true;
};

// https://github.com/tc39/Array.prototype.includes

var $includes = _arrayIncludes(true);

_export(_export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(
      this,
      el,
      arguments.length > 1 ? arguments[1] : undefined
    );
  },
});

_addToUnscopables('includes');

// 7.2.8 IsRegExp(argument)

var MATCH = _wks('match');
var _isRegexp = function(it) {
  var isRegExp;
  return (
    _isObject(it) &&
    ((isRegExp = it[MATCH]) !== undefined
      ? !!isRegExp
      : _cof(it) == 'RegExp')
  );
};

// helper for String#{startsWith, endsWith, includes}

var _stringContext = function(that, searchString, NAME) {
  if (_isRegexp(searchString))
    throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(_defined(that));
};

var MATCH$1 = _wks('match');
var _failsIsRegexp = function(KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH$1] = false;
      return !'/./'[KEY](re);
    } catch (f) {
      /* empty */
    }
  }
  return true;
};

var INCLUDES = 'includes';

_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~_stringContext(this, searchString, INCLUDES).indexOf(
      searchString,
      arguments.length > 1 ? arguments[1] : undefined
    );
  },
});

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

var SPECIES = _wks('species');
var _speciesConstructor = function(O, D) {
  var C = _anObject(O).constructor;
  var S;
  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined
    ? D
    : _aFunction(S);
};

var at = _stringAt(true);

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
var _advanceStringIndex = function(S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

var builtinExec = RegExp.prototype.exec;

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
var _regexpExecAbstract = function(R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError(
        'RegExp exec method returned something other than an Object or null'
      );
    }
    return result;
  }
  if (_classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function() {
  var re1 = /a/,
    re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global
        ? match.index + match[0].length
        : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function() {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

var _regexpExec = patchedExec;

_export(
  {
    target: 'RegExp',
    proto: true,
    forced: _regexpExec !== /./.exec,
  },
  {
    exec: _regexpExec,
  }
);

var SPECIES$1 = _wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function() {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function() {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function() {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function() {
    return originalExec.apply(this, arguments);
  };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

var _fixReWks = function(KEY, length, exec) {
  var SYMBOL = _wks(KEY);

  var DELEGATES_TO_SYMBOL = !_fails(function() {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function() {
      return 7;
    };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL
    ? !_fails(function() {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        re.exec = function() {
          execCalled = true;
          return null;
        };
        if (KEY === 'split') {
          // RegExp[@@split] doesn't call the regex's exec method, but first creates
          // a new one. We need to return the patched regex when creating the new one.
          re.constructor = {};
          re.constructor[SPECIES$1] = function() {
            return re;
          };
        }
        re[SYMBOL]('');
        return !execCalled;
      })
    : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(_defined, SYMBOL, ''[KEY], function maybeCallNative(
      nativeMethod,
      regexp,
      str,
      arg2,
      forceStringMethod
    ) {
      if (regexp.exec === _regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return {
            done: true,
            value: nativeRegExpMethod.call(regexp, str, arg2),
          };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    });
    var strfn = fns[0];
    var rxfn = fns[1];

    _redefine(String.prototype, KEY, strfn);
    _hide(
      RegExp.prototype,
      SYMBOL,
      length == 2
        ? // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          function(string, arg) {
            return rxfn.call(string, this, arg);
          }
        : // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          function(string) {
            return rxfn.call(string, this);
          }
    );
  }
};

var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX$1 = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !_fails(function() {
  RegExp(MAX_UINT32, 'y');
});

// @@split logic
_fixReWks('split', 2, function(defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function(separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!_isRegexp(separator))
        return $split.call(string, separator, limit);
      var output = [];
      var flags =
        (separator.ignoreCase ? 'i' : '') +
        (separator.multiline ? 'm' : '') +
        (separator.unicode ? 'u' : '') +
        (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while ((match = _regexpExec.call(separatorCopy, string))) {
        lastIndex = separatorCopy[LAST_INDEX$1];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH])
            $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX$1] === match.index)
          separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit
        ? output.slice(0, splitLimit)
        : output;
    };
    // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function(separator, limit) {
      return separator === undefined && limit === 0
        ? []
        : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function(regexp, limit) {
      var res = maybeCallNative(
        internalSplit,
        regexp,
        this,
        limit,
        internalSplit !== $split
      );
      if (res.done) return res.value;

      var rx = _anObject(regexp);
      var S = String(this);
      var C = _speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags =
        (rx.ignoreCase ? 'i' : '') +
        (rx.multiline ? 'm' : '') +
        (rx.unicode ? 'u' : '') +
        (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(
        SUPPORTS_Y ? rx : '^(?:' + rx.source + ')',
        flags
      );
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0)
        return _regexpExecAbstract(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(
            _toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)),
            S.length
          )) === p
        ) {
          q = _advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    },
  ];
});

var max$1 = Math.max;
var min$2 = Math.min;
var floor$1 = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function(it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
_fixReWks('replace', 2, function(
  defined,
  REPLACE,
  $replace,
  maybeCallNative
) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function(regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = _anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = _regexpExecAbstract(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '')
          rx.lastIndex = _advanceStringIndex(
            S,
            _toLength(rx.lastIndex),
            fullUnicode
          );
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max$1(min$2(_toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++)
          captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined)
            replacerArgs.push(namedCaptures);
          var replacement = String(
            replaceValue.apply(undefined, replacerArgs)
          );
        } else {
          replacement = getSubstitution(
            matched,
            S,
            position,
            captures,
            namedCaptures,
            replaceValue
          );
        }
        if (position >= nextSourcePosition) {
          accumulatedResult +=
            S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    },
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(
    matched,
    str,
    position,
    captures,
    namedCaptures,
    replacement
  ) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = _toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function(match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$':
          return '$';
        case '&':
          return matched;
        case '`':
          return str.slice(0, position);
        case "'":
          return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default:
          // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor$1(n / 10);
            if (f === 0) return match;
            if (f <= m)
              return captures[f - 1] === undefined
                ? ch.charAt(1)
                : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

// most Object methods by ES6 should accept primitives

var _objectSap = function(KEY, exec) {
  var fn = (_core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  _export(
    _export.S +
      _export.F *
        _fails(function() {
          fn(1);
        }),
    'Object',
    exp
  );
};

// 19.1.2.14 Object.keys(O)

_objectSap('keys', function() {
  return function keys(it) {
    return _objectKeys(_toObject(it));
  };
});

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends =
    Object.assign ||
    function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  return _extends.apply(this, arguments);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === 'undefined' || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (
      var _i = arr[Symbol.iterator](), _s;
      !(_n = (_s = _i.next()).done);
      _n = true
    ) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i['return'] != null) _i['return']();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(n);
  if (
    n === 'Arguments' ||
    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
  )
    return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
  );
}

function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}

var _iterStep = function(done, value) {
  return { value: value, done: !!done };
};

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(
  Array,
  'Array',
  function(iterated, kind) {
    this._t = _toIobject(iterated); // target
    this._i = 0; // next index
    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  },
  function() {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }
    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  },
  'values'
);

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
_iterators.Arguments = _iterators.Array;

_addToUnscopables('keys');
_addToUnscopables('values');
_addToUnscopables('entries');

var ITERATOR$4 = _wks('iterator');
var TO_STRING_TAG = _wks('toStringTag');
var ArrayValues = _iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false,
};

for (
  var collections = _objectKeys(DOMIterables), i = 0;
  i < collections.length;
  i++
) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = _global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR$4]) _hide(proto, ITERATOR$4, ArrayValues);
    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
    _iterators[NAME] = ArrayValues;
    if (explicit)
      for (key in es6_array_iterator)
        if (!proto[key])
          _redefine(proto, key, es6_array_iterator[key], true);
  }
}

// 19.1.3.6 Object.prototype.toString()

var test = {};
test[_wks('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _redefine(
    Object.prototype,
    'toString',
    function toString() {
      return '[object ' + _classof(this) + ']';
    },
    true
  );
}

var f$1 = {}.propertyIsEnumerable;

var _objectPie = {
  f: f$1,
};

var isEnum = _objectPie.f;
var _objectToArray = function(isEntries) {
  return function(it) {
    var O = _toIobject(it);
    var keys = _objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!_descriptors || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

// https://github.com/tc39/proposal-object-values-entries

var $entries = _objectToArray(true);

_export(_export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  },
});

function _typeof(obj) {
  '@babel/helpers - typeof';

  if (
    typeof Symbol === 'function' &&
    typeof Symbol.iterator === 'symbol'
  ) {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj &&
        typeof Symbol === 'function' &&
        obj.constructor === Symbol &&
        obj !== Symbol.prototype
        ? 'symbol'
        : typeof obj;
    };
  }

  return _typeof(obj);
}

var gOPD = Object.getOwnPropertyDescriptor;

var f$2 = _descriptors
  ? gOPD
  : function getOwnPropertyDescriptor(O, P) {
      O = _toIobject(O);
      P = _toPrimitive(P, true);
      if (_ie8DomDefine)
        try {
          return gOPD(O, P);
        } catch (e) {
          /* empty */
        }
      if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
    };

var _objectGopd = {
  f: f$2,
};

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */

var check = function(O, proto) {
  _anObject(O);
  if (!_isObject(proto) && proto !== null)
    throw TypeError(proto + ": can't set as prototype!");
};
var _setProto = {
  set:
    Object.setPrototypeOf ||
    ('__proto__' in {} // eslint-disable-line
      ? (function(test, buggy, set) {
          try {
            set = _ctx(
              Function.call,
              _objectGopd.f(Object.prototype, '__proto__').set,
              2
            );
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) {
            buggy = true;
          }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
          };
        })({}, false)
      : undefined),
  check: check,
};

var setPrototypeOf = _setProto.set;
var _inheritIfRequired = function(that, target, C) {
  var S = target.constructor;
  var P;
  if (
    S !== C &&
    typeof S == 'function' &&
    (P = S.prototype) !== C.prototype &&
    _isObject(P) &&
    setPrototypeOf
  ) {
    setPrototypeOf(that, P);
  }
  return that;
};

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

var f$3 =
  Object.getOwnPropertyNames ||
  function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

var _objectGopn = {
  f: f$3,
};

var SPECIES$2 = _wks('species');

var _setSpecies = function(KEY) {
  var C = _global[KEY];
  if (_descriptors && C && !C[SPECIES$2])
    _objectDp.f(C, SPECIES$2, {
      configurable: true,
      get: function() {
        return this;
      },
    });
};

var dP$1 = _objectDp.f;
var gOPN = _objectGopn.f;

var $RegExp = _global.RegExp;
var Base = $RegExp;
var proto$1 = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (
  _descriptors &&
  (!CORRECT_NEW ||
    _fails(function() {
      re2[_wks('match')] = false;
      // RegExp constructor can alter flags and IsRegExp works correct with @@match
      return (
        $RegExp(re1) != re1 ||
        $RegExp(re2) == re2 ||
        $RegExp(re1, 'i') != '/a/i'
      );
    }))
) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = _isRegexp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU
      ? p
      : _inheritIfRequired(
          CORRECT_NEW
            ? new Base(piRE && !fiU ? p.source : p, f)
            : Base(
                (piRE = p instanceof $RegExp) ? p.source : p,
                piRE && fiU ? _flags.call(p) : f
              ),
          tiRE ? this : proto$1,
          $RegExp
        );
  };
  var proxy = function(key) {
    key in $RegExp ||
      dP$1($RegExp, key, {
        configurable: true,
        get: function() {
          return Base[key];
        },
        set: function(it) {
          Base[key] = it;
        },
      });
  };
  for (var keys = gOPN(Base), i$1 = 0; keys.length > i$1; )
    proxy(keys[i$1++]);
  proto$1.constructor = $RegExp;
  $RegExp.prototype = proto$1;
  _redefine(_global, 'RegExp', $RegExp);
}

_setSpecies('RegExp');

// @@match logic
_fixReWks('match', 1, function(defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined
        ? fn.call(regexp, O)
        : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function(regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = _anObject(regexp);
      var S = String(this);
      if (!rx.global) return _regexpExecAbstract(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = _regexpExecAbstract(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '')
          rx.lastIndex = _advanceStringIndex(
            S,
            _toLength(rx.lastIndex),
            fullUnicode
          );
        n++;
      }
      return n === 0 ? null : A;
    },
  ];
});

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function(fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);
    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);
    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
    case 3:
      return un
        ? fn(args[0], args[1], args[2])
        : fn.call(that, args[0], args[1], args[2]);
    case 4:
      return un
        ? fn(args[0], args[1], args[2], args[3])
        : fn.call(that, args[0], args[1], args[2], args[3]);
  }
  return fn.apply(that, args);
};

var arraySlice = [].slice;
var factories = {};

var construct = function(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }
  return factories[len](F, args);
};

var _bind =
  Function.bind ||
  function bind(that /* , ...args */) {
    var fn = _aFunction(this);
    var partArgs = arraySlice.call(arguments, 1);
    var bound = function(/* args... */) {
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound
        ? construct(fn, args.length, args)
        : _invoke(fn, args, that);
    };
    if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
  };

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

var rConstruct = (_global.Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = _fails(function() {
  function F() {
    /* empty */
  }
  return !(
    rConstruct(
      function() {
        /* empty */
      },
      [],
      F
    ) instanceof F
  );
});
var ARGS_BUG = !_fails(function() {
  rConstruct(function() {
    /* empty */
  });
});

_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    _aFunction(Target);
    _anObject(args);
    var newTarget =
      arguments.length < 3 ? Target : _aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG)
      return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();
        case 1:
          return new Target(args[0]);
        case 2:
          return new Target(args[0], args[1]);
        case 3:
          return new Target(args[0], args[1], args[2]);
        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (_bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = _objectCreate(
      _isObject(proto) ? proto : Object.prototype
    );
    var result = Function.apply.call(Target, instance, args);
    return _isObject(result) ? result : instance;
  },
});

function _setPrototypeOf(o, p) {
  _setPrototypeOf =
    Object.setPrototypeOf ||
    function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

  return _setPrototypeOf(o, p);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError(
      'Super expression must either be null or a function'
    );
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true,
    },
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf
    ? Object.getPrototypeOf
    : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
  return _getPrototypeOf(o);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf('[native code]') !== -1;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;

  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === 'function' ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== 'function') {
      throw new TypeError(
        'Super expression must either be null or a function'
      );
    }

    if (typeof _cache !== 'undefined') {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(
        Class,
        arguments,
        _getPrototypeOf(this).constructor
      );
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

var dP$2 = _objectDp.f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME$1 = 'name';

// 19.2.4.2 name
NAME$1 in FProto ||
  (_descriptors &&
    dP$2(FProto, NAME$1, {
      configurable: true,
      get: function() {
        try {
          return ('' + this).match(nameRE)[1];
        } catch (e) {
          return '';
        }
      },
    }));

var ERROR_HARMLESS = 100;
var ERROR_FATAL = 500;
function ErrorHandler(error) {
  var _ref =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {
            message: null,
          },
    message = _ref.message;

  var code =
    arguments.length > 2 && arguments[2] !== undefined
      ? arguments[2]
      : ERROR_HARMLESS;

  if (_typeof(error) === 'object') {
    message = error.message;
  }

  this.err = new Error(''.concat(error, '\n\n').concat(message));

  if (code === ERROR_FATAL) {
    throw this.err;
  } else {
    console.log(this.err);
  }
}

function installCustomElements(window, polyfill) {
  var document = window.document,
    Object = window.Object;

  var htmlClass = (function(info) {
    var catchClass = /^[A-Z]+[a-z]/,
      filterBy = function filterBy(re) {
        var arr = [],
          tag;

        for (tag in register) {
          if (re.test(tag)) arr.push(tag);
        }

        return arr;
      },
      add = function add(Class, tag) {
        tag = tag.toLowerCase();

        if (!(tag in register)) {
          register[Class] = (register[Class] || []).concat(tag);
          register[tag] = register[tag.toUpperCase()] = Class;
        }
      },
      register = (Object.create || Object)(null),
      htmlClass = {},
      i,
      section,
      tags,
      Class;

    for (section in info) {
      for (Class in info[section]) {
        tags = info[section][Class];
        register[Class] = tags;

        for (i = 0; i < tags.length; i++) {
          register[tags[i].toLowerCase()] = register[
            tags[i].toUpperCase()
          ] = Class;
        }
      }
    }

    htmlClass.get = function get(tagOrClass) {
      return typeof tagOrClass === 'string'
        ? register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')
        : filterBy(tagOrClass);
    };

    htmlClass.set = function set(tag, Class) {
      return (
        catchClass.test(tag) ? add(tag, Class) : add(Class, tag), htmlClass
      );
    };

    return htmlClass;
  })({
    collections: {
      HTMLAllCollection: ['all'],
      HTMLCollection: ['forms'],
      HTMLFormControlsCollection: ['elements'],
      HTMLOptionsCollection: ['options'],
    },
    elements: {
      Element: ['element'],
      HTMLAnchorElement: ['a'],
      HTMLAppletElement: ['applet'],
      HTMLAreaElement: ['area'],
      HTMLAttachmentElement: ['attachment'],
      HTMLAudioElement: ['audio'],
      HTMLBRElement: ['br'],
      HTMLBaseElement: ['base'],
      HTMLBodyElement: ['body'],
      HTMLButtonElement: ['button'],
      HTMLCanvasElement: ['canvas'],
      HTMLContentElement: ['content'],
      HTMLDListElement: ['dl'],
      HTMLDataElement: ['data'],
      HTMLDataListElement: ['datalist'],
      HTMLDetailsElement: ['details'],
      HTMLDialogElement: ['dialog'],
      HTMLDirectoryElement: ['dir'],
      HTMLDivElement: ['div'],
      HTMLDocument: ['document'],
      HTMLElement: [
        'element',
        'abbr',
        'address',
        'article',
        'aside',
        'b',
        'bdi',
        'bdo',
        'cite',
        'code',
        'command',
        'dd',
        'dfn',
        'dt',
        'em',
        'figcaption',
        'figure',
        'footer',
        'header',
        'i',
        'kbd',
        'mark',
        'nav',
        'noscript',
        'rp',
        'rt',
        'ruby',
        's',
        'samp',
        'section',
        'small',
        'strong',
        'sub',
        'summary',
        'sup',
        'u',
        'var',
        'wbr',
      ],
      HTMLEmbedElement: ['embed'],
      HTMLFieldSetElement: ['fieldset'],
      HTMLFontElement: ['font'],
      HTMLFormElement: ['form'],
      HTMLFrameElement: ['frame'],
      HTMLFrameSetElement: ['frameset'],
      HTMLHRElement: ['hr'],
      HTMLHeadElement: ['head'],
      HTMLHeadingElement: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
      HTMLHtmlElement: ['html'],
      HTMLIFrameElement: ['iframe'],
      HTMLImageElement: ['img'],
      HTMLInputElement: ['input'],
      HTMLKeygenElement: ['keygen'],
      HTMLLIElement: ['li'],
      HTMLLabelElement: ['label'],
      HTMLLegendElement: ['legend'],
      HTMLLinkElement: ['link'],
      HTMLMapElement: ['map'],
      HTMLMarqueeElement: ['marquee'],
      HTMLMediaElement: ['media'],
      HTMLMenuElement: ['menu'],
      HTMLMenuItemElement: ['menuitem'],
      HTMLMetaElement: ['meta'],
      HTMLMeterElement: ['meter'],
      HTMLModElement: ['del', 'ins'],
      HTMLOListElement: ['ol'],
      HTMLObjectElement: ['object'],
      HTMLOptGroupElement: ['optgroup'],
      HTMLOptionElement: ['option'],
      HTMLOutputElement: ['output'],
      HTMLParagraphElement: ['p'],
      HTMLParamElement: ['param'],
      HTMLPictureElement: ['picture'],
      HTMLPreElement: ['pre'],
      HTMLProgressElement: ['progress'],
      HTMLQuoteElement: ['blockquote', 'q', 'quote'],
      HTMLScriptElement: ['script'],
      HTMLSelectElement: ['select'],
      HTMLShadowElement: ['shadow'],
      HTMLSlotElement: ['slot'],
      HTMLSourceElement: ['source'],
      HTMLSpanElement: ['span'],
      HTMLStyleElement: ['style'],
      HTMLTableCaptionElement: ['caption'],
      HTMLTableCellElement: ['td', 'th'],
      HTMLTableColElement: ['col', 'colgroup'],
      HTMLTableElement: ['table'],
      HTMLTableRowElement: ['tr'],
      HTMLTableSectionElement: ['thead', 'tbody', 'tfoot'],
      HTMLTemplateElement: ['template'],
      HTMLTextAreaElement: ['textarea'],
      HTMLTimeElement: ['time'],
      HTMLTitleElement: ['title'],
      HTMLTrackElement: ['track'],
      HTMLUListElement: ['ul'],
      HTMLUnknownElement: ['unknown', 'vhgroupv', 'vkeygen'],
      HTMLVideoElement: ['video'],
    },
    nodes: {
      Attr: ['node'],
      Audio: ['audio'],
      CDATASection: ['node'],
      CharacterData: ['node'],
      Comment: ['#comment'],
      Document: ['#document'],
      DocumentFragment: ['#document-fragment'],
      DocumentType: ['node'],
      HTMLDocument: ['#document'],
      Image: ['img'],
      Option: ['option'],
      ProcessingInstruction: ['node'],
      ShadowRoot: ['#shadow-root'],
      Text: ['#text'],
      XMLDocument: ['xml'],
    },
  });

  if (_typeof(polyfill) !== 'object')
    polyfill = {
      type: polyfill || 'auto',
    };

  var REGISTER_ELEMENT = 'registerElement',
    EXPANDO_UID =
      '__' + REGISTER_ELEMENT + ((window.Math.random() * 10e4) >> 0),
    ADD_EVENT_LISTENER = 'addEventListener',
    ATTACHED = 'attached',
    CALLBACK = 'Callback',
    DETACHED = 'detached',
    EXTENDS = 'extends',
    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,
    ATTACHED_CALLBACK = ATTACHED + CALLBACK,
    CONNECTED_CALLBACK = 'connected' + CALLBACK,
    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,
    CREATED_CALLBACK = 'created' + CALLBACK,
    DETACHED_CALLBACK = DETACHED + CALLBACK,
    ADDITION = 'ADDITION',
    MODIFICATION = 'MODIFICATION',
    REMOVAL = 'REMOVAL',
    DOM_ATTR_MODIFIED = 'DOMAttrModified',
    DOM_CONTENT_LOADED = 'DOMContentLoaded',
    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',
    PREFIX_TAG = '<',
    PREFIX_IS = '=',
    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,
    invalidNames = [
      'ANNOTATION-XML',
      'COLOR-PROFILE',
      'FONT-FACE',
      'FONT-FACE-SRC',
      'FONT-FACE-URI',
      'FONT-FACE-FORMAT',
      'FONT-FACE-NAME',
      'MISSING-GLYPH',
    ],
    types = [],
    protos = [],
    query = '',
    documentElement = document.documentElement,
    indexOf =
      types.indexOf ||
      function(v) {
        for (var i = this.length; i-- && this[i] !== v; ) {}

        return i;
      },
    OP = Object.prototype,
    hOP = OP.hasOwnProperty,
    iPO = OP.isPrototypeOf,
    defineProperty = Object.defineProperty,
    empty = [],
    gOPD = Object.getOwnPropertyDescriptor,
    gOPN = Object.getOwnPropertyNames,
    gPO = Object.getPrototypeOf,
    sPO = Object.setPrototypeOf,
    hasProto = !!Object.__proto__,
    DRECEV1 = '__dreCEv1',
    customElements = window.customElements,
    usableCustomElements =
      !/^force/.test(polyfill.type) &&
      !!(
        customElements &&
        customElements.define &&
        customElements.get &&
        customElements.whenDefined
      ),
    Dict = Object.create || Object,
    Map =
      window.Map ||
      function Map() {
        var K = [],
          V = [],
          i;
        return {
          get: function get(k) {
            return V[indexOf.call(K, k)];
          },
          set: function set(k, v) {
            i = indexOf.call(K, k);
            if (i < 0) V[K.push(k) - 1] = v;
            else V[i] = v;
          },
        };
      },
    Promise =
      window.Promise ||
      function(fn) {
        var notify = [],
          done = false,
          p = {
            catch: function _catch() {
              return p;
            },
            then: function then(cb) {
              notify.push(cb);
              if (done) setTimeout(resolve, 1);
              return p;
            },
          };

        function resolve(value) {
          done = true;

          while (notify.length) {
            notify.shift()(value);
          }
        }

        fn(resolve);
        return p;
      },
    justCreated = false,
    constructors = Dict(null),
    waitingList = Dict(null),
    nodeNames = new Map(),
    secondArgument = function secondArgument(is) {
      return is.toLowerCase();
    },
    create =
      Object.create ||
      function Bridge(proto) {
        return proto ? ((Bridge.prototype = proto), new Bridge()) : this;
      },
    setPrototype =
      sPO ||
      (hasProto
        ? function(o, p) {
            o.__proto__ = p;
            return o;
          }
        : gOPN && gOPD
        ? (function() {
            function setProperties(o, p) {
              for (
                var key, names = gOPN(p), i = 0, length = names.length;
                i < length;
                i++
              ) {
                key = names[i];

                if (!hOP.call(o, key)) {
                  defineProperty(o, key, gOPD(p, key));
                }
              }
            }

            return function(o, p) {
              do {
                setProperties(o, p);
              } while ((p = gPO(p)) && !iPO.call(p, o));

              return o;
            };
          })()
        : function(o, p) {
            for (var key in p) {
              o[key] = p[key];
            }

            return o;
          }),
    MutationObserver =
      window.MutationObserver || window.WebKitMutationObserver,
    HTMLElementPrototype = (
      window.HTMLElement ||
      window.Element ||
      window.Node
    ).prototype,
    IE8 = !iPO.call(HTMLElementPrototype, documentElement),
    safeProperty = IE8
      ? function(o, k, d) {
          o[k] = d.value;
          return o;
        }
      : defineProperty,
    isValidNode = IE8
      ? function(node) {
          return node.nodeType === 1;
        }
      : function(node) {
          return iPO.call(HTMLElementPrototype, node);
        },
    targets = IE8 && [],
    attachShadow = HTMLElementPrototype.attachShadow,
    cloneNode = HTMLElementPrototype.cloneNode,
    dispatchEvent = HTMLElementPrototype.dispatchEvent,
    getAttribute = HTMLElementPrototype.getAttribute,
    hasAttribute = HTMLElementPrototype.hasAttribute,
    removeAttribute = HTMLElementPrototype.removeAttribute,
    setAttribute = HTMLElementPrototype.setAttribute,
    createElement = document.createElement,
    patchedCreateElement = createElement,
    attributesObserver = MutationObserver && {
      attributes: true,
      characterData: true,
      attributeOldValue: true,
    },
    DOMAttrModified =
      MutationObserver ||
      function(e) {
        doesNotSupportDOMAttrModified = false;
        documentElement.removeEventListener(
          DOM_ATTR_MODIFIED,
          DOMAttrModified
        );
      },
    asapQueue,
    asapTimer = 0,
    V0 = REGISTER_ELEMENT in document && !/^force-all/.test(polyfill.type),
    setListener = true,
    justSetup = false,
    doesNotSupportDOMAttrModified = true,
    dropDomContentLoaded = true,
    notFromInnerHTMLHelper = true,
    onSubtreeModified,
    callDOMAttrModified,
    getAttributesMirror,
    observer,
    observe,
    patchIfNotAlready,
    patch,
    tmp;

  if (MutationObserver) {
    tmp = document.createElement('div');
    tmp.innerHTML = '<div><div></div></div>';
    new MutationObserver(function(mutations, observer) {
      if (
        mutations[0] &&
        mutations[0].type == 'childList' &&
        !mutations[0].removedNodes[0].childNodes.length
      ) {
        tmp = gOPD(HTMLElementPrototype, 'innerHTML');

        var _set = tmp && tmp.set;

        if (_set)
          defineProperty(HTMLElementPrototype, 'innerHTML', {
            set: function set(value) {
              while (this.lastChild) {
                this.removeChild(this.lastChild);
              }

              _set.call(this, value);
            },
          });
      }

      observer.disconnect();
      tmp = null;
    }).observe(tmp, {
      childList: true,
      subtree: true,
    });
    tmp.innerHTML = '';
  }

  if (!V0) {
    if (sPO || hasProto) {
      patchIfNotAlready = function patchIfNotAlready(node, proto) {
        if (!iPO.call(proto, node)) {
          setupNode(node, proto);
        }
      };

      patch = setupNode;
    } else {
      patchIfNotAlready = function patchIfNotAlready(node, proto) {
        if (!node[EXPANDO_UID]) {
          node[EXPANDO_UID] = Object(true);
          setupNode(node, proto);
        }
      };

      patch = patchIfNotAlready;
    }

    if (IE8) {
      doesNotSupportDOMAttrModified = false;

      (function() {
        var descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),
          addEventListener = descriptor.value,
          patchedRemoveAttribute = function patchedRemoveAttribute(name) {
            var e = new CustomEvent(DOM_ATTR_MODIFIED, {
              bubbles: true,
            });
            e.attrName = name;
            e.prevValue = getAttribute.call(this, name);
            e.newValue = null;
            e[REMOVAL] = e.attrChange = 2;
            removeAttribute.call(this, name);
            dispatchEvent.call(this, e);
          },
          patchedSetAttribute = function patchedSetAttribute(name, value) {
            var had = hasAttribute.call(this, name),
              old = had && getAttribute.call(this, name),
              e = new CustomEvent(DOM_ATTR_MODIFIED, {
                bubbles: true,
              });
            setAttribute.call(this, name, value);
            e.attrName = name;
            e.prevValue = had ? old : null;
            e.newValue = value;

            if (had) {
              e[MODIFICATION] = e.attrChange = 1;
            } else {
              e[ADDITION] = e.attrChange = 0;
            }

            dispatchEvent.call(this, e);
          },
          onPropertyChange = function onPropertyChange(e) {
            var node = e.currentTarget,
              superSecret = node[EXPANDO_UID],
              propertyName = e.propertyName,
              event;

            if (superSecret.hasOwnProperty(propertyName)) {
              superSecret = superSecret[propertyName];
              event = new CustomEvent(DOM_ATTR_MODIFIED, {
                bubbles: true,
              });
              event.attrName = superSecret.name;
              event.prevValue = superSecret.value || null;
              event.newValue = superSecret.value =
                node[propertyName] || null;

              if (event.prevValue == null) {
                event[ADDITION] = event.attrChange = 0;
              } else {
                event[MODIFICATION] = event.attrChange = 1;
              }

              dispatchEvent.call(node, event);
            }
          };

        descriptor.value = function(type, handler, capture) {
          if (
            type === DOM_ATTR_MODIFIED &&
            this[ATTRIBUTE_CHANGED_CALLBACK] &&
            this.setAttribute !== patchedSetAttribute
          ) {
            this[EXPANDO_UID] = {
              className: {
                name: 'class',
                value: this.className,
              },
            };
            this.setAttribute = patchedSetAttribute;
            this.removeAttribute = patchedRemoveAttribute;
            addEventListener.call(
              this,
              'propertychange',
              onPropertyChange
            );
          }

          addEventListener.call(this, type, handler, capture);
        };

        defineProperty(
          HTMLElementPrototype,
          ADD_EVENT_LISTENER,
          descriptor
        );
      })();
    } else if (!MutationObserver) {
      documentElement[ADD_EVENT_LISTENER](
        DOM_ATTR_MODIFIED,
        DOMAttrModified
      );
      documentElement.setAttribute(EXPANDO_UID, 1);
      documentElement.removeAttribute(EXPANDO_UID);

      if (doesNotSupportDOMAttrModified) {
        onSubtreeModified = function onSubtreeModified(e) {
          var node = this,
            oldAttributes,
            newAttributes,
            key;

          if (node === e.target) {
            oldAttributes = node[EXPANDO_UID];
            node[EXPANDO_UID] = newAttributes = getAttributesMirror(node);

            for (key in newAttributes) {
              if (!(key in oldAttributes)) {
                return callDOMAttrModified(
                  0,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  ADDITION
                );
              } else if (newAttributes[key] !== oldAttributes[key]) {
                return callDOMAttrModified(
                  1,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  MODIFICATION
                );
              }
            }

            for (key in oldAttributes) {
              if (!(key in newAttributes)) {
                return callDOMAttrModified(
                  2,
                  node,
                  key,
                  oldAttributes[key],
                  newAttributes[key],
                  REMOVAL
                );
              }
            }
          }
        };

        callDOMAttrModified = function callDOMAttrModified(
          attrChange,
          currentTarget,
          attrName,
          prevValue,
          newValue,
          action
        ) {
          var e = {
            attrChange: attrChange,
            currentTarget: currentTarget,
            attrName: attrName,
            prevValue: prevValue,
            newValue: newValue,
          };
          e[action] = attrChange;
          onDOMAttrModified(e);
        };

        getAttributesMirror = function getAttributesMirror(node) {
          for (
            var attr,
              name,
              result = {},
              attributes = node.attributes,
              i = 0,
              length = attributes.length;
            i < length;
            i++
          ) {
            attr = attributes[i];
            name = attr.name;

            if (name !== 'setAttribute') {
              result[name] = attr.value;
            }
          }

          return result;
        };
      }
    }

    document[REGISTER_ELEMENT] = function registerElement(type, options) {
      upperType = type.toUpperCase();

      if (setListener) {
        setListener = false;

        if (MutationObserver) {
          observer = (function(attached, detached) {
            function checkEmAll(list, callback) {
              for (
                var i = 0, length = list.length;
                i < length;
                callback(list[i++])
              ) {}
            }

            return new MutationObserver(function(records) {
              for (
                var current,
                  node,
                  newValue,
                  i = 0,
                  length = records.length;
                i < length;
                i++
              ) {
                current = records[i];

                if (current.type === 'childList') {
                  checkEmAll(current.addedNodes, attached);
                  checkEmAll(current.removedNodes, detached);
                } else {
                  node = current.target;

                  if (
                    notFromInnerHTMLHelper &&
                    node[ATTRIBUTE_CHANGED_CALLBACK] &&
                    current.attributeName !== 'style'
                  ) {
                    newValue = getAttribute.call(
                      node,
                      current.attributeName
                    );

                    if (newValue !== current.oldValue) {
                      node[ATTRIBUTE_CHANGED_CALLBACK](
                        current.attributeName,
                        current.oldValue,
                        newValue
                      );
                    }
                  }
                }
              }
            });
          })(executeAction(ATTACHED), executeAction(DETACHED));

          observe = function observe(node) {
            observer.observe(node, {
              childList: true,
              subtree: true,
            });
            return node;
          };

          observe(document);

          if (attachShadow) {
            HTMLElementPrototype.attachShadow = function() {
              return observe(attachShadow.apply(this, arguments));
            };
          }
        } else {
          asapQueue = [];
          document[ADD_EVENT_LISTENER](
            'DOMNodeInserted',
            onDOMNode(ATTACHED)
          );
          document[ADD_EVENT_LISTENER](
            'DOMNodeRemoved',
            onDOMNode(DETACHED)
          );
        }

        document[ADD_EVENT_LISTENER](
          DOM_CONTENT_LOADED,
          onReadyStateChange
        );
        document[ADD_EVENT_LISTENER](
          'readystatechange',
          onReadyStateChange
        );

        HTMLElementPrototype.cloneNode = function(deep) {
          var node = cloneNode.call(this, !!deep),
            i = getTypeIndex(node);
          if (-1 < i) patch(node, protos[i]);
          if (deep && query.length)
            loopAndSetup(node.querySelectorAll(query));
          return node;
        };
      }

      if (justSetup) return (justSetup = false);

      if (
        -2 <
        indexOf.call(types, PREFIX_IS + upperType) +
          indexOf.call(types, PREFIX_TAG + upperType)
      ) {
        throwTypeError(type);
      }

      if (
        !validName.test(upperType) ||
        -1 < indexOf.call(invalidNames, upperType)
      ) {
        throw new Error('The type ' + type + ' is invalid');
      }

      var constructor = function constructor() {
          return extending
            ? document.createElement(nodeName, upperType)
            : document.createElement(nodeName);
        },
        opt = options || OP,
        extending = hOP.call(opt, EXTENDS),
        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,
        upperType,
        i;

      if (extending && -1 < indexOf.call(types, PREFIX_TAG + nodeName)) {
        throwTypeError(nodeName);
      }

      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;
      query = query.concat(
        query.length ? ',' : '',
        extending
          ? nodeName + '[is="' + type.toLowerCase() + '"]'
          : nodeName
      );
      constructor.prototype = protos[i] = hOP.call(opt, 'prototype')
        ? opt.prototype
        : create(HTMLElementPrototype);
      if (query.length)
        loopAndVerify(document.querySelectorAll(query), ATTACHED);
      return constructor;
    };

    document.createElement = patchedCreateElement = function patchedCreateElement(
      localName,
      typeExtension
    ) {
      var is = getIs(typeExtension),
        node = is
          ? createElement.call(document, localName, secondArgument(is))
          : createElement.call(document, localName),
        name = '' + localName,
        i = indexOf.call(
          types,
          (is ? PREFIX_IS : PREFIX_TAG) + (is || name).toUpperCase()
        ),
        setup = -1 < i;

      if (is) {
        node.setAttribute('is', (is = is.toLowerCase()));

        if (setup) {
          setup = isInQSA(name.toUpperCase(), is);
        }
      }

      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;
      if (setup) patch(node, protos[i]);
      return node;
    };
  }

  function ASAP() {
    var queue = asapQueue.splice(0, asapQueue.length);
    asapTimer = 0;

    while (queue.length) {
      queue.shift().call(null, queue.shift());
    }
  }

  function loopAndVerify(list, action) {
    for (var i = 0, length = list.length; i < length; i++) {
      verifyAndSetupAndAction(list[i], action);
    }
  }

  function loopAndSetup(list) {
    for (var i = 0, length = list.length, node; i < length; i++) {
      node = list[i];
      patch(node, protos[getTypeIndex(node)]);
    }
  }

  function executeAction(action) {
    return function(node) {
      if (isValidNode(node)) {
        verifyAndSetupAndAction(node, action);
        if (query.length)
          loopAndVerify(node.querySelectorAll(query), action);
      }
    };
  }

  function getTypeIndex(target) {
    var is = getAttribute.call(target, 'is'),
      nodeName = target.nodeName.toUpperCase(),
      i = indexOf.call(
        types,
        is ? PREFIX_IS + is.toUpperCase() : PREFIX_TAG + nodeName
      );
    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;
  }

  function isInQSA(name, type) {
    return -1 < query.indexOf(name + '[is="' + type + '"]');
  }

  function onDOMAttrModified(e) {
    var node = e.currentTarget,
      attrChange = e.attrChange,
      attrName = e.attrName,
      target = e.target,
      addition = e[ADDITION] || 2,
      removal = e[REMOVAL] || 3;

    if (
      notFromInnerHTMLHelper &&
      (!target || target === node) &&
      node[ATTRIBUTE_CHANGED_CALLBACK] &&
      attrName !== 'style' &&
      (e.prevValue !== e.newValue ||
        (e.newValue === '' &&
          (attrChange === addition || attrChange === removal)))
    ) {
      node[ATTRIBUTE_CHANGED_CALLBACK](
        attrName,
        attrChange === addition ? null : e.prevValue,
        attrChange === removal ? null : e.newValue
      );
    }
  }

  function onDOMNode(action) {
    var executor = executeAction(action);
    return function(e) {
      asapQueue.push(executor, e.target);
      if (asapTimer) clearTimeout(asapTimer);
      asapTimer = setTimeout(ASAP, 1);
    };
  }

  function onReadyStateChange(e) {
    if (dropDomContentLoaded) {
      dropDomContentLoaded = false;
      e.currentTarget.removeEventListener(
        DOM_CONTENT_LOADED,
        onReadyStateChange
      );
    }

    if (query.length)
      loopAndVerify(
        (e.target || document).querySelectorAll(query),
        e.detail === DETACHED ? DETACHED : ATTACHED
      );
    if (IE8) purge();
  }

  function patchedSetAttribute(name, value) {
    var self = this;
    setAttribute.call(self, name, value);
    onSubtreeModified.call(self, {
      target: self,
    });
  }

  function setupNode(node, proto) {
    setPrototype(node, proto);

    if (observer) {
      observer.observe(node, attributesObserver);
    } else {
      if (doesNotSupportDOMAttrModified) {
        node.setAttribute = patchedSetAttribute;
        node[EXPANDO_UID] = getAttributesMirror(node);
        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);
      }

      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);
    }

    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {
      node.created = true;
      node[CREATED_CALLBACK]();
      node.created = false;
    }
  }

  function purge() {
    for (var node, i = 0, length = targets.length; i < length; i++) {
      node = targets[i];

      if (!documentElement.contains(node)) {
        length--;
        targets.splice(i--, 1);
        verifyAndSetupAndAction(node, DETACHED);
      }
    }
  }

  function throwTypeError(type) {
    throw new Error('A ' + type + ' type is already registered');
  }

  function verifyAndSetupAndAction(node, action) {
    var fn,
      i = getTypeIndex(node),
      counterAction;

    if (-1 < i) {
      patchIfNotAlready(node, protos[i]);
      i = 0;

      if (action === ATTACHED && !node[ATTACHED]) {
        node[DETACHED] = false;
        node[ATTACHED] = true;
        counterAction = 'connected';
        i = 1;

        if (IE8 && indexOf.call(targets, node) < 0) {
          targets.push(node);
        }
      } else if (action === DETACHED && !node[DETACHED]) {
        node[ATTACHED] = false;
        node[DETACHED] = true;
        counterAction = 'disconnected';
        i = 1;
      }

      if (
        i &&
        (fn = node[action + CALLBACK] || node[counterAction + CALLBACK])
      )
        fn.call(node);
    }
  }

  function CustomElementRegistry() {}

  CustomElementRegistry.prototype = {
    constructor: CustomElementRegistry,
    define: usableCustomElements
      ? function(name, Class, options) {
          if (options) {
            CERDefine(name, Class, options);
          } else {
            var NAME = name.toUpperCase();
            constructors[NAME] = {
              constructor: Class,
              create: [NAME],
            };
            nodeNames.set(Class, NAME);
            customElements.define(name, Class);
          }
        }
      : CERDefine,
    get: usableCustomElements
      ? function(name) {
          return customElements.get(name) || get(name);
        }
      : get,
    whenDefined: usableCustomElements
      ? function(name) {
          return Promise.race([
            customElements.whenDefined(name),
            whenDefined(name),
          ]);
        }
      : whenDefined,
  };

  function CERDefine(name, Class, options) {
    var is = (options && options[EXTENDS]) || '',
      CProto = Class.prototype,
      proto = create(CProto),
      attributes = Class.observedAttributes || empty,
      definition = {
        prototype: proto,
      };
    safeProperty(proto, CREATED_CALLBACK, {
      value: function value() {
        if (justCreated) justCreated = false;
        else if (!this[DRECEV1]) {
          this[DRECEV1] = true;
          new Class(this);
          if (CProto[CREATED_CALLBACK])
            CProto[CREATED_CALLBACK].call(this);
          var info = constructors[nodeNames.get(Class)];

          if (!usableCustomElements || info.create.length > 1) {
            notifyAttributes(this);
          }
        }
      },
    });
    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {
      value: function value(name) {
        if (-1 < indexOf.call(attributes, name))
          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);
      },
    });

    if (CProto[CONNECTED_CALLBACK]) {
      safeProperty(proto, ATTACHED_CALLBACK, {
        value: CProto[CONNECTED_CALLBACK],
      });
    }

    if (CProto[DISCONNECTED_CALLBACK]) {
      safeProperty(proto, DETACHED_CALLBACK, {
        value: CProto[DISCONNECTED_CALLBACK],
      });
    }

    if (is) definition[EXTENDS] = is;
    name = name.toUpperCase();
    constructors[name] = {
      constructor: Class,
      create: is ? [is, secondArgument(name)] : [name],
    };
    nodeNames.set(Class, name);
    document[REGISTER_ELEMENT](name.toLowerCase(), definition);
    whenDefined(name);
    waitingList[name].r();
  }

  function get(name) {
    var info = constructors[name.toUpperCase()];
    return info && info.constructor;
  }

  function getIs(options) {
    return typeof options === 'string'
      ? options
      : (options && options.is) || '';
  }

  function notifyAttributes(self) {
    var callback = self[ATTRIBUTE_CHANGED_CALLBACK],
      attributes = callback ? self.attributes : empty,
      i = attributes.length,
      attribute;

    while (i--) {
      attribute = attributes[i];
      callback.call(
        self,
        attribute.name || attribute.nodeName,
        null,
        attribute.value || attribute.nodeValue
      );
    }
  }

  function whenDefined(name) {
    name = name.toUpperCase();

    if (!(name in waitingList)) {
      waitingList[name] = {};
      waitingList[name].p = new Promise(function(resolve) {
        waitingList[name].r = resolve;
      });
    }

    return waitingList[name].p;
  }

  function polyfillV1() {
    if (customElements) delete window.customElements;
    defineProperty(window, 'customElements', {
      configurable: true,
      value: new CustomElementRegistry(),
    });
    defineProperty(window, 'CustomElementRegistry', {
      configurable: true,
      value: CustomElementRegistry,
    });

    for (
      var patchClass = function patchClass(name) {
          var Class = window[name];

          if (Class) {
            window[name] = function CustomElementsV1(self) {
              var info, isNative;
              if (!self) self = this;

              if (!self[DRECEV1]) {
                justCreated = true;
                info = constructors[nodeNames.get(self.constructor)];
                isNative =
                  usableCustomElements && info.create.length === 1;
                self = isNative
                  ? Reflect.construct(Class, empty, info.constructor)
                  : document.createElement.apply(document, info.create);
                self[DRECEV1] = true;
                justCreated = false;
                if (!isNative) notifyAttributes(self);
              }

              return self;
            };

            window[name].prototype = Class.prototype;

            try {
              Class.prototype.constructor = window[name];
            } catch (WebKit) {
              defineProperty(Class, DRECEV1, {
                value: window[name],
              });
            }
          }
        },
        Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),
        i = Classes.length;
      i--;
      patchClass(Classes[i])
    ) {}

    document.createElement = function(name, options) {
      var is = getIs(options);
      return is
        ? patchedCreateElement.call(this, name, secondArgument(is))
        : patchedCreateElement.call(this, name);
    };

    if (!V0) {
      justSetup = true;
      document[REGISTER_ELEMENT]('');
    }
  }

  if (!customElements || /^force/.test(polyfill.type)) polyfillV1();
  else if (!polyfill.noBuiltIn) {
    try {
      (function(DRE, options, name) {
        options[EXTENDS] = 'a';
        DRE.prototype = create(HTMLAnchorElement.prototype);
        DRE.prototype.constructor = DRE;
        window.customElements.define(name, DRE, options);

        if (
          getAttribute.call(
            document.createElement('a', {
              is: name,
            }),
            'is'
          ) !== name ||
          (usableCustomElements &&
            getAttribute.call(new DRE(), 'is') !== name)
        ) {
          throw options;
        }
      })(
        function DRE() {
          return Reflect.construct(HTMLAnchorElement, [], DRE);
        },
        {},
        'document-register-element-a'
      );
    } catch (o_O) {
      polyfillV1();
    }
  }

  if (!polyfill.noBuiltIn) {
    try {
      createElement.call(document, 'a', 'a');
    } catch (FireFox) {
      secondArgument = function secondArgument(is) {
        return {
          is: is.toLowerCase(),
        };
      };
    }
  }
}

function _createSuper(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$1()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$1() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var registeredElements = (global$1.registeredElements =
  global$1.registeredElements || []);
var registerElement = function registerElement(tagName, ReactComponent) {
  var propNames =
    arguments.length > 2 && arguments[2] !== undefined
      ? arguments[2]
      : null;

  var _ref =
      arguments.length > 3 && arguments[3] !== undefined
        ? arguments[3]
        : {},
    _ref$attributesBlackl = _ref.attributesBlacklist,
    attributesBlacklist =
      _ref$attributesBlackl === void 0 ? ['id'] : _ref$attributesBlackl;

  if (!tagName)
    tagName = ReactComponent.displayName || ReactComponent.name;
  if (registeredElements.indexOf(tagName) !== -1) return;
  registeredElements.push(tagName);

  if (typeof document === 'undefined' || typeof window === 'undefined') {
    return null;
  }

  if (!global$1.registeredElements.hasPolyfill) {
    global$1.registeredElements.hasPolyfill = true;
    installCustomElements(window);
  }

  if (propNames) {
    propNames = prepareDefaultProps(propNames);
  }

  var HtmlClass = (function(_HTMLElement) {
    _inherits(HtmlClass, _HTMLElement);

    var _super = _createSuper(HtmlClass);

    _createClass(HtmlClass, null, [
      {
        key: 'observedAttributes',
        get: function get() {
          return propNames || [];
        },
      },
    ]);

    function HtmlClass(props) {
      var _this;

      _classCallCheck(this, HtmlClass);

      _this = _super.call(this, props);
      _this._elementRef = React.createRef();
      _this._customMethodes = {};
      _this._customEvents = [];
      _this._isConnected = false;
      return _this;
    }

    _createClass(HtmlClass, [
      {
        key: 'connectedCallback',
        value: function connectedCallback() {
          this.updateChildren();
          this.renderElement();
          this._isConnected = true;
        },
      },
      {
        key: 'attributeChangedCallback',
        value: function attributeChangedCallback(
          attrName,
          oldAttr,
          newAttr
        ) {
          if (!this._isConnected || oldAttr === newAttr) {
            return false;
          }

          this.renderElement();
          return newAttr;
        },
      },
      {
        key: 'detachedCallback',
        value: function detachedCallback() {
          ReactDOM.unmountComponentAtNode(this);
          if (this._children) delete this._children;
          if (this._isConnected) delete this._isConnected;
          if (this._elementRef) delete this._elementRef;
          if (this._customMethodes) delete this._customMethodes;
          if (this._customEvents) delete this._customEvents;
        },
      },
      {
        key: 'updateChildren',
        value: function updateChildren() {
          this._children = [];
          var i,
            cn = this.childNodes,
            v;

          for (i = cn.length; i--; ) {
            v = toVdom(cn[i]);

            if (v) {
              this._children.push(v);
            }
          }
        },
      },
      {
        key: 'connectEvents',
        value: function connectEvents(props) {
          if (props.events) {
            props.event = props.events;
            delete props.events;
          }

          var events = props.event ? props.event.split(',') : [];

          if (ReactComponent.renderProps) {
            events = Object.entries(ReactComponent.renderProps)
              .filter(function(_ref2) {
                var _ref3 = _slicedToArray(_ref2, 1),
                  key = _ref3[0];

                return key && props[key];
              })
              .reduce(function(events, _ref4) {
                var _ref5 = _slicedToArray(_ref4, 1),
                  key = _ref5[0];

                events.push(key + '=' + props[key]);
                delete props[key];
                return events;
              }, events);
          }

          if (events.length > 0) {
            events.forEach(function(eventDef) {
              var _eventDef$split = eventDef.split('='),
                _eventDef$split2 = _slicedToArray(_eventDef$split, 2),
                type = _eventDef$split2[0],
                func = _eventDef$split2[1];

              type = EVENT_TRANSLATIONS[type] || type;

              props[type] = function() {
                try {
                  for (
                    var _len = arguments.length,
                      args = new Array(_len),
                      _key = 0;
                    _key < _len;
                    _key++
                  ) {
                    args[_key] = arguments[_key];
                  }

                  if (args[0]) {
                    if (React.isValidElement(args[0])) args[0] = [args[0]];

                    if (Array.isArray(args[0])) {
                      var elems = [];
                      args[0].forEach(function(elem) {
                        if (React.isValidElement(elem)) {
                          var rootEl = document.createElement('div');
                          ReactDOM.render(elem, rootEl);
                          elems.push(rootEl);
                        }
                      });
                      if (elems.length > 0) args[0] = elems;
                    }
                  }

                  var _func$split = func.split('.'),
                    _func$split2 = _slicedToArray(_func$split, 2),
                    scope = _func$split2[0],
                    fn = _func$split2[1];

                  fn = fn ? window[scope][fn] : window[scope];
                  var ret = fn.apply(scope, [].concat(args));

                  if (ret instanceof HTMLElement) {
                    var children = [],
                      cn = ret.childNodes,
                      a = ret.attributes,
                      _props = {};

                    for (var i = cn.length; i--; ) {
                      children.push(toVdom(cn[i]));
                    }

                    for (var _i = a.length; _i--; ) {
                      _props[PROP_TRANSLATIONS[a[_i].name] || a[_i].name] =
                        a[_i].value;
                    }

                    var nodeName = ret.nodeName.toLowerCase();
                    ret.remove();
                    return React.createElement(nodeName, _props, children);
                  }

                  return ret;
                } catch (error) {
                  new ErrorHandler(
                    "The '"
                      .concat(type, "' event has failed. '")
                      .concat(func, "' has to exist on a 'window' scope!"),
                    error
                  );
                }
              };
            });
            delete props.event;
          }

          return props;
        },
      },
      {
        key: 'addEvent',
        value: function addEvent(eventName, eventCallback) {
          var _this2 = this;

          var eventWrapper = function eventWrapper(event) {
            return eventCallback.apply(_this2, [event]);
          };

          this._customEvents.push({
            eventName: eventName,
            eventCallback: eventCallback,
            eventWrapper: eventWrapper,
          });

          return eventWrapper;
        },
      },
      {
        key: 'removeEvent',
        value: function removeEvent(eventId) {
          var removeCallback =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : null;
          this._customEvents = this._customEvents.reduce(function(
            accumulator,
            current
          ) {
            if (removeCallback) {
              var eventWrapper = current.eventCallback;

              if (eventWrapper !== removeCallback) {
                accumulator.push(current);
              }
            } else {
              var _eventWrapper = current.eventWrapper;

              if (_eventWrapper !== eventId) {
                accumulator.push(current);
              }
            }

            return accumulator;
          },
          []);
        },
      },
      {
        key: 'fireEvent',
        value: function fireEvent(eventName) {
          var _this3 = this;

          for (
            var _len2 = arguments.length,
              args = new Array(_len2 > 1 ? _len2 - 1 : 0),
              _key2 = 1;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2 - 1] = arguments[_key2];
          }

          this._customEvents.forEach(function(_ref6) {
            var name = _ref6.eventName,
              eventCallback = _ref6.eventCallback;

            if (
              name === eventName &&
              typeof eventCallback === 'function'
            ) {
              eventCallback.apply(_this3, [].concat(args));
            }
          });
        },
      },
      {
        key: 'renderElement',
        value: function renderElement() {
          var _this4 = this;

          var props = {},
            i = 0,
            a = this.attributes;

          for (i = a.length; i--; ) {
            props[a[i].name] = a[i].value;
          }

          props = this.connectEvents(props);

          for (i = attributesBlacklist.length; i--; ) {
            if (props[attributesBlacklist[i]]) {
              this.removeAttribute(attributesBlacklist[i]);
            }
          }

          if (this._children && this._children.length > 0) {
            props.children = this._children;
          }

          if (this._elementRef) {
            props.ref = this._elementRef;
          }

          if (!props.custom_element) {
            props.custom_element = this;
          }

          if (!props.custom_method) {
            props.custom_method = function(methodName, methodFunc) {
              _this4[methodName] = _this4._customMethodes[
                methodName
              ] = methodFunc;
            };
          }

          ReactDOM.render(
            React.createElement(ReactComponent, props),
            this
          );
        },
      },
    ]);

    return HtmlClass;
  })(_wrapNativeSuper(HTMLElement));

  return window.customElements.define(tagName, HtmlClass);
};

var filterProps = function filterProps(key) {
  return key && !/[A-Z]/.test(key) && !/children/.test(key);
};

var prepareDefaultProps = function prepareDefaultProps(defaultProps) {
  return Array.isArray(defaultProps)
    ? defaultProps.filter(filterProps)
    : Object.entries(defaultProps || {})
        .reduce(function(props, _ref7) {
          var _ref8 = _slicedToArray(_ref7, 1),
            key = _ref8[0];

          props.push(key);
          return props;
        }, [])
        .filter(filterProps);
};

var toVdom = function toVdom(elem) {
  var name =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  if (elem.nodeType === 3) return elem.nodeValue;
  if (elem.nodeType !== 1) return null;
  var children = [],
    props = {},
    i = 0,
    a = elem.attributes,
    cn = elem.childNodes;

  for (i = a.length; i--; ) {
    props[a[i].name] = a[i].value;
  }

  for (i = cn.length; i--; ) {
    children[i] = toVdom(cn[i]);
  }

  props.key = 'key'.concat(Math.random() * 1000);
  return React.createElement(
    name || elem.nodeName.toLowerCase(),
    props,
    children
  );
};

var PROP_TRANSLATIONS = {
  class: 'className',
  for: 'htmlFor',
};
var EVENT_TRANSLATIONS = {
  onclick: 'onClick',
};

var keycode = createCommonjsModule(function(module, exports) {
  // Source: http://jsfiddle.net/vWx8V/
  // http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

  /**
   * Conenience method returns corresponding value for given keyName or keyCode.
   *
   * @param {Mixed} keyCode {Number} or keyName {String}
   * @return {Mixed}
   * @api public
   */

  function keyCode(searchInput) {
    // Keyboard Events
    if (searchInput && 'object' === typeof searchInput) {
      var hasKeyCode =
        searchInput.which || searchInput.keyCode || searchInput.charCode;
      if (hasKeyCode) searchInput = hasKeyCode;
    }

    // Numbers
    if ('number' === typeof searchInput) return names[searchInput];

    // Everything else (cast to string)
    var search = String(searchInput);

    // check codes
    var foundNamedKey = codes[search.toLowerCase()];
    if (foundNamedKey) return foundNamedKey;

    // check aliases
    var foundNamedKey = aliases[search.toLowerCase()];
    if (foundNamedKey) return foundNamedKey;

    // weird character?
    if (search.length === 1) return search.charCodeAt(0);

    return undefined;
  }

  /**
   * Compares a keyboard event with a given keyCode or keyName.
   *
   * @param {Event} event Keyboard event that should be tested
   * @param {Mixed} keyCode {Number} or keyName {String}
   * @return {Boolean}
   * @api public
   */
  keyCode.isEventKey = function isEventKey(event, nameOrCode) {
    if (event && 'object' === typeof event) {
      var keyCode = event.which || event.keyCode || event.charCode;
      if (keyCode === null || keyCode === undefined) {
        return false;
      }
      if (typeof nameOrCode === 'string') {
        // check codes
        var foundNamedKey = codes[nameOrCode.toLowerCase()];
        if (foundNamedKey) {
          return foundNamedKey === keyCode;
        }

        // check aliases
        var foundNamedKey = aliases[nameOrCode.toLowerCase()];
        if (foundNamedKey) {
          return foundNamedKey === keyCode;
        }
      } else if (typeof nameOrCode === 'number') {
        return nameOrCode === keyCode;
      }
      return false;
    }
  };

  exports = module.exports = keyCode;

  /**
   * Get by name
   *
   *   exports.code['enter'] // => 13
   */

  var codes = (exports.code = exports.codes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    'pause/break': 19,
    'caps lock': 20,
    esc: 27,
    space: 32,
    'page up': 33,
    'page down': 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    delete: 46,
    command: 91,
    'left command': 91,
    'right command': 93,
    'numpad *': 106,
    'numpad +': 107,
    'numpad -': 109,
    'numpad .': 110,
    'numpad /': 111,
    'num lock': 144,
    'scroll lock': 145,
    'my computer': 182,
    'my calculator': 183,
    ';': 186,
    '=': 187,
    ',': 188,
    '-': 189,
    '.': 190,
    '/': 191,
    '`': 192,
    '[': 219,
    '\\': 220,
    ']': 221,
    "'": 222,
  });

  // Helper aliases

  var aliases = (exports.aliases = {
    windows: 91,
    '⇧': 16,
    '⌥': 18,
    '⌃': 17,
    '⌘': 91,
    ctl: 17,
    control: 17,
    option: 18,
    pause: 19,
    break: 19,
    caps: 20,
    return: 13,
    escape: 27,
    spc: 32,
    spacebar: 32,
    pgup: 33,
    pgdn: 34,
    ins: 45,
    del: 46,
    cmd: 91,
  });

  /*!
   * Programatically add the following
   */

  // lower case chars
  for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;

  // numbers
  for (var i = 48; i < 58; i++) codes[i - 48] = i;

  // function keys
  for (i = 1; i < 13; i++) codes['f' + i] = i + 111;

  // numpad keys
  for (i = 0; i < 10; i++) codes['numpad ' + i] = i + 96;

  /**
   * Get by code
   *
   *   exports.name[13] // => 'Enter'
   */

  var names = (exports.names = exports.title = {}); // title for backward compat

  // Create reverse mapping
  for (i in codes) names[codes[i]] = i;

  // Add aliases
  for (var alias in aliases) {
    codes[alias] = aliases[alias];
  }
});
var keycode_1 = keycode.code;
var keycode_2 = keycode.codes;
var keycode_3 = keycode.aliases;
var keycode_4 = keycode.names;
var keycode_5 = keycode.title;

var whatInput = createCommonjsModule(function(module, exports) {
  /**
   * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
   * @version v5.2.7
   * @link https://github.com/ten1seven/what-input
   * @license MIT
   */
  (function webpackUniversalModuleDefinition(root, factory) {
    module.exports = factory();
  })(this, function() {
    return /******/ (function(modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/ var installedModules = {}; // The require function

      /******/ /******/ function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/ if (installedModules[moduleId])
          /******/ return installedModules[moduleId].exports; // Create a new module (and put it into the cache)

        /******/ /******/ var module = (installedModules[moduleId] = {
          /******/ exports: {},
          /******/ id: moduleId,
          /******/ loaded: false,
          /******/
        }); // Execute the module function

        /******/ /******/ modules[moduleId].call(
          module.exports,
          module,
          module.exports,
          __webpack_require__
        ); // Flag the module as loaded

        /******/ /******/ module.loaded = true; // Return the exports of the module

        /******/ /******/ return module.exports;
        /******/
      } // expose the modules object (__webpack_modules__)

      /******/ /******/ __webpack_require__.m = modules; // expose the module cache

      /******/ /******/ __webpack_require__.c = installedModules; // __webpack_public_path__

      /******/ /******/ __webpack_require__.p = ''; // Load entry module and return exports

      /******/ /******/ return __webpack_require__(0);
      /******/
    })(
      /************************************************************************/
      /******/ [
        /* 0 */
        /***/ function(module, exports) {
          module.exports = (function() {
            /*
             * bail out if there is no document or window
             * (i.e. in a node/non-DOM environment)
             *
             * Return a stubbed API instead
             */
            if (
              typeof document === 'undefined' ||
              typeof window === 'undefined'
            ) {
              return {
                // always return "initial" because no interaction will ever be detected
                ask: function ask() {
                  return 'initial';
                },

                // always return null
                element: function element() {
                  return null;
                },

                // no-op
                ignoreKeys: function ignoreKeys() {},

                // no-op
                specificKeys: function specificKeys() {},

                // no-op
                registerOnChange: function registerOnChange() {},

                // no-op
                unRegisterOnChange: function unRegisterOnChange() {},
              };
            }

            /*
             * variables
             */

            // cache document.documentElement
            var docElem = document.documentElement;

            // currently focused dom element
            var currentElement = null;

            // last used input type
            var currentInput = 'initial';

            // last used input intent
            var currentIntent = currentInput;

            // UNIX timestamp of current event
            var currentTimestamp = Date.now();

            // check for a `data-whatpersist` attribute on either the `html` or `body` elements, defaults to `true`
            var shouldPersist = 'false';

            // form input types
            var formInputs = ['button', 'input', 'select', 'textarea'];

            // empty array for holding callback functions
            var functionList = [];

            // list of modifier keys commonly used with the mouse and
            // can be safely ignored to prevent false keyboard detection
            var ignoreMap = [
              16, // shift
              17, // control
              18, // alt
              91, // Windows key / left Apple cmd
              93, // Windows menu / right Apple cmd
            ];

            var specificMap = [];

            // mapping of events to input types
            var inputMap = {
              keydown: 'keyboard',
              keyup: 'keyboard',
              mousedown: 'mouse',
              mousemove: 'mouse',
              MSPointerDown: 'pointer',
              MSPointerMove: 'pointer',
              pointerdown: 'pointer',
              pointermove: 'pointer',
              touchstart: 'touch',
              touchend: 'touch',

              // boolean: true if the page is being scrolled
            };
            var isScrolling = false;

            // store current mouse position
            var mousePos = {
              x: null,
              y: null,

              // map of IE 10 pointer events
            };
            var pointerMap = {
              2: 'touch',
              3: 'touch', // treat pen like touch
              4: 'mouse',

              // check support for passive event listeners
            };
            var supportsPassive = false;

            try {
              var opts = Object.defineProperty({}, 'passive', {
                get: function get() {
                  supportsPassive = true;
                },
              });

              window.addEventListener('test', null, opts);
            } catch (e) {}
            // fail silently

            /*
             * set up
             */

            var setUp = function setUp() {
              // add correct mouse wheel event mapping to `inputMap`
              inputMap[detectWheel()] = 'mouse';

              addListeners();
            };

            /*
             * events
             */

            var addListeners = function addListeners() {
              // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding
              // can only demonstrate potential, but not actual, interaction
              // and are treated separately
              var options = supportsPassive ? { passive: true } : false;

              document.addEventListener('DOMContentLoaded', setPersist);

              // pointer events (mouse, pen, touch)
              if (window.PointerEvent) {
                window.addEventListener('pointerdown', setInput);
                window.addEventListener('pointermove', setIntent);
              } else if (window.MSPointerEvent) {
                window.addEventListener('MSPointerDown', setInput);
                window.addEventListener('MSPointerMove', setIntent);
              } else {
                // mouse events
                window.addEventListener('mousedown', setInput);
                window.addEventListener('mousemove', setIntent);

                // touch events
                if ('ontouchstart' in window) {
                  window.addEventListener('touchstart', setInput, options);
                  window.addEventListener('touchend', setInput);
                }
              }

              // mouse wheel
              window.addEventListener(detectWheel(), setIntent, options);

              // keyboard events
              window.addEventListener('keydown', setInput);
              window.addEventListener('keyup', setInput);

              // focus events
              window.addEventListener('focusin', setElement);
              window.addEventListener('focusout', clearElement);
            };

            // checks if input persistence should happen and
            // get saved state from session storage if true (defaults to `false`)
            var setPersist = function setPersist() {
              shouldPersist = !(
                docElem.getAttribute('data-whatpersist') ||
                document.body.getAttribute('data-whatpersist') === 'false'
              );

              if (shouldPersist) {
                // check for session variables and use if available
                try {
                  if (window.sessionStorage.getItem('what-input')) {
                    currentInput = window.sessionStorage.getItem(
                      'what-input'
                    );
                  }

                  if (window.sessionStorage.getItem('what-intent')) {
                    currentIntent = window.sessionStorage.getItem(
                      'what-intent'
                    );
                  }
                } catch (e) {
                  // fail silently
                }
              }

              // always run these so at least `initial` state is set
              doUpdate('input');
              doUpdate('intent');
            };

            // checks conditions before updating new input
            var setInput = function setInput(event) {
              var eventKey = event.which;
              var value = inputMap[event.type];

              if (value === 'pointer') {
                value = pointerType(event);
              }

              var ignoreMatch =
                !specificMap.length && ignoreMap.indexOf(eventKey) === -1;

              var specificMatch =
                specificMap.length && specificMap.indexOf(eventKey) !== -1;

              var shouldUpdate =
                (value === 'keyboard' &&
                  eventKey &&
                  (ignoreMatch || specificMatch)) ||
                value === 'mouse' ||
                value === 'touch';

              // prevent touch detection from being overridden by event execution order
              if (validateTouch(value)) {
                shouldUpdate = false;
              }

              if (shouldUpdate && currentInput !== value) {
                currentInput = value;

                persistInput('input', currentInput);
                doUpdate('input');
              }

              if (shouldUpdate && currentIntent !== value) {
                // preserve intent for keyboard interaction with form fields
                var activeElem = document.activeElement;
                var notFormInput =
                  activeElem &&
                  activeElem.nodeName &&
                  (formInputs.indexOf(
                    activeElem.nodeName.toLowerCase()
                  ) === -1 ||
                    (activeElem.nodeName.toLowerCase() === 'button' &&
                      !checkClosest(activeElem, 'form')));

                if (notFormInput) {
                  currentIntent = value;

                  persistInput('intent', currentIntent);
                  doUpdate('intent');
                }
              }
            };

            // updates the doc and `inputTypes` array with new input
            var doUpdate = function doUpdate(which) {
              docElem.setAttribute(
                'data-what' + which,
                which === 'input' ? currentInput : currentIntent
              );

              fireFunctions(which);
            };

            // updates input intent for `mousemove` and `pointermove`
            var setIntent = function setIntent(event) {
              var value = inputMap[event.type];

              if (value === 'pointer') {
                value = pointerType(event);
              }

              // test to see if `mousemove` happened relative to the screen to detect scrolling versus mousemove
              detectScrolling(event);

              // only execute if scrolling isn't happening
              if (
                ((!isScrolling && !validateTouch(value)) ||
                  (isScrolling && event.type === 'wheel') ||
                  event.type === 'mousewheel' ||
                  event.type === 'DOMMouseScroll') &&
                currentIntent !== value
              ) {
                currentIntent = value;

                persistInput('intent', currentIntent);
                doUpdate('intent');
              }
            };

            var setElement = function setElement(event) {
              if (!event.target.nodeName) {
                // If nodeName is undefined, clear the element
                // This can happen if click inside an <svg> element.
                clearElement();
                return;
              }

              currentElement = event.target.nodeName.toLowerCase();
              docElem.setAttribute('data-whatelement', currentElement);

              if (
                event.target.classList &&
                event.target.classList.length
              ) {
                docElem.setAttribute(
                  'data-whatclasses',
                  event.target.classList.toString().replace(' ', ',')
                );
              }
            };

            var clearElement = function clearElement() {
              currentElement = null;

              docElem.removeAttribute('data-whatelement');
              docElem.removeAttribute('data-whatclasses');
            };

            var persistInput = function persistInput(which, value) {
              if (shouldPersist) {
                try {
                  window.sessionStorage.setItem('what-' + which, value);
                } catch (e) {
                  // fail silently
                }
              }
            };

            /*
             * utilities
             */

            var pointerType = function pointerType(event) {
              if (typeof event.pointerType === 'number') {
                return pointerMap[event.pointerType];
              } else {
                // treat pen like touch
                return event.pointerType === 'pen'
                  ? 'touch'
                  : event.pointerType;
              }
            };

            // prevent touch detection from being overridden by event execution order
            var validateTouch = function validateTouch(value) {
              var timestamp = Date.now();

              var touchIsValid =
                value === 'mouse' &&
                currentInput === 'touch' &&
                timestamp - currentTimestamp < 200;

              currentTimestamp = timestamp;

              return touchIsValid;
            };

            // detect version of mouse wheel event to use
            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event
            var detectWheel = function detectWheel() {
              var wheelType = null;

              // Modern browsers support "wheel"
              if ('onwheel' in document.createElement('div')) {
                wheelType = 'wheel';
              } else {
                // Webkit and IE support at least "mousewheel"
                // or assume that remaining browsers are older Firefox
                wheelType =
                  document.onmousewheel !== undefined
                    ? 'mousewheel'
                    : 'DOMMouseScroll';
              }

              return wheelType;
            };

            // runs callback functions
            var fireFunctions = function fireFunctions(type) {
              for (var i = 0, len = functionList.length; i < len; i++) {
                if (functionList[i].type === type) {
                  functionList[i].fn.call(
                    undefined,
                    type === 'input' ? currentInput : currentIntent
                  );
                }
              }
            };

            // finds matching element in an object
            var objPos = function objPos(match) {
              for (var i = 0, len = functionList.length; i < len; i++) {
                if (functionList[i].fn === match) {
                  return i;
                }
              }
            };

            var detectScrolling = function detectScrolling(event) {
              if (
                mousePos.x !== event.screenX ||
                mousePos.y !== event.screenY
              ) {
                isScrolling = false;

                mousePos.x = event.screenX;
                mousePos.y = event.screenY;
              } else {
                isScrolling = true;
              }
            };

            // manual version of `closest()`
            var checkClosest = function checkClosest(elem, tag) {
              var ElementPrototype = window.Element.prototype;

              if (!ElementPrototype.matches) {
                ElementPrototype.matches =
                  ElementPrototype.msMatchesSelector ||
                  ElementPrototype.webkitMatchesSelector;
              }

              if (!ElementPrototype.closest) {
                do {
                  if (elem.matches(tag)) {
                    return elem;
                  }

                  elem = elem.parentElement || elem.parentNode;
                } while (elem !== null && elem.nodeType === 1);

                return null;
              } else {
                return elem.closest(tag);
              }
            };

            /*
             * init
             */

            // don't start script unless browser cuts the mustard
            // (also passes if polyfills are used)
            if ('addEventListener' in window && Array.prototype.indexOf) {
              setUp();
            }

            /*
             * api
             */

            return {
              // returns string: the current input type
              // opt: 'intent'|'input'
              // 'input' (default): returns the same value as the `data-whatinput` attribute
              // 'intent': includes `data-whatintent` value if it's different than `data-whatinput`
              ask: function ask(opt) {
                return opt === 'intent' ? currentIntent : currentInput;
              },

              // returns string: the currently focused element or null
              element: function element() {
                return currentElement;
              },

              // overwrites ignored keys with provided array
              ignoreKeys: function ignoreKeys(arr) {
                ignoreMap = arr;
              },

              // overwrites specific char keys to update on
              specificKeys: function specificKeys(arr) {
                specificMap = arr;
              },

              // attach functions to input and intent "events"
              // funct: function to fire on change
              // eventType: 'input'|'intent'
              registerOnChange: function registerOnChange(fn, eventType) {
                functionList.push({
                  fn: fn,
                  type: eventType || 'input',
                });
              },

              unRegisterOnChange: function unRegisterOnChange(fn) {
                var position = objPos(fn);

                if (position || position === 0) {
                  functionList.splice(position, 1);
                }
              },

              clearStorage: function clearStorage() {
                window.sessionStorage.clear();
              },
            };
          })();

          /***/
        },
        /******/
      ]
    );
  });
});

var PLATFORM_MAC = 'Mac|iPad|iPhone|iPod';
var PLATFORM_WIN = 'Win';

if (
  typeof process !== 'undefined' &&
  'production' === 'test' &&
  typeof window !== 'undefined'
) {
  window.IS_TEST = true;
}

whatInput.specificKeys([9]);
defineIsTouch();
defineNavigator();
var isMac = function isMac() {
  return (
    typeof navigator !== 'undefined' &&
    navigator.platform.match(new RegExp(PLATFORM_MAC)) !== null
  );
};
var isWin = function isWin() {
  return (
    typeof navigator !== 'undefined' &&
    navigator.platform.match(new RegExp(PLATFORM_WIN)) !== null
  );
};
var IS_TOUCH_DEVICE = undefined;
function isTouchDevice() {
  if (typeof IS_TOUCH_DEVICE !== 'undefined') {
    if (typeof window !== 'undefined') {
      window.IS_TOUCH_DEVICE = IS_TOUCH_DEVICE;
    }

    return IS_TOUCH_DEVICE;
  }

  return IS_TOUCH_DEVICE;
}
function defineIsTouch() {
  var _ref =
      arguments.length > 0 && arguments[0] !== undefined
        ? arguments[0]
        : {},
    _ref$interactive = _ref.interactive,
    interactive = _ref$interactive === void 0 ? true : _ref$interactive;

  var handleDefineTouch = function handleDefineTouch() {
    if (typeof document === 'undefined' || typeof window === 'undefined') {
      return;
    }

    if (unsafeIsTouchDeviceCheck()) {
      document.documentElement.setAttribute('data-is-touch', true);
      IS_TOUCH_DEVICE = true;
    }

    function onMouseOver() {
      try {
        if (IS_TOUCH_DEVICE === true) {
          document.documentElement.removeAttribute('data-is-touch');
        }

        IS_TOUCH_DEVICE = false;
      } catch (e) {
        console.warn(e);
      }

      if (!interactive) {
        window.removeEventListener('mouseover', onMouseOver, false);
      }
    }

    window.addEventListener('mouseover', onMouseOver, false);
    var touchendTimeout;
    window.addEventListener(
      'touchstart',
      function onTouchStart() {
        try {
          clearTimeout(touchendTimeout);
          window.removeEventListener('mouseover', onMouseOver, false);

          if (IS_TOUCH_DEVICE !== true) {
            document.documentElement.setAttribute('data-is-touch', true);
          }

          IS_TOUCH_DEVICE = true;
        } catch (e) {
          console.warn(e);
        }

        if (!interactive) {
          window.removeEventListener('touchstart', onTouchStart, false);
        }
      },
      false
    );

    if (interactive) {
      window.addEventListener(
        'touchend',
        function onTouchEnd() {
          touchendTimeout = setTimeout(function() {
            try {
              window.addEventListener('mouseover', onMouseOver, false);

              if (IS_TOUCH_DEVICE !== true) {
                document.documentElement.setAttribute(
                  'data-is-touch',
                  true
                );
                IS_TOUCH_DEVICE = true;
              }
            } catch (e) {
              console.warn(e);
            }
          }, 50);
        },
        false
      );
    }

    document.removeEventListener('DOMContentLoaded', handleDefineTouch);
  };

  if (
    typeof document !== 'undefined' &&
    document.readyState === 'loading'
  ) {
    document.addEventListener('DOMContentLoaded', handleDefineTouch);
  } else {
    handleDefineTouch();
  }
}

function unsafeIsTouchDeviceCheck() {
  if (typeof document === 'undefined' || typeof window === 'undefined') {
    return false;
  }

  var result = false;

  try {
    if (window.PointerEvent && 'maxTouchPoints' in navigator) {
      if (navigator.maxTouchPoints > 1) {
        result = true;
      }
    } else {
      if (
        window.matchMedia &&
        window.matchMedia('(any-pointer: coarse)').matches
      ) {
        result = true;
      } else if (
        'ontouchstart' in window &&
        document.createEvent('TouchEvent')
      ) {
        result = true;
      }
    }
  } catch (e) {
    result = false;
  }

  return result;
}

function defineNavigator() {
  var handleNavigator = function handleNavigator() {
    if (
      typeof document === 'undefined' ||
      typeof window === 'undefined' ||
      typeof navigator === 'undefined'
    ) {
      return;
    }

    try {
      if (!window.IS_TEST) {
        if (navigator.platform.match(new RegExp(PLATFORM_MAC)) !== null) {
          document.documentElement.setAttribute('data-os', 'mac');
        } else if (
          navigator.platform.match(new RegExp(PLATFORM_WIN)) !== null
        ) {
          document.documentElement.setAttribute('data-os', 'win');
        }
      } else {
        document.documentElement.setAttribute('data-os', 'other');
      }
    } catch (e) {
      console.warn(e);
    }

    document.removeEventListener('DOMContentLoaded', handleNavigator);
  };

  if (
    typeof document !== 'undefined' &&
    document.readyState === 'loading'
  ) {
    document.addEventListener('DOMContentLoaded', handleNavigator);
  } else {
    handleNavigator();
  }
}
var validateDOMAttributes = function validateDOMAttributes(props, params) {
  if (props && props.attributes) {
    var attr = props.attributes;

    if (attr) {
      if (attr[0] === '{') attr = JSON.parse(attr);

      if (attr && _typeof(attr) === 'object') {
        Object.entries(attr).forEach(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            key = _ref3[0],
            value = _ref3[1];

          _extends(params, _defineProperty({}, key, value));
        });
      }
    }
  }

  if (params.disabled === null || params.disabled === 'false') {
    delete params.disabled;
  }

  if (typeof params.top !== 'undefined') {
    delete params.top;
  }

  if (typeof params.right !== 'undefined') {
    delete params.right;
  }

  if (typeof params.bottom !== 'undefined') {
    delete params.bottom;
  }

  if (typeof params.left !== 'undefined') {
    delete params.left;
  } else if (params.disabled === 'true') {
    params.disabled = true;
  }

  if (params.disabled === true) {
    params['aria-disabled'] = true;
  }

  if (props && props.tabindex) {
    var tabIndex = props.tabindex;

    if (tabIndex === 'off') {
      tabIndex = '-1';
    }

    params['tabIndex'] = tabIndex;
  }

  if (params && _typeof(params) === 'object') {
    for (var i in params) {
      if (
        typeof params[i] === 'function' &&
        !/(^[a-z]{1,}[A-Z]{1})/.test(i)
      ) {
        delete params[i];
      } else if (params[i] === null || /[^a-z-]/i.test(i)) {
        delete params[i];
      }
    }
  }

  return params;
};
var processChildren = function processChildren(props) {
  var res =
    typeof props.children === 'function'
      ? props.children(props)
      : props.children;

  if (Array.isArray(res)) {
    var onlyTexts = res.reduce(function(pV, cV) {
      if (typeof cV === 'string' || typeof cV === 'number') {
        pV.push(cV);
      }

      return pV;
    }, []);

    if (onlyTexts.length === res.length && onlyTexts.length > 0) {
      return onlyTexts.join('');
    }
  }

  return res;
};
var extend = function extend() {
  var first = {};

  for (
    var _len = arguments.length, objects = new Array(_len), _key = 0;
    _key < _len;
    _key++
  ) {
    objects[_key] = arguments[_key];
  }

  var keepRef = objects[0];

  if (keepRef === true || keepRef === false) {
    objects.shift();

    if (keepRef) {
      first = objects.shift();
    }
  }

  return objects.reduce(function(acc1, object) {
    if (object) {
      acc1 = _extends(
        acc1,
        Object.entries(object).reduce(function(acc2, _ref4) {
          var _ref5 = _slicedToArray(_ref4, 2),
            key = _ref5[0],
            value = _ref5[1];

          if (value !== null) {
            if (_typeof(value) === 'object') {
              value = extend(acc1[key] || {}, value);

              if (Object.keys(value).length > 0) {
                acc2[key] = value;
              }
            } else {
              acc2[key] = value;
            }
          }

          return acc2;
        }, {})
      );
    }

    return acc1;
  }, first);
};
var extendPropsWithContext = function extendPropsWithContext(props) {
  var defaults =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  for (
    var _len2 = arguments.length,
      contexts = new Array(_len2 > 2 ? _len2 - 2 : 0),
      _key2 = 2;
    _key2 < _len2;
    _key2++
  ) {
    contexts[_key2 - 2] = arguments[_key2];
  }

  var context = contexts.reduce(function(acc, cur) {
    if (cur) {
      acc = _extends({}, acc, {}, cur);
    }

    return acc;
  }, {});
  return _extends(
    {},
    props,
    {},
    Object.entries(context).reduce(function(acc, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
        key = _ref7[0],
        value = _ref7[1];

      if (
        typeof props[key] !== 'undefined' &&
        props[key] === defaults[key]
      ) {
        acc[key] = value;
      }

      return acc;
    }, {})
  );
};
var isTrue = function isTrue(value) {
  if (
    value !== null &&
    typeof value !== 'undefined' &&
    (String(value) === 'true' || String(value) === '1')
  ) {
    return true;
  }

  return false;
};
var dispatchCustomElementEvent = function dispatchCustomElementEvent(
  src,
  eventName,
  eventObject
) {
  var ret = null;

  if (eventObject && eventObject.attributes && eventObject.event) {
    var currentTarget = eventObject.event.currentTarget;

    if (currentTarget) {
      try {
        var dataset = _extends({}, currentTarget.dataset || {});

        var attributes = _extends({}, eventObject.attributes);

        for (var i in attributes) {
          if (/^data-/.test(i)) {
            dataset[String(i).replace(/^data-/, '')] = attributes[i];
          }
        }

        for (var _i in dataset) {
          if (eventObject.event.currentTarget.dataset) {
            eventObject.event.currentTarget.dataset[_i] = dataset[_i];
          }

          if (
            eventObject.event.target &&
            eventObject.event.target.dataset
          ) {
            eventObject.event.target.dataset[_i] = dataset[_i];
          }
        }
      } catch (e) {
        console.warn('Error on handling dataset:', e);
      }
    }
  }

  var props = (src && src.props) || src;

  if (props.custom_element) {
    if (typeof props.custom_element.fireEvent === 'function') {
      ret = props.custom_element.fireEvent(eventName, eventObject);
    }
  }

  if (typeof props[eventName] === 'function') {
    ret = props[eventName].apply(src, [eventObject]);
  }

  eventName = toPascalCase(eventName);

  if (typeof props[eventName] === 'function') {
    ret = props[eventName].apply(src, [eventObject]);
  }

  return ret;
};
var toPascalCase = function toPascalCase(s) {
  return s.split(/_/g).reduce(function(acc, cur, i) {
    return (
      acc +
      (i === 0
        ? cur
        : cur.replace(/(\w)(\w*)/g, function(g0, g1, g2) {
            return g1.toUpperCase() + g2.toLowerCase();
          }))
    );
  }, '');
};
var pickRenderProps = function pickRenderProps(props, renderProps) {
  return Object.entries(props)
    .filter(function(_ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
        key = _ref9[0],
        value = _ref9[1];

      if (
        typeof renderProps[key] !== 'undefined' ||
        key === 'children' ||
        key === 'custom_method'
      )
        return false;
      return typeof value === 'function';
    })
    .reduce(function(obj, _ref10) {
      var _ref11 = _slicedToArray(_ref10, 2),
        key = _ref11[0],
        value = _ref11[1];

      obj[key] = value;
      return obj;
    }, {});
};
var detectOutsideClick = function detectOutsideClick(
  ignoreElements,
  onSuccess,
  options
) {
  return new DetectOutsideClickClass(ignoreElements, onSuccess, options);
};
var DetectOutsideClickClass = (function() {
  function DetectOutsideClickClass(_ignoreElements, _onSuccess) {
    var _this = this;

    var options =
      arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : {};

    _classCallCheck(this, DetectOutsideClickClass);

    this.checkOutsideClick = function(_ref12) {
      var currentElement = _ref12.currentElement,
        ignoreElements = _ref12.ignoreElements;
      var onSuccess =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      try {
        if (
          typeof currentElement.tagName === 'undefined' ||
          /html/i.test(currentElement.tagName)
        ) {
          return;
        }

        if (_this.checkIfHasScrollbar(currentElement)) {
          return;
        }

        for (var i = 0, elem, l = ignoreElements.length; i < l; ++i) {
          elem = currentElement;

          if (!ignoreElements[i]) {
            continue;
          }

          do {
            if (elem === ignoreElements[i]) {
              return;
            }

            elem = elem && elem.parentNode;
          } while (elem);
        }

        if (typeof onSuccess === 'function') {
          onSuccess();
        }
      } catch (e) {
        console.warn(e);
      }
    };

    this.checkIfHasScrollbar = function(elem) {
      return (
        elem &&
        (elem.scrollHeight > elem.offsetHeight ||
          elem.scrollWidth > elem.offsetWidth) &&
        _this.overflowIsScrollable(elem)
      );
    };

    this.overflowIsScrollable = function(elem) {
      var style = window.getComputedStyle(elem);
      return /scroll|auto/i.test(
        style.overflow + (style.overflowX || '') + (style.overflowY || '')
      );
    };

    if (
      !this.handleClickOutside &&
      typeof document !== 'undefined' &&
      typeof window !== 'undefined'
    ) {
      if (!Array.isArray(_ignoreElements)) {
        _ignoreElements = [_ignoreElements];
      }

      this.handleClickOutside = function(event) {
        _this.checkOutsideClick(
          {
            currentElement: event.target,
            ignoreElements: _ignoreElements,
          },
          function() {
            return (
              typeof _onSuccess === 'function' &&
              _onSuccess({
                event: event,
              })
            );
          }
        );
      };

      document.addEventListener('mousedown', this.handleClickOutside);

      this.keydownCallback = function(event) {
        var keyCode = keycode(event);

        if (keyCode === 'esc') {
          window.removeEventListener('keydown', _this.keydownCallback);

          if (typeof _onSuccess === 'function') {
            _onSuccess({
              event: event,
            });
          }
        }
      };

      window.addEventListener('keydown', this.keydownCallback);

      if (options.includedKeys) {
        this.keyupCallback = function(event) {
          var keyCode = keycode(event);

          if (
            options.includedKeys.includes(keyCode) &&
            typeof _this.handleClickOutside === 'function'
          ) {
            _this.handleClickOutside(event, function() {
              if (_this.keyupCallback)
                window.removeEventListener('keyup', _this.keyupCallback);
            });
          }
        };

        window.addEventListener('keyup', this.keyupCallback);
      }
    }
  }

  _createClass(DetectOutsideClickClass, [
    {
      key: 'remove',
      value: function remove() {
        if (this.handleClickOutside && typeof document !== 'undefined') {
          document.removeEventListener(
            'mousedown',
            this.handleClickOutside
          );
          this.handleClickOutside = null;
        }

        if (this.keydownCallback && typeof window !== 'undefined') {
          window.removeEventListener('keydown', this.keydownCallback);
          this.keydownCallback = null;
        }

        if (this.keyupCallback && typeof window !== 'undefined') {
          window.removeEventListener('keyup', this.keyupCallback);
          this.keyupCallback = null;
        }
      },
    },
  ]);

  return DetectOutsideClickClass;
})();
var filterProps$1 = function filterProps(props) {
  var remove =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  var allowed =
    arguments.length > 2 && arguments[2] !== undefined
      ? arguments[2]
      : null;

  if (Array.isArray(remove)) {
    remove = remove.reduce(function(acc, key) {
      acc[key] = true;
      return acc;
    }, {});
  }

  if (Array.isArray(allowed)) {
    allowed = allowed.reduce(function(acc, key) {
      acc[key] = true;
      return acc;
    }, {});
  }

  return Object.entries(props).reduce(function(acc, _ref13) {
    var _ref14 = _slicedToArray(_ref13, 2),
      k = _ref14[0],
      v = _ref14[1];

    if ((remove && !remove[k]) || (allowed && allowed[k])) {
      acc[k] = v;
    }

    return acc;
  }, {});
};
var makeUniqueId = function makeUniqueId() {
  var prefix =
    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var length =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  return (
    prefix +
    String(
      Math.random()
        .toString(36)
        .substr(2, length) + idIncrement++
    ).slice(-length)
  );
};
var idIncrement = 0;
var slugify = function slugify(s) {
  return String(s)
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '');
};
var getPreviousSibling = function getPreviousSibling(className, elem) {
  try {
    var contains = function contains(elem) {
      return elem && elem.classList.contains(className);
    };

    if (contains(elem)) {
      return elem;
    }

    while ((elem = elem && elem.parentElement) && !contains(elem)) {}
  } catch (e) {
    console.warn(e);
  }

  return elem;
};

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }

  return target;
}

var _strictMethod = function(method, arg) {
  return (
    !!method &&
    _fails(function() {
      // eslint-disable-next-line no-useless-call
      arg
        ? method.call(
            null,
            function() {
              /* empty */
            },
            1
          )
        : method.call(null);
    })
  );
};

var $sort = [].sort;
var test$1 = [1, 2, 3];

_export(
  _export.P +
    _export.F *
      (_fails(function() {
        // IE8-
        test$1.sort(undefined);
      }) ||
        !_fails(function() {
          // V8 bug
          test$1.sort(null);
          // Old WebKit
        }) ||
        !_strictMethod($sort)),
  'Array',
  {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
      return comparefn === undefined
        ? $sort.call(_toObject(this))
        : $sort.call(_toObject(this), _aFunction(comparefn));
    },
  }
);

var reactIs_production_min = createCommonjsModule(function(
  module,
  exports
) {
  Object.defineProperty(exports, '__esModule', { value: !0 });
  var b = 'function' === typeof Symbol && Symbol.for,
    c = b ? Symbol.for('react.element') : 60103,
    d = b ? Symbol.for('react.portal') : 60106,
    e = b ? Symbol.for('react.fragment') : 60107,
    f = b ? Symbol.for('react.strict_mode') : 60108,
    g = b ? Symbol.for('react.profiler') : 60114,
    h = b ? Symbol.for('react.provider') : 60109,
    k = b ? Symbol.for('react.context') : 60110,
    l = b ? Symbol.for('react.async_mode') : 60111,
    m = b ? Symbol.for('react.concurrent_mode') : 60111,
    n = b ? Symbol.for('react.forward_ref') : 60112,
    p = b ? Symbol.for('react.suspense') : 60113,
    q = b ? Symbol.for('react.suspense_list') : 60120,
    r = b ? Symbol.for('react.memo') : 60115,
    t = b ? Symbol.for('react.lazy') : 60116,
    v = b ? Symbol.for('react.fundamental') : 60117,
    w = b ? Symbol.for('react.responder') : 60118,
    x = b ? Symbol.for('react.scope') : 60119;
  function y(a) {
    if ('object' === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (((a = a.type), a)) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (((a = a && a.$$typeof), a)) {
                case k:
                case n:
                case t:
                case r:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function z(a) {
    return y(a) === m;
  }
  exports.typeOf = y;
  exports.AsyncMode = l;
  exports.ConcurrentMode = m;
  exports.ContextConsumer = k;
  exports.ContextProvider = h;
  exports.Element = c;
  exports.ForwardRef = n;
  exports.Fragment = e;
  exports.Lazy = t;
  exports.Memo = r;
  exports.Portal = d;
  exports.Profiler = g;
  exports.StrictMode = f;
  exports.Suspense = p;
  exports.isValidElementType = function(a) {
    return (
      'string' === typeof a ||
      'function' === typeof a ||
      a === e ||
      a === m ||
      a === g ||
      a === f ||
      a === p ||
      a === q ||
      ('object' === typeof a &&
        null !== a &&
        (a.$$typeof === t ||
          a.$$typeof === r ||
          a.$$typeof === h ||
          a.$$typeof === k ||
          a.$$typeof === n ||
          a.$$typeof === v ||
          a.$$typeof === w ||
          a.$$typeof === x))
    );
  };
  exports.isAsyncMode = function(a) {
    return z(a) || y(a) === l;
  };
  exports.isConcurrentMode = z;
  exports.isContextConsumer = function(a) {
    return y(a) === k;
  };
  exports.isContextProvider = function(a) {
    return y(a) === h;
  };
  exports.isElement = function(a) {
    return 'object' === typeof a && null !== a && a.$$typeof === c;
  };
  exports.isForwardRef = function(a) {
    return y(a) === n;
  };
  exports.isFragment = function(a) {
    return y(a) === e;
  };
  exports.isLazy = function(a) {
    return y(a) === t;
  };
  exports.isMemo = function(a) {
    return y(a) === r;
  };
  exports.isPortal = function(a) {
    return y(a) === d;
  };
  exports.isProfiler = function(a) {
    return y(a) === g;
  };
  exports.isStrictMode = function(a) {
    return y(a) === f;
  };
  exports.isSuspense = function(a) {
    return y(a) === p;
  };
});

unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Lazy;
var reactIs_production_min_10 = reactIs_production_min.Memo;
var reactIs_production_min_11 = reactIs_production_min.Portal;
var reactIs_production_min_12 = reactIs_production_min.Profiler;
var reactIs_production_min_13 = reactIs_production_min.StrictMode;
var reactIs_production_min_14 = reactIs_production_min.Suspense;
var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
var reactIs_production_min_20 = reactIs_production_min.isElement;
var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
var reactIs_production_min_22 = reactIs_production_min.isFragment;
var reactIs_production_min_23 = reactIs_production_min.isLazy;
var reactIs_production_min_24 = reactIs_production_min.isMemo;
var reactIs_production_min_25 = reactIs_production_min.isPortal;
var reactIs_production_min_26 = reactIs_production_min.isProfiler;
var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
var reactIs_production_min_28 = reactIs_production_min.isSuspense;

var reactIs_development = createCommonjsModule(function(
  module,
  exports
) {});

unwrapExports(reactIs_development);
var reactIs_development_1 = reactIs_development.typeOf;
var reactIs_development_2 = reactIs_development.AsyncMode;
var reactIs_development_3 = reactIs_development.ConcurrentMode;
var reactIs_development_4 = reactIs_development.ContextConsumer;
var reactIs_development_5 = reactIs_development.ContextProvider;
var reactIs_development_6 = reactIs_development.Element;
var reactIs_development_7 = reactIs_development.ForwardRef;
var reactIs_development_8 = reactIs_development.Fragment;
var reactIs_development_9 = reactIs_development.Lazy;
var reactIs_development_10 = reactIs_development.Memo;
var reactIs_development_11 = reactIs_development.Portal;
var reactIs_development_12 = reactIs_development.Profiler;
var reactIs_development_13 = reactIs_development.StrictMode;
var reactIs_development_14 = reactIs_development.Suspense;
var reactIs_development_15 = reactIs_development.isValidElementType;
var reactIs_development_16 = reactIs_development.isAsyncMode;
var reactIs_development_17 = reactIs_development.isConcurrentMode;
var reactIs_development_18 = reactIs_development.isContextConsumer;
var reactIs_development_19 = reactIs_development.isContextProvider;
var reactIs_development_20 = reactIs_development.isElement;
var reactIs_development_21 = reactIs_development.isForwardRef;
var reactIs_development_22 = reactIs_development.isFragment;
var reactIs_development_23 = reactIs_development.isLazy;
var reactIs_development_24 = reactIs_development.isMemo;
var reactIs_development_25 = reactIs_development.isPortal;
var reactIs_development_26 = reactIs_development.isProfiler;
var reactIs_development_27 = reactIs_development.isStrictMode;
var reactIs_development_28 = reactIs_development.isSuspense;

var reactIs = createCommonjsModule(function(module) {
  {
    module.exports = reactIs_production_min;
  }
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError(
      'Object.assign cannot be called with null or undefined'
    );
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
      test3[letter] = letter;
    });
    if (
      Object.keys(Object.assign({}, test3)).join('') !==
      'abcdefghijklmnopqrst'
    ) {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

var objectAssign = shouldUseNative()
  ? Object.assign
  : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;

      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);

        for (var key in from) {
          if (hasOwnProperty$1.call(from, key)) {
            to[key] = from[key];
          }
        }

        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }

      return to;
    };

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var has = Function.call.bind(Object.prototype.hasOwnProperty);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function() {
  function shim(
    props,
    propName,
    componentName,
    location,
    propFullName,
    secret
  ) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
        'Use PropTypes.checkPropTypes() to call them. ' +
        'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  } // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction,
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function(module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = factoryWithThrowingShims();
  }
});

var classnames = createCommonjsModule(function(module) {
  /*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
  /* global define */

  (function() {
    var hasOwn = {}.hasOwnProperty;

    function classNames() {
      var classes = [];

      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;

        var argType = typeof arg;

        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg) && arg.length) {
          var inner = classNames.apply(null, arg);
          if (inner) {
            classes.push(inner);
          }
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }

      return classes.join(' ');
    }

    if (module.exports) {
      classNames.default = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
});

function getOffsetTop(elem) {
  var offsetTop = 0;

  do {
    if (!isNaN(elem.offsetTop)) {
      offsetTop += elem.offsetTop;
    }
  } while ((elem = elem.offsetParent));

  return offsetTop;
}
function debounce(func) {
  var wait =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : 250;

  var _ref2 =
      arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : {},
    _ref2$immediate = _ref2.immediate,
    immediate = _ref2$immediate === void 0 ? false : _ref2$immediate,
    _ref2$context = _ref2.context,
    context = _ref2$context === void 0 ? null : _ref2$context;

  var timeout;
  var recall;
  return function executedFunction() {
    var ctx = context || this;
    var args = arguments;

    if (typeof recall === 'function') {
      recall();
    }

    var later = function later() {
      timeout = null;

      if (!immediate) {
        recall = func.apply(ctx, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      recall = func.apply(ctx, args);
    }
  };
}
var isIE11 =
  typeof window !== 'undefined' && typeof document !== 'undefined'
    ? !!window.MSInputMethodContext && !!document.documentMode
    : false;
var isEdge =
  typeof navigator !== 'undefined' &&
  navigator.userAgent &&
  navigator.userAgent.indexOf
    ? navigator.userAgent.indexOf('Edge') >= 0
    : false;

function AlignmentHelper(_ref) {
  var className = _ref.className,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, ['className', 'children']);

  return React.createElement(
    'span',
    _extends(
      {
        className: classnames('dnb-alignment-helper', className),
        'aria-hidden': true,
      },
      props
    ),
    children
  );
}
AlignmentHelper.defaultProps = {
  children: null,
  className: null,
};

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== 'undefined' && Symbol.iterator in Object(iter))
    return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
  );
}

function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}

// 7.2.2 IsArray(argument)

var _isArray =
  Array.isArray ||
  function isArray(arg) {
    return _cof(arg) == 'Array';
  };

var SPECIES$3 = _wks('species');

var _arraySpeciesConstructor = function(original) {
  var C;
  if (_isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || _isArray(C.prototype)))
      C = undefined;
    if (_isObject(C)) {
      C = C[SPECIES$3];
      if (C === null) C = undefined;
    }
  }
  return C === undefined ? Array : C;
};

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

var _arraySpeciesCreate = function(original, length) {
  return new (_arraySpeciesConstructor(original))(length);
};

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex

var _arrayMethods = function(TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || _arraySpeciesCreate;
  return function($this, callbackfn, that) {
    var O = _toObject($this);
    var self = _iobject(O);
    var f = _ctx(callbackfn, that, 3);
    var length = _toLength(self.length);
    var index = 0;
    var result = IS_MAP
      ? create($this, length)
      : IS_FILTER
      ? create($this, 0)
      : undefined;
    var val, res;
    for (; length > index; index++)
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res;
          // map
          else if (res)
            switch (TYPE) {
              case 3:
                return true; // some
              case 5:
                return val; // find
              case 6:
                return index; // findIndex
              case 2:
                result.push(val); // filter
            }
          else if (IS_EVERY) return false; // every
        }
      }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $find = _arrayMethods(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in [])
  Array(1)[KEY](function() {
    forced = false;
  });
_export(_export.P + _export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(
      this,
      callbackfn,
      arguments.length > 1 ? arguments[1] : undefined
    );
  },
});
_addToUnscopables(KEY);

var spacePatterns = {
  'xx-small': 0.25,
  'x-small': 0.5,
  small: 1,
  medium: 1.5,
  large: 2,
  'x-large': 3,
  'xx-large': 3.5,
  'xx-large-x2': 7,
};
var translateSpace = function translateSpace(type) {
  if (/-x2$/.test(type)) {
    return spacePatterns[type.replace(/-x2$/, '')] * 2;
  }

  return spacePatterns[type] || 0;
};
var splitTypes = function splitTypes(types) {
  if (typeof types === 'string') {
    types = types.split(/ /g);
  } else if (typeof types === 'boolean') {
    return ['small'];
  } else if (typeof types === 'number') {
    return [types];
  }

  return types
    ? types.filter(function(r) {
        return r && r.length > 0;
      })
    : null;
};
var sumTypes = function sumTypes(types) {
  return splitTypes(types)
    .map(function(type) {
      return translateSpace(type);
    })
    .reduce(function(acc, cur) {
      if (cur > 0) {
        acc += cur;
      } else if (cur > 0) {
        acc -= cur;
      }

      return acc;
    }, 0);
};
var createTypeModifyers = function createTypeModifyers(types) {
  return splitTypes(types).reduce(function(acc, type) {
    if (type) {
      var firstLetter = type[0];

      if (parseFloat(firstLetter) > -1) {
        var num = parseFloat(type);

        if (num >= 8 && /[0-9]px/.test(type)) {
          num = num / 16;
        }

        var foundType = findType(num);

        if (foundType) {
          type = foundType;
        } else {
          findNearestTypes(num).forEach(function(type) {
            if (type) {
              acc.push(type);
            }
          });
        }
      }

      if (!(parseFloat(type) > 0)) {
        acc.push(type);
      }
    }

    return acc;
  }, []);
};
var findType = function findType(num) {
  var _ref =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {},
    _ref$returnObject = _ref.returnObject,
    returnObject =
      _ref$returnObject === void 0 ? false : _ref$returnObject;

  var found =
    Object.entries(spacePatterns).find(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
        k = _ref3[0],
        v = _ref3[1];

      return k && v === num;
    }) || null;

  if (returnObject) {
    return found;
  }

  if (found) {
    return found[0];
  }

  return found;
};
var findNearestTypes = function findNearestTypes(num) {
  var res = [];
  var near = Object.entries(spacePatterns)
    .reverse()
    .find(function(_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
        k = _ref5[0],
        v = _ref5[1];

      return k && num >= v;
    });
  var nearNum = (near && near[1]) || num;
  var typeObject = findType(nearNum, {
    returnObject: true,
  });

  if (typeObject) {
    var nearType = typeObject[0];
    res.push(nearType);
    var leftOver = num - parseFloat(typeObject[1]);
    var foundMoreTypes = findNearestTypes(leftOver);
    foundMoreTypes.forEach(function(type) {
      var index = res.indexOf(type);

      if (index !== -1) {
        res[index] = ''.concat(type, '-x2');
      }
    });
    res = [].concat(
      _toConsumableArray(res),
      _toConsumableArray(foundMoreTypes)
    );
  }

  return res;
};
var isValidSpaceProp = function isValidSpaceProp(prop) {
  return prop && ['top', 'right', 'bottom', 'left'].includes(prop);
};
var createSpacingClasses = function createSpacingClasses(props) {
  return Object.entries(props).reduce(function(acc, _ref6) {
    var _ref7 = _slicedToArray(_ref6, 2),
      direction = _ref7[0],
      cur = _ref7[1];

    if (isValidSpaceProp(direction)) {
      if (String(cur) === '0' || String(cur) === 'false') {
        acc.push('dnb-space__'.concat(direction, '--zero'));
      } else if (cur) {
        var typeModifyers = createTypeModifyers(cur);
        var sum = sumTypes(typeModifyers);

        if (sum > 10) {
          console.warn(
            'Spacing of more than 10rem is not supported! You used '
              .concat(sum, ' / (')
              .concat(typeModifyers.join(','), ')')
          );
        } else {
          var nearestTypes = findNearestTypes(sum);
          acc = [].concat(
            _toConsumableArray(acc),
            _toConsumableArray(
              nearestTypes.map(function(type) {
                return 'dnb-space__'.concat(direction, '--').concat(type);
              })
            )
          );
        }
      }
    }

    return acc;
  }, []);
};

var SuffixContext = React.createContext();

var Suffix = function Suffix(props) {
  if (!(props && props.suffix)) {
    return null;
  }

  if (typeof props.children !== 'string') {
    return React.createElement(
      SuffixContext.Provider,
      {
        value: props,
      },
      props.children
    );
  }

  return props.children;
};

var LOCALE = 'nb-NO';
var CURRENCY = 'NOK';
var CURRENCY_DISPLAY = 'symbol';

var enUS = {
  'en-US': {
    DatePicker: {
      day: 'Day',
      month: 'Month',
      year: 'Year',
      start: 'from',
      end: 'to',
      selected_date: 'Selected date: %s',
      selected_month: 'Selected month %s',
      selected_year: 'Selected year %s',
      next_month: 'Next month %s',
      prev_month: 'Previous month %s',
      next_year: 'Next year %s',
      prev_year: 'Previous year %s',
      open_picker_text: 'Open date picker',
      mask_order: 'dd/mm/yyyy',
      mask_placeholder: 'dd/mm/yyyy',
      date_format: 'yyyy-MM-dd',
      return_format: 'yyyy-MM-dd',
      submit_button_text: 'OK',
      cancel_button_text: 'Cancel',
      reset_button_text: 'Reset',
    },
    GlobalStatus: {
      default_title: 'An error has occurred',
      close_text: 'Close',
      status_anchor_text: 'Go to',
    },
    GlobalError: {
      404: {
        title: "Oops! We can't find the page you're looking for …",
        text:
          'Did we messed with the links? Try again, or [go back where you came from](/back).',
        alt: 'Lady searching in empty box',
      },
      500: {
        title: 'Ohh, a technical error happened!',
        text:
          'The service is not working properly at the moment, but try again later.',
        alt: 'Man looking for clues',
      },
    },
    ProgressIndicator: {
      indicator_label: 'Please wait ...',
    },
    Dropdown: {
      title: 'Option Menu',
    },
    Autocomplete: {
      title: 'Type and select',
      submit_button_title: 'Show options',
      no_options: 'No option',
      aria_live_options: '%s options',
      indicator_label: 'Getting data ...',
    },
    Modal: {
      close_title: 'Close',
      more_info: 'More information',
    },
    Input: {
      submit_button_title: 'Submit button',
    },
    Pagination: {
      button_title: 'Page %s',
      next_title: 'Next page',
      prev_title: 'Previous page',
      more_pages: '%s more pages',
      is_loading_text: 'Loading new content',
      load_button_text: 'Show more content',
    },
    Logo: {
      alt: 'DNB Logo',
    },
  },
};

var nbNO = {
  'nb-NO': {
    DatePicker: {
      day: 'dag',
      month: 'måned',
      year: 'år',
      start: 'fra',
      end: 'til',
      selected_date: 'Valgt dato: %s',
      selected_month: 'Valgt måned %s',
      selected_year: 'Valgt år %s',
      next_month: 'Neste måned %s',
      prev_month: 'Forrige måned %s',
      next_year: 'Neste år %s',
      prev_year: 'Forrige år %s',
      open_picker_text: 'åpne datovelger',
      mask_order: 'dd/mm/yyyy',
      mask_placeholder: 'dd/mm/åååå',
      date_format: 'yyyy-MM-dd',
      return_format: 'yyyy-MM-dd',
      submit_button_text: 'Ok',
      cancel_button_text: 'Avbryt',
      reset_button_text: 'Tilbakestill',
    },
    GlobalStatus: {
      default_title: 'En feil har skjedd',
      close_text: 'Lukk',
      status_anchor_text: 'Gå til',
    },
    GlobalError: {
      404: {
        title: 'Oisann! Vi finner ikke siden du leter etter …',
        text:
          'Sikker på at du har skrevet riktig adresse? Eller har vi rotet med lenkene? Prøv på nytt, eller [gå tilbake der du kom fra](/back).',
        alt: 'Dame søker i tom eske',
      },
      500: {
        title: 'Oops, her ble det en teknisk feil!',
        text:
          'Tjenesten fungerer ikke slik den skal for øyeblikket, men prøv igjen senere.',
        alt: 'Mann leter etter spor',
      },
    },
    ProgressIndicator: {
      indicator_label: 'Vennligst vent ...',
    },
    Dropdown: {
      title: 'Valgmeny',
    },
    Autocomplete: {
      title: 'Skriv og velg',
      submit_button_title: 'Vis alternativer',
      no_options: 'Ingen alternativer',
      aria_live_options: '%s alternativer',
      indicator_label: 'Henter data ...',
    },
    Modal: {
      close_title: 'Lukk',
      more_info: 'Mer informasjon',
    },
    Input: {
      submit_button_title: 'Send knapp',
    },
    Pagination: {
      button_title: 'Side %s',
      next_title: 'Neste side',
      prev_title: 'Forrige side',
      more_pages: '%s flere sider',
      is_loading_text: 'Laster nytt innhold',
      load_button_text: 'Vis mer innhold',
    },
    Logo: {
      alt: 'DNB Logo',
    },
  },
};

var defaultLocales = _extends({}, enUS, {}, nbNO);

var defaultContext = function defaultContext() {
  var props =
    arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var locales = props.locales
    ? extend(defaultLocales, props.locales)
    : defaultLocales;
  return _extends(
    {
      locale: LOCALE,
      locales: locales,
      translation:
        locales[props.locale || LOCALE] || defaultLocales[LOCALE] || {},
      currency: CURRENCY,
      currency_display: CURRENCY_DISPLAY,
    },
    props
  );
};
var Context = React.createContext(defaultContext());

function _createSuper$1(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$2()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$2() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps = {
  render_content: null,
};

var defaultProps = _extends(
  {
    for_id: null,
    element: 'label',
    title: null,
    text: null,
    id: null,
    class: null,
    disabled: null,
    label_direction: null,
    direction: null,
    vertical: null,
    sr_only: null,
    className: null,
    children: null,
  },
  renderProps
);

var FormLabel = (function(_React$PureComponent) {
  _inherits(FormLabel, _React$PureComponent);

  var _super = _createSuper$1(FormLabel);

  function FormLabel() {
    _classCallCheck(this, FormLabel);

    return _super.apply(this, arguments);
  }

  _createClass(
    FormLabel,
    [
      {
        key: 'render',
        value: function render() {
          var props = extendPropsWithContext(
            this.props,
            defaultProps,
            this.context.formRow
          );

          var for_id = props.for_id,
            element = props.element,
            title = props.title,
            className = props.className,
            id = props.id,
            disabled = props.disabled,
            label_direction = props.label_direction,
            direction = props.direction,
            vertical = props.vertical,
            sr_only = props.sr_only,
            _className = props.class,
            _text = props.text,
            attributes = _objectWithoutProperties(props, [
              'for_id',
              'element',
              'title',
              'className',
              'id',
              'disabled',
              'label_direction',
              'direction',
              'vertical',
              'sr_only',
              'class',
              'text',
            ]);

          var content = FormLabel.getContent(this.props);

          var params = _extends(
            {
              className: classnames(
                'dnb-form-label',
                (isTrue(vertical) || label_direction === 'vertical') &&
                  'dnb-form-label--vertical',
                createSpacingClasses(props),
                className,
                _className,
                isTrue(sr_only) && 'dnb-form-label--sr-only'
              ),
              htmlFor: for_id,
              id: id,
              title: title,
              disabled: isTrue(disabled),
            },
            attributes
          );

          validateDOMAttributes(this.props, params);

          if (isTrue(sr_only)) {
            return React.createElement(
              Element,
              _extends(
                {
                  is: element,
                },
                params
              ),
              content
            );
          }

          return React.createElement(
            Element,
            _extends(
              {
                is: element,
              },
              params
            ),
            content
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(FormLabel.tagName, FormLabel, defaultProps);
        },
      },
      {
        key: 'getContent',
        value: function getContent(props) {
          if (props.text) return props.text;
          if (typeof props.render_content === 'function')
            props.render_content(props);
          return processChildren(props);
        },
      },
    ]
  );

  return FormLabel;
})(React.PureComponent);

FormLabel.tagName = 'dnb-form-label';
FormLabel.defaultProps = defaultProps;
FormLabel.contextType = Context;

var Element = function Element(_ref) {
  var Element = _ref.is,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, ['is', 'children']);

  return React.createElement(Element, rest, children);
};

function _createSuper$2(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$3()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$3() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var DefaultIconSize = 16;
var DefaultIconSizes = {
  default: 16,
  medium: 24,
};
var ListDefaultIconSizes = [
  ['default', 16],
  ['medium', 24],
];
var ValidIconSizes = [
  'small',
  'default',
  'medium',
  'large',
  'x-large',
  'xx-large',
];
var defaultProps$1 = {
  icon: null,
  modifier: null,
  size: null,
  width: null,
  height: null,
  border: null,
  color: null,
  alt: null,
  title: null,
  attributes: null,
  className: null,
  children: null,
};

var Icon = (function(_React$PureComponent) {
  _inherits(Icon, _React$PureComponent);

  var _super = _createSuper$2(Icon);

  function Icon() {
    _classCallCheck(this, Icon);

    return _super.apply(this, arguments);
  }

  _createClass(
    Icon,
    [
      {
        key: 'render',
        value: function render() {
          var props = extendPropsWithContext(
            this.props,
            defaultProps$1,
            this.context.formRow
          );

          var _prepareIcon = prepareIcon(props),
            icon = _prepareIcon.icon,
            size = _prepareIcon.size,
            wrapperParams = _prepareIcon.wrapperParams,
            iconParams = _prepareIcon.iconParams,
            alt = _prepareIcon.alt;

          var IconContainer = prerenderIcon({
            icon: icon,
            size: size,
            alt: alt,
          });
          if (!IconContainer)
            return React.createElement(React.Fragment, null);
          return React.createElement(
            'span',
            wrapperParams,
            React.createElement(IconContainer, iconParams)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          var tag =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : Icon.tagName;
          var inst =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : Icon;
          var props =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : defaultProps$1;
          registerElement(tag, inst, props);
        },
      },
      {
        key: 'getIcon',
        value: function getIcon(props) {
          if (props.icon) {
            return props.icon;
          }

          return processChildren(props);
        },
      },
    ]
  );

  return Icon;
})(React.PureComponent);

Icon.tagName = 'dnb-icon';
Icon.defaultProps = defaultProps$1;
Icon.contextType = Context;
var getIconNameFromComponent = function getIconNameFromComponent(icon) {
  var name =
    typeof icon === 'string'
      ? icon
      : icon && (icon.displayName || icon.name);

  if (/^data:image\//.test(name)) {
    return null;
  }

  return name;
};
var calcSize = function calcSize(props) {
  var icon = props.icon,
    size = props.size,
    height = props.height,
    width = props.width;
  var sizeAsInt = -1;
  var sizeAsString = null;

  if (!size || size === DefaultIconSize) {
    var name = getIconNameFromComponent(icon);
    var nameParts = String(name || '').split('_');

    if (nameParts.length > 1) {
      var lastPartOfIconName = nameParts.reverse()[0];
      var potentialSize = ListDefaultIconSizes.filter(function(_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
          key = _ref2[0];

        return key === lastPartOfIconName;
      }).reduce(function(acc, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          value = _ref4[1];

        return key && value;
      }, null);

      if (potentialSize) {
        sizeAsInt = potentialSize;
      }

      if (ValidIconSizes.includes(lastPartOfIconName)) {
        sizeAsString = lastPartOfIconName;
      }
    } else {
      if (typeof icon === 'function') {
        var elem = icon();

        if (elem.props) {
          var _potentialSize = -1;

          if (elem.props.width) {
            _potentialSize = elem.props.width;
          }

          if (!_potentialSize && elem.props.viewBox) {
            _potentialSize = /[0-9]+ [0-9]+ ([0-9]+)/.exec(
              elem.props.viewBox
            )[1];
          }

          if (_potentialSize) {
            sizeAsInt = _potentialSize;
          }
        }
      }
    }
  } else if (typeof size === 'string' && !(parseFloat(size) > 0)) {
    sizeAsInt = ListDefaultIconSizes.filter(function(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
        key = _ref6[0];

      return key === size;
    }).reduce(function(acc, _ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
        key = _ref8[0],
        value = _ref8[1];

      return key && value;
    }, -1);

    if (ValidIconSizes.includes(size)) {
      sizeAsString = size;
    }
  } else if (parseFloat(size) > 0) {
    sizeAsInt = ListDefaultIconSizes.filter(function(_ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
        key = _ref10[0],
        value = _ref10[1];

      return key && value === parseFloat(size);
    }).reduce(function(acc, _ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
        key = _ref12[0],
        value = _ref12[1];

      if (key && value) return value;
      return acc;
    }, -1);

    if (sizeAsInt === -1) {
      sizeAsInt = parseFloat(size);
      sizeAsString = 'custom-size';
    }
  }

  if (!sizeAsString && sizeAsInt > 0) {
    var potentialSizeAsString = ListDefaultIconSizes.reduce(function(
      acc,
      _ref13
    ) {
      var _ref14 = _slicedToArray(_ref13, 2),
        key = _ref14[0],
        value = _ref14[1];

      if (key && value === sizeAsInt) {
        return key;
      }

      return acc;
    },
    null);

    if (potentialSizeAsString) {
      sizeAsString = potentialSizeAsString;
    }
  }

  var _prepareIconParams = prepareIconParams({
      sizeAsString: sizeAsString,
      sizeAsInt: sizeAsInt,
      size: size,
      width: width,
      height: height,
    }),
    isCustomSize = _prepareIconParams.sizeAsString,
    iconParams = _prepareIconParams.params;

  if (isCustomSize) {
    sizeAsString = isCustomSize;
  }

  if (!(sizeAsInt > 0)) {
    sizeAsInt = DefaultIconSize;
  }

  if (size === 'auto') {
    iconParams.width = '100%';
    iconParams.height = '100%';
    sizeAsString = 'auto';
  }

  return {
    iconParams: iconParams,
    sizeAsInt: sizeAsInt,
    sizeAsString: sizeAsString,
  };
};

var prepareIconParams = function prepareIconParams(_ref15) {
  var sizeAsString = _ref15.sizeAsString,
    rest = _objectWithoutProperties(_ref15, ['sizeAsString']);

  var size = rest.size,
    width = rest.width,
    height = rest.height,
    sizeAsInt = rest.sizeAsInt;
  var params = {};

  if (!sizeAsString && !(sizeAsInt > 0) && parseFloat(size) > -1) {
    params.width = params.height = parseFloat(size);
  } else if (sizeAsString === 'custom-size') {
    params.width = params.height = parseFloat(sizeAsInt);
  }

  if (parseFloat(width) > -1) {
    sizeAsString = 'custom-size';
    params.width = parseFloat(width);
  }

  if (parseFloat(height) > -1) {
    sizeAsString = 'custom-size';
    params.height = parseFloat(height);
  }

  validateDOMAttributes({}, params);
  return {
    params: params,
    sizeAsString: sizeAsString,
  };
};

var prepareIcon = function prepareIcon(props) {
  var _extends2;

  var icon = props.icon,
    size = props.size,
    height = props.height,
    border = props.border,
    width = props.width,
    color = props.color,
    modifier = props.modifier,
    _alt = props.alt,
    title = props.title,
    _className = props.class,
    className = props.className,
    attributes = _objectWithoutProperties(props, [
      'icon',
      'size',
      'height',
      'border',
      'width',
      'color',
      'modifier',
      'alt',
      'title',
      'class',
      'className',
    ]);

  var _calcSize = calcSize({
      icon: icon,
      size: size,
      height: height,
      width: width,
    }),
    sizeAsString = _calcSize.sizeAsString,
    iconParams = _calcSize.iconParams;

  if (color) {
    iconParams.color = color;
  }

  var alt = _alt || title;

  if (!(alt && alt.length > 0)) {
    alt = getIconNameFromComponent(icon);
    alt = alt ? String(alt).replace(/_/g, ' ') : null;
  }

  var wrapperParams = validateDOMAttributes(
    props,
    _extends(
      ((_extends2 = {
        role: 'img',
        alt: alt,
      }),
      _defineProperty(
        _extends2,
        'aria-label',
        !attributes['aria-hidden'] ? alt : null
      ),
      _defineProperty(_extends2, 'title', title),
      _extends2),
      attributes
    )
  );
  wrapperParams.className = classnames(
    'dnb-icon',
    sizeAsString ? 'dnb-icon--'.concat(sizeAsString) : 'dnb-icon--default',
    createSpacingClasses(props),
    _className,
    className,
    modifier && 'dnb-icon--'.concat(modifier),
    isTrue(border) && 'dnb-icon--border'
  );
  var iconToRender = Icon.getIcon(props);

  if (typeof iconToRender.defaultProps !== 'undefined') {
    iconToRender = React.createElement(
      iconToRender,
      validateDOMAttributes({}, props)
    );
  }

  return _extends({}, props, {
    icon: iconToRender,
    alt: alt,
    iconParams: iconParams,
    wrapperParams: wrapperParams,
  });
};
var prerenderIcon = function prerenderIcon() {
  var _ref16 =
      arguments.length > 0 && arguments[0] !== undefined
        ? arguments[0]
        : {},
    icon = _ref16.icon,
    _ref16$size = _ref16.size,
    size = _ref16$size === void 0 ? null : _ref16$size,
    _ref16$listOfIcons = _ref16.listOfIcons,
    listOfIcons =
      _ref16$listOfIcons === void 0 ? null : _ref16$listOfIcons,
    _ref16$alt = _ref16.alt,
    alt = _ref16$alt === void 0 ? null : _ref16$alt;

  if (typeof icon === 'string' && /^data:image\//.test(icon)) {
    return function() {
      return React.createElement('img', {
        src: icon,
        alt: alt || 'no-alt',
      });
    };
  }

  if (typeof icon === 'function') {
    var elem = icon();

    if (React.isValidElement(elem)) {
      return icon;
    }

    return elem;
  }

  if (React.isValidElement(icon) || Array.isArray(icon)) {
    return function() {
      return icon;
    };
  }

  try {
    icon = iconCase(icon);

    if (
      size &&
      DefaultIconSizes[size] &&
      size !== 'default' &&
      !(parseFloat(size) > 0) &&
      !icon.includes(size)
    ) {
      icon = ''.concat(icon, '_').concat(size);
    }

    var mod = (listOfIcons.dnbIcons ? listOfIcons.dnbIcons : listOfIcons)[
      icon
    ];
    return mod && mod.default ? mod.default : mod;
  } catch (e) {
    new ErrorHandler("Icon '".concat(icon, "' did not exist!"));
    return null;
  }
};
var iconCase = function iconCase(name) {
  return name
    .replace(/((?!^)[A-Z])/g, '_$1')
    .toLowerCase()
    .replace(/^[0-9]/g, '$1')
    .replace(/[^a-z0-9_]/gi, '_');
};

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $find$1 = _arrayMethods(6);
var KEY$1 = 'findIndex';
var forced$1 = true;
// Shouldn't skip holes
if (KEY$1 in [])
  Array(1)[KEY$1](function() {
    forced$1 = false;
  });
_export(_export.P + _export.F * forced$1, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find$1(
      this,
      callbackfn,
      arguments.length > 1 ? arguments[1] : undefined
    );
  },
});
_addToUnscopables(KEY$1);

var GlobalStatusProvider = (function() {
  function GlobalStatusProvider() {
    _classCallCheck(this, GlobalStatusProvider);
  }

  _createClass(GlobalStatusProvider, null, [
    {
      key: 'init',
      value: function init() {
        var id =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : 'main';
        var onReady =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : null;
        var props =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : null;
        var existingStatus = GlobalStatusProvider.get(id);

        if (existingStatus) {
          if (props) {
            existingStatus.add(props);
          }

          if (typeof onReady === 'function') {
            onReady(existingStatus);
          }

          return existingStatus;
        }

        var newStatus = GlobalStatusProvider.create(id, props);

        if (onReady) {
          newStatus.addOnReady(newStatus);
        }

        return newStatus;
      },
    },
    {
      key: 'get',
      value: function get() {
        var id =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : 'main';
        return GlobalStatusProvider.providers[id] || null;
      },
    },
    {
      key: 'remove',
      value: function remove() {
        var id =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : 'main';

        if (GlobalStatusProvider.providers[id]) {
          delete GlobalStatusProvider.providers[id];
        }
      },
    },
    {
      key: 'prepareItemWithStatusId',
      value: function prepareItemWithStatusId(item) {
        var status_id =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : null;

        if (typeof item === 'string') {
          item = {
            text: item,
          };
        }

        if (!item.status_id) {
          item.status_id =
            status_id && status_id !== 'status-main'
              ? status_id
              : slugify$1(JSON.stringify(item));
        }

        return item;
      },
    },
    {
      key: 'combineMessages',
      value: function combineMessages(stack) {
        var globalStatus = stack.reduce(function(acc, _cur) {
          var cur = _extends({}, _cur);

          if (typeof cur.items === 'string' && cur.items[0] === '[') {
            cur.items = JSON.parse(cur.items);
          }

          if (cur.item) {
            if (typeof cur.item === 'string' && cur.item[0] === '{') {
              cur.item = JSON.parse(cur.item);
            }

            cur.items = cur.items || [];
            cur.items.push(cur.item);
          }

          if (cur.items) {
            cur.items = cur.items.reduce(function(acc, item) {
              item = GlobalStatusProvider.prepareItemWithStatusId(item);
              var foundAtIndex = acc.findIndex(function(_ref) {
                var status_id = _ref.status_id;
                return status_id === item.status_id;
              });

              if (foundAtIndex > -1) {
                acc[foundAtIndex] = item;
              } else {
                acc.push(item);
              }

              return acc;
            }, acc.items || []);
          }

          _extends(acc, cur);

          return acc;
        }, {});

        if (globalStatus.items && globalStatus.items.length === 0) {
          delete globalStatus.items;
        }

        return globalStatus;
      },
    },
  ]);

  return GlobalStatusProvider;
})();

GlobalStatusProvider.providers = {};

GlobalStatusProvider.create = function() {
  var id =
    arguments.length > 0 && arguments[0] !== undefined
      ? arguments[0]
      : 'main';
  var props =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  return (GlobalStatusProvider.providers[
    id
  ] = new GlobalStatusProviderItem(id, props));
};

var GlobalStatusProviderItem = (function() {
  function GlobalStatusProviderItem(id) {
    var props =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : null;

    _classCallCheck(this, GlobalStatusProviderItem);

    this.stack = [];
    this.globalStatus = {};
    this._onUpdateEvents = [];
    this._onReadyEvents = [];
    this.internal_id = id;

    if (props) {
      this.add(props);
    }
  }

  _createClass(GlobalStatusProviderItem, [
    {
      key: 'onUpdate',
      value: function onUpdate(event) {
        if (
          this._onUpdateEvents.filter(function(cb) {
            return cb === event;
          }).length === 0
        ) {
          this._onUpdateEvents.push(event);
        }
      },
    },
    {
      key: 'forceRerender',
      value: function forceRerender(globalStatus, props) {
        var _this = this;

        var _ref2 =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : {},
          _ref2$buffer_delay = _ref2.buffer_delay,
          buffer_delay =
            _ref2$buffer_delay === void 0 ? 0 : _ref2$buffer_delay,
          _ref2$isEmpty = _ref2.isEmpty,
          isEmpty = _ref2$isEmpty === void 0 ? false : _ref2$isEmpty;

        var run = function run() {
          _this._onUpdateEvents.forEach(function(event) {
            if (typeof event === 'function') {
              event(globalStatus, props, {
                isEmpty: isEmpty,
              });
            }
          });
        };

        if (buffer_delay > 0) {
          clearTimeout(this._bufferDelayId);
          this._bufferDelayId = setTimeout(run, buffer_delay);
        } else {
          run();
        }
      },
    },
    {
      key: 'init',
      value: function init(props) {
        return this.add(props, {
          preventRerender: true,
        });
      },
    },
    {
      key: 'add',
      value: function add(props) {
        var opts =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {};

        var newProps = _extends({}, props);

        if (!newProps.status_id) {
          newProps.status_id = makeUniqueId();
        }

        if (
          typeof newProps.show === 'undefined' ||
          newProps.show === null
        ) {
          newProps.show = true;
        }

        if (newProps.children) {
          newProps.text = newProps.children;
          delete newProps.children;
        }

        var stackIndex = this.stack.findIndex(function(cur) {
          return cur.status_id === props.status_id;
        });

        if (stackIndex > -1) {
          this.stack[stackIndex] = newProps;
        } else {
          this.stack.push(newProps);
        }

        var globalStatus = GlobalStatusProvider.combineMessages(
          this.stack,
          opts
        );

        if (!opts.preventRerender) {
          this.forceRerender(globalStatus, props);
        }

        return globalStatus;
      },
    },
    {
      key: 'get',
      value: function get(status_id) {
        return this.stack.find(function(cur) {
          return cur.status_id === status_id;
        });
      },
    },
    {
      key: 'remove',
      value: function remove(status_id) {
        var _ref3 =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {},
          _ref3$buffer_delay = _ref3.buffer_delay,
          buffer_delay =
            _ref3$buffer_delay === void 0 ? 10 : _ref3$buffer_delay,
          _ref3$empty_offset = _ref3.empty_offset,
          empty_offset =
            _ref3$empty_offset === void 0 ? 1 : _ref3$empty_offset;

        if (status_id) {
          this.stack = this.stack.filter(function(cur) {
            return cur.status_id !== status_id;
          });
          var globalStatus = GlobalStatusProvider.combineMessages(
            this.stack
          );
          this.forceRerender(globalStatus, null, {
            buffer_delay: buffer_delay,
            isEmpty: this.stack && this.stack.length - empty_offset === 0,
          });
        }
      },
    },
    {
      key: 'empty',
      value: function empty() {
        var _this2 = this;

        this._onUpdateEvents.forEach(function(cb, i) {
          _this2._onUpdateEvents[i] = null;
        });

        this._onUpdateEvents = [];

        this._onReadyEvents.forEach(function(cb, i) {
          _this2._onReadyEvents[i] = null;
        });

        this._onReadyEvents = [];
      },
    },
    {
      key: 'unbind',
      value: function unbind() {
        this.empty();
        GlobalStatusProvider.remove(this.internal_id);
      },
    },
    {
      key: 'isReady',
      value: function isReady() {
        var _this3 = this;

        this._onReadyEvents = this._onReadyEvents.filter(function(cb, i) {
          if (typeof cb === 'function') [cb()];
          _this3._onReadyEvents[i] = null;
          return false;
        });
        return true;
      },
    },
    {
      key: 'addOnReady',
      value: function addOnReady(cb) {
        this._onReadyEvents.push(cb);
      },
    },
  ]);

  return GlobalStatusProviderItem;
})();

if (typeof window !== 'undefined') {
  window.GlobalStatusProvider = GlobalStatusProvider;
}

var slugify$1 = function slugify(s) {
  return s
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '');
};

function _createSuper$3(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$4()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$4() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$1 = {
  render_content: null,
};

var defaultProps$2 = _extends(
  {
    id: null,
    title: null,
    text: null,
    icon: 'error',
    icon_size: 'large',
    state: 'error',
    status: null,
    global_status_id: null,
    hidden: false,
    text_id: null,
    width_selector: null,
    class: null,
    animation: null,
    className: null,
    children: null,
  },
  renderProps$1
);

var FormStatus = (function(_React$PureComponent) {
  _inherits(FormStatus, _React$PureComponent);

  var _super = _createSuper$3(FormStatus);

  _createClass(FormStatus, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(FormStatus.tagName, FormStatus, defaultProps$2);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (props.text) {
          if (isTrue(props.text)) {
            return null;
          }

          return props.text;
        }

        if (typeof props.render_content === 'function')
          props.render_content(props);
        return processChildren(props);
      },
    },
    {
      key: 'getIcon',
      value: function getIcon(_ref) {
        var state = _ref.state,
          icon = _ref.icon,
          icon_size = _ref.icon_size;

        if (typeof icon === 'string') {
          var IconToLoad = icon;

          switch (state) {
            case 'info':
            case 'information':
              IconToLoad = InfoIcon;
              break;

            case 'error':
            default:
              IconToLoad = ErrorIcon;
          }

          icon = React.createElement(Icon, {
            icon: React.createElement(IconToLoad, {
              title: null,
            }),
            size: icon_size,
            'aria-hidden': true,
          });
        }

        return icon;
      },
    },
  ]);

  function FormStatus(props) {
    var _this;

    _classCallCheck(this, FormStatus);

    _this = _super.call(this, props);

    _this.sumElementWidth = function(selector, targetElement) {
      var width = 0;

      try {
        var display = targetElement.style.display;
        targetElement.style.display = 'none';

        if (selector && selector.offsetWidth) {
          width = selector.offsetWidth;
        } else {
          var ids = /,/.test(selector) ? selector.split(', ') : [selector];
          width = ids.reduce(function(acc, cur) {
            var elem =
              cur[0] === '.'
                ? document.querySelector(cur)
                : document.getElementById(cur);

            if (elem && elem.offsetWidth > 0) {
              if (acc > 0) {
                acc += 16;
              }

              acc += elem.offsetWidth;
            }

            return acc;
          }, width);
        }

        targetElement.style.display = display;
      } catch (e) {
        console.warn(e);
      }

      return width;
    };

    _this._id = props.id || makeUniqueId();

    if (props.status !== 'info') {
      _this.gsProvider = GlobalStatusProvider.init(
        props.global_status_id || 'main',
        function(provider) {
          var _this$props = _this.props,
            text = _this$props.text,
            state = _this$props.state;
          var status_id = _this._id;
          provider.add({
            state: state,
            status_id: status_id,
            item: {
              text: text,
              status_id: status_id,
              status_anchor_url: true,
            },
          });
        }
      );
    }

    _this._ref = React.createRef();
    return _this;
  }

  _createClass(FormStatus, [
    {
      key: 'correctStatus',
      value: function correctStatus(state) {
        switch (state) {
          case 'information':
            state = 'info';
            break;
        }

        return state;
      },
    },
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.gsProvider) {
          this.gsProvider.isReady();
        }

        this.setMaxWidth();
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.gsProvider) {
          this.gsProvider.remove(this._id);
        }
      },
    },
    {
      key: 'setMaxWidth',
      value: function setMaxWidth() {
        var elem =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : null;
        var _this$props2 = this.props,
          text_id = _this$props2.text_id,
          width_selector = _this$props2.width_selector;

        if (
          text_id &&
          this._ref.current &&
          typeof document !== 'undefined'
        ) {
          try {
            var width = this.sumElementWidth(
              elem ||
                width_selector ||
                (text_id.match(/^([a-z0-9]+)/) || [])[1],
              this._ref.current
            );

            if (width >= 64) {
              this._ref.current.style.maxWidth = ''.concat(
                (width + (width < 128 ? 32 : 0)) / 16,
                'rem'
              );
            }
          } catch (e) {
            console.warn(e);
          }
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$2,
          this.context.formRow
        );

        var title = props.title,
          rawStatus = props.status,
          rawState = props.state,
          hidden = props.hidden,
          className = props.className,
          animation = props.animation,
          _className = props.class,
          text_id = props.text_id,
          status_id = props.status_id,
          id = props.id,
          text = props.text,
          icon = props.icon,
          icon_size = props.icon_size,
          children = props.children,
          attributes = _objectWithoutProperties(props, [
            'title',
            'status',
            'state',
            'hidden',
            'className',
            'animation',
            'class',
            'text_id',
            'status_id',
            'id',
            'text',
            'icon',
            'icon_size',
            'children',
          ]);

        var state = this.correctStatus(rawStatus || rawState);
        var iconToRender = FormStatus.getIcon({
          state: state,
          icon: icon,
          icon_size: icon_size,
        });
        var contentToRender = FormStatus.getContent(this.props);

        if (contentToRender === null) {
          return React.createElement(React.Fragment, null);
        }

        var hasStringContent =
          typeof contentToRender === 'string' &&
          contentToRender.length > 0;

        var params = _extends(
          {
            id: this._id,
            hidden: hidden,
            className: classnames(
              'dnb-form-status dnb-form-status--'.concat(state),
              createSpacingClasses(props),
              className,
              _className,
              animation && 'dnb-form-status--'.concat(animation),
              hasStringContent && 'dnb-form-status--has-content'
            ),
            title: title,
          },
          attributes
        );

        var textParams = {
          className: 'dnb-form-status--text',
          id: text_id,
        };

        if (hidden) {
          params['aria-hidden'] = hidden;
        }

        validateDOMAttributes(this.props, params);
        validateDOMAttributes(null, textParams);
        return React.createElement(
          'span',
          _extends({}, params, {
            ref: this._ref,
          }),
          React.createElement(
            'span',
            {
              className: 'dnb-form-status__shell',
            },
            iconToRender,
            React.createElement('span', textParams, contentToRender)
          )
        );
      },
    },
  ]);

  return FormStatus;
})(React.PureComponent);

FormStatus.tagName = 'dnb-form-status';
FormStatus.defaultProps = defaultProps$2;
FormStatus.contextType = Context;

var _ref2 = React.createElement('path', {
  d: 'M16 25a.5.5 0 100 1 .5.5 0 000-1v0',
  stroke: '#000',
  strokeWidth: '1.5',
  strokeLinecap: 'round',
  strokeLinejoin: 'round',
});

var _ref3 = React.createElement('path', {
  d: 'M16 21V11',
  stroke: '#000',
  strokeWidth: '1.5',
  strokeLinecap: 'round',
});

var _ref4 = React.createElement('path', {
  clipRule: 'evenodd',
  d:
    'M18.161 2.347a2.408 2.408 0 00-4.322 0L1.208 28.077A2.028 2.028 0 003.029 31h25.942a2.028 2.028 0 001.821-2.923l-12.63-25.73z',
  stroke: '#000',
  strokeWidth: '1.5',
  strokeLinecap: 'round',
  strokeLinejoin: 'round',
});

var ErrorIcon = function ErrorIcon(props) {
  return React.createElement(
    'svg',
    _extends(
      {
        width: '32',
        height: '32',
        viewBox: '0 0 32 32',
        fill: 'none',
        xmlns: 'http://www.w3.org/2000/svg',
        role: 'img',
      },
      props
    ),
    props &&
      props.title &&
      React.createElement('title', null, props.title),
    _ref2,
    _ref3,
    _ref4
  );
};
ErrorIcon.defaultProps = {
  title: 'error',
};

var _ref5 = React.createElement('path', {
  fillRule: 'evenodd',
  clipRule: 'evenodd',
  d:
    'M10.1 1.08A14.75 14.75 0 00.26 15.01a14.73 14.73 0 0022.16 12.74l8.27 3.94a.75.75 0 001-1l-3.94-8.27A14.75 14.75 0 0010.1 1.08zM1.76 15.01a13.25 13.25 0 1124.5 6.97.75.75 0 00-.04.72l3.2 6.73-6.72-3.2a.75.75 0 00-.72.04A13.23 13.23 0 011.76 15zM13.38 7.9a1.31 1.31 0 112.63 0 1.31 1.31 0 01-2.63 0zm-1.13 5.07c0-.41.34-.75.75-.75h1.13c1.04 0 1.88.85 1.88 1.88v5.64c0 .84.67 1.51 1.5 1.51h1.13a.75.75 0 110 1.5h-1.13a3 3 0 01-3-3V14.1c0-.2-.17-.38-.38-.38H13a.75.75 0 01-.75-.75z',
  fill: '#000',
});

var InfoIcon = function InfoIcon(props) {
  return React.createElement(
    'svg',
    _extends(
      {
        width: '32',
        height: '32',
        viewBox: '0 0 32 32',
        fill: 'none',
        xmlns: 'http://www.w3.org/2000/svg',
        role: 'img',
      },
      props
    ),
    props &&
      props.title &&
      React.createElement('title', null, props.title),
    _ref5
  );
};
InfoIcon.defaultProps = {
  title: 'info',
};

function _createSuper$4(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$5()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$5() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}

var icons = _extends({}, primary_icons, {}, primary_icons_medium);

var defaultProps$3 = _extends({}, Icon.defaultProps);

var IconPrimary = (function(_React$PureComponent) {
  _inherits(IconPrimary, _React$PureComponent);

  var _super = _createSuper$4(IconPrimary);

  function IconPrimary() {
    _classCallCheck(this, IconPrimary);

    return _super.apply(this, arguments);
  }

  _createClass(
    IconPrimary,
    [
      {
        key: 'render',
        value: function render() {
          var _prepareIcon = prepareIcon(this.props),
            icon = _prepareIcon.icon,
            size = _prepareIcon.size,
            wrapperParams = _prepareIcon.wrapperParams,
            iconParams = _prepareIcon.iconParams,
            alt = _prepareIcon.alt;

          var IconContainer = prerenderIcon({
            icon: icon,
            size: size,
            alt: alt,
            listOfIcons: icons,
          });
          if (!IconContainer)
            return React.createElement(React.Fragment, null);
          return React.createElement(
            'span',
            wrapperParams,
            React.createElement(IconContainer, iconParams)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          Icon.enableWebComponent(IconPrimary.tagName, IconPrimary);
        },
      },
      {
        key: 'getIcon',
        value: function getIcon(props) {
          return Icon.getIcon(props);
        },
      },
    ]
  );

  return IconPrimary;
})(React.PureComponent);

IconPrimary.tagName = 'dnb-icon-primary';
IconPrimary.defaultProps = defaultProps$3;

function _createSuper$5(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$6()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$6() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$2 = {
  on_click: null,
};
var defaultProps$4 = {
  type: 'button',
  text: null,
  variant: null,
  size: null,
  title: null,
  icon: null,
  icon_position: 'right',
  icon_size: null,
  href: null,
  id: null,
  class: null,
  wrap: false,
  bounding: false,
  disabled: null,
  status: null,
  status_state: 'error',
  status_animation: null,
  global_status_id: null,
  className: null,
  innerRef: null,
  children: null,
  custom_element: null,
  custom_method: null,
  onClick: null,
  on_click: null,
};

var Button = (function(_React$PureComponent) {
  _inherits(Button, _React$PureComponent);

  var _super = _createSuper$5(Button);

  _createClass(Button, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Button.tagName, Button, defaultProps$4);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        return processChildren(props);
      },
    },
  ]);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _super.call(this, props);

    _this.onMouseOutHandler = function() {
      if (_this._ref.current) {
        _this._ref.current.blur();
      }
    };

    _this.onClickHandler = function(event) {
      var afterContent = dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_click',
        {
          event: event,
        }
      );

      if (afterContent && React.isValidElement(afterContent)) {
        _this.setState({
          afterContent: afterContent,
        });
      }
    };

    _this._ref = React.createRef();
    _this.renderProps = pickRenderProps(props, renderProps$2);
    _this.state = {
      afterContent: null,
    };
    return _this;
  }

  _createClass(Button, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (
          this.props.innerRef &&
          typeof this.props.innerRef.current !== 'undefined'
        ) {
          this.props.innerRef.current = this._ref.current;
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$4,
          this.context.formRow
        );

        var class_name = props.class,
          className = props.className,
          type = props.type,
          variant = props.variant,
          size = props.size,
          title = props.title,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          id = props.id,
          disabled = props.disabled,
          _text = props.text,
          _icon = props.icon,
          _icon_position = props.icon_position,
          icon_size = props.icon_size,
          href = props.href,
          wrap = props.wrap,
          bounding = props.bounding,
          innerRef = props.innerRef,
          attributes = _objectWithoutProperties(props, [
            'class',
            'className',
            'type',
            'variant',
            'size',
            'title',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'id',
            'disabled',
            'text',
            'icon',
            'icon_position',
            'icon_size',
            'href',
            'wrap',
            'bounding',
            'innerRef',
          ]);

        var showStatus = status && status !== 'error';
        var text = props.text,
          icon = props.icon,
          iconPosition = props.icon_position;
        var usedVariant = variant;
        var usedSize = size;
        var content = Button.getContent(this.props) || text;
        var isIconOnly = Boolean(!text && !content && icon);

        if (isIconOnly) {
          if (!usedVariant) {
            usedVariant = 'secondary';
          }

          if (!usedSize) {
            usedSize = 'medium';
          }
        } else if (content) {
          if (!usedVariant) {
            usedVariant = 'primary';
          }

          if (!usedSize) {
            usedSize = 'default';
          }
        }

        var iconSize =
          usedSize === 'large' && (icon_size === 'default' || !icon_size)
            ? 'medium'
            : icon_size;
        var classes = classnames(
          'dnb-button dnb-button--'.concat(usedVariant || 'primary'),
          (text || content) && 'dnb-button--has-text',
          createSpacingClasses(props),
          class_name,
          className,
          icon &&
            'dnb-button--icon-position-'.concat(
              iconPosition,
              ' dnb-button--has-icon'
            ) +
              (iconSize ? ' dnb-button--icon-size-'.concat(iconSize) : ''),
          usedSize &&
            usedSize !== 'default' &&
            'dnb-button--size-'.concat(usedSize),
          wrap && 'dnb-button--wrap',
          status && 'dnb-button__status--'.concat(status_state)
        );

        var params = _extends(
          {},
          this.renderProps,
          {
            className: classes,
            type: type,
            title: title,
            id: id,
            disabled: isTrue(disabled),
          },
          attributes,
          {
            onMouseOut: this.onMouseOutHandler,
            onClick: this.onClickHandler,
          }
        );

        validateDOMAttributes(this.props, params);
        return React.createElement(
          React.Fragment,
          null,
          href
            ? React.createElement(
                'a',
                _extends(
                  {
                    href: href,
                    ref: this._ref,
                  },
                  params
                ),
                React.createElement(
                  Content,
                  _extends({}, this.props, {
                    icon: icon,
                    text: text,
                    icon_size: iconSize,
                    content: content,
                    isIconOnly: isIconOnly,
                  })
                )
              )
            : React.createElement(
                'button',
                _extends(
                  {
                    ref: this._ref,
                  },
                  params
                ),
                React.createElement(
                  Content,
                  _extends({}, this.props, {
                    icon: icon,
                    text: text,
                    icon_size: iconSize,
                    content: content,
                    isIconOnly: isIconOnly,
                  })
                )
              ),
          this.state.afterContent,
          showStatus &&
            React.createElement(FormStatus, {
              id: id + '-form-status',
              global_status_id: global_status_id,
              text: status,
              status: status_state,
              text_id: id + '-status',
              animation: status_animation,
            })
        );
      },
    },
  ]);

  return Button;
})(React.PureComponent);

Button.tagName = 'dnb-button';
Button.defaultProps = defaultProps$4;
Button.renderProps = renderProps$2;
Button.contextType = Context;

var _ref = React.createElement('span', {
  key: 'button-bounding',
  className: 'dnb-button__bounding',
});

var _ref2$1 = React.createElement(
  'span',
  {
    key: 'button-text-empty',
    className: 'dnb-button__alignment',
  },
  '\u200C'
);

var _ref3$1 = React.createElement(
  'span',
  {
    key: 'button-text-empty',
    className: 'dnb-button__alignment',
  },
  '\u200C'
);

var Content = (function(_React$PureComponent2) {
  _inherits(Content, _React$PureComponent2);

  var _super2 = _createSuper$5(Content);

  function Content() {
    _classCallCheck(this, Content);

    return _super2.apply(this, arguments);
  }

  _createClass(Content, [
    {
      key: 'render',
      value: function render() {
        var text = this.props.text;
        var _this$props = this.props,
          title = _this$props.title,
          content = _this$props.content,
          icon = _this$props.icon,
          icon_size = _this$props.icon_size,
          bounding = _this$props.bounding,
          isIconOnly = _this$props.isIconOnly;
        var ret = [];

        if (isTrue(bounding)) {
          ret.push(_ref);
        }

        if (typeof content === 'string') {
          text = content;
        } else if (content) {
          ret.push(content);
        }

        if (text) {
          ret.push(
            _ref2$1,
            React.createElement(
              'span',
              {
                key: 'button-text',
                className: 'dnb-button__text',
              },
              text
            )
          );
        } else if (icon) {
          ret.push(_ref3$1);
        }

        if (icon) {
          ret.push(
            React.isValidElement(icon) && /Icon/i.test(String(icon.type))
              ? React.cloneElement(icon, {
                  key: 'button-icon',
                  className: 'dnb-button__icon '.concat(
                    icon.props.className || ''
                  ),
                })
              : React.createElement(IconPrimary, {
                  key: 'button-icon',
                  className: 'dnb-button__icon',
                  icon: icon,
                  size: icon_size,
                  'aria-hidden': isIconOnly && !title ? null : true,
                })
          );
        }

        return ret;
      },
    },
  ]);

  return Content;
})(React.PureComponent);

Content.defaultProps = {
  text: null,
  title: null,
  content: null,
  icon: null,
  icon_size: 'default',
  bounding: false,
  isIconOnly: null,
};

function _createSuper$6(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$7()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$7() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$3 = {
  on_change: null,
  on_submit: null,
  on_focus: null,
  on_blur: null,
  on_submit_focus: null,
  on_submit_blur: null,
  on_state_update: null,
};

var defaultProps$5 = _extends(
  {
    type: 'text',
    size: null,
    value: 'initval',
    id: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    input_state: null,
    global_status_id: null,
    autocomplete: 'off',
    placeholder: null,
    keep_placeholder: null,
    suffix: null,
    align: null,
    selectall: null,
    stretch: null,
    disabled: null,
    input_class: null,
    class: null,
    input_attributes: null,
    input_element: null,
    inner_ref: null,
    icon: null,
    icon_position: 'left',
    readOnly: false,
    submit_element: null,
    submit_button_title: null,
    submit_button_variant: 'secondary',
    submit_button_icon: 'search',
    submit_button_status: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$3
);

var _ref$1 = React.createElement(AlignmentHelper, null);

var Input = (function(_React$PureComponent) {
  _inherits(Input, _React$PureComponent);

  var _super = _createSuper$6(Input);

  _createClass(Input, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Input.tagName, Input, defaultProps$5);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        var value = Input.getValue(props);

        if (
          state._listenForPropChanges &&
          value !== 'initval' &&
          value !== state.value
        ) {
          if (
            value !== state.value &&
            value !== state._value &&
            typeof props.on_state_update === 'function'
          ) {
            dispatchCustomElementEvent(
              {
                props: props,
              },
              'on_state_update',
              {
                value: value,
              }
            );
          }

          state.value = value;
        }

        if (props.input_state) {
          state.inputState = props.input_state;
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
    {
      key: 'hasValue',
      value: function hasValue(value) {
        return (
          ((typeof value === 'string' || typeof value === 'number') &&
            String(value).length > 0) ||
          false
        );
      },
    },
    {
      key: 'getValue',
      value: function getValue(props) {
        var value = processChildren(props);

        if (value === '' || Input.hasValue(value)) {
          return value;
        }

        return props.value;
      },
    },
  ]);

  function Input(props, context) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this, props);
    _this.state = {
      inputState: 'virgin',
      value: null,
      _value: null,
    };

    _this.onFocusHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        inputState: 'focus',
        _listenForPropChanges: false,
      });

      if (isTrue(_this.props.selectall) && _this._ref.current) {
        setTimeout(function() {
          try {
            _this._ref.current.select();
          } catch (e) {
            console.log(e);
          }
        }, 1);
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_focus',
        {
          value: value,
          event: event,
        }
      );
    };

    _this.onBlurHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        inputState:
          Input.hasValue(value) && value !== _this.state._value
            ? 'dirty'
            : 'initial',
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_blur',
        {
          value: value,
          event: event,
        }
      );
    };

    _this.onChangeHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          value: value,
          event: event,
        }
      );
    };

    _this.onKeyDownHandler = function(event) {
      var value = event.target.value;
      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_key_down',
        {
          value: value,
          event: event,
        }
      );

      if (event.key === 'Enter') {
        dispatchCustomElementEvent(
          _assertThisInitialized(_this),
          'on_submit',
          {
            value: value,
            event: event,
          }
        );
      }
    };

    _this._ref = _this.props.inner_ref || React.createRef();
    _this._id =
      props.id ||
      (context.formRow &&
        typeof context.formRow.useId === 'function' &&
        context.formRow.useId()) ||
      makeUniqueId();
    _this.state._listenForPropChanges = true;
    _this.state._value = props.value;
    _this.isMac = isMac();
    return _this;
  }

  _createClass(Input, [
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$5,
          this.context.formRow,
          this.context.translation.Input
        );

        var type = props.type,
          size = props.size,
          label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          disabled = props.disabled,
          placeholder = props.placeholder,
          keep_placeholder = props.keep_placeholder,
          suffix = props.suffix,
          align = props.align,
          input_class = props.input_class,
          submit_button_title = props.submit_button_title,
          submit_button_variant = props.submit_button_variant,
          submit_button_icon = props.submit_button_icon,
          submit_button_status = props.submit_button_status,
          submit_element = props.submit_element,
          autocomplete = props.autocomplete,
          readOnly = props.readOnly,
          stretch = props.stretch,
          input_attributes = props.input_attributes,
          icon = props.icon,
          icon_position = props.icon_position,
          icon_size = props.icon_size,
          _className = props.class,
          className = props.className,
          _id = props.id,
          children = props.children,
          _value = props.value,
          selectall = props.selectall,
          on_submit = props.on_submit,
          _input_element = props.input_element,
          attributes = _objectWithoutProperties(props, [
            'type',
            'size',
            'label',
            'label_direction',
            'label_sr_only',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'disabled',
            'placeholder',
            'keep_placeholder',
            'suffix',
            'align',
            'input_class',
            'submit_button_title',
            'submit_button_variant',
            'submit_button_icon',
            'submit_button_status',
            'submit_element',
            'autocomplete',
            'readOnly',
            'stretch',
            'input_attributes',
            'icon',
            'icon_position',
            'icon_size',
            'class',
            'className',
            'id',
            'children',
            'value',
            'selectall',
            'on_submit',
            'input_element',
          ]);

        var _this$state = this.state,
          value = _this$state.value,
          focusState = _this$state.focusState,
          inputState = _this$state.inputState;

        if (disabled) {
          inputState = 'disabled';
        }

        var sizeIsNumber = parseFloat(size) > 0;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var hasSubmitButton =
          submit_element ||
          (submit_element !== false && type === 'search');
        var hasValue = Input.hasValue(value);
        var iconSize =
          size === 'large' && (icon_size === 'default' || !icon_size)
            ? 'medium'
            : icon_size;
        var mainParams = {
          className: classnames(
            'dnb-input dnb-input--'.concat(type, ' dnb-form-component'),
            createSpacingClasses(props),
            _className,
            className,
            icon &&
              'dnb-input--icon-position-'.concat(
                icon_position,
                ' dnb-input--has-icon'
              ) +
                (iconSize
                  ? ' dnb-input--icon-size-'.concat(iconSize)
                  : ''),
            size && !sizeIsNumber && 'dnb-input--'.concat(size),
            hasSubmitButton && 'dnb-input--has-submit-element',
            align && 'dnb-input__align--'.concat(align),
            status && 'dnb-input__status--'.concat(status_state),
            label_direction && 'dnb-input--'.concat(label_direction),
            isTrue(stretch) && 'dnb-input--stretch',
            isTrue(keep_placeholder) && 'dnb-input--keep-placeholder'
          ),
        };
        var innerParams = {
          className: 'dnb-input__inner',
        };

        var _pickRenderProps = pickRenderProps(
            this.props,
            Input.renderProps
          ),
          InputElement = _pickRenderProps.input_element,
          renderProps = _objectWithoutProperties(_pickRenderProps, [
            'input_element',
          ]);

        var inputAttributes = input_attributes
          ? typeof input_attributes === 'string'
            ? JSON.parse(input_attributes)
            : input_attributes
          : {};

        var inputParams = _extends(
          {},
          renderProps,
          {
            className: classnames('dnb-input__input', input_class),
            autoComplete: autocomplete,
            value: hasValue ? value : '',
            type: type,
            id: id,
            disabled: isTrue(disabled),
            name: id,
            'aria-placeholder': placeholder,
          },
          attributes,
          {},
          inputAttributes,
          {
            onChange: this.onChangeHandler,
            onKeyDown: this.onKeyDownHandler,
            onFocus: this.onFocusHandler,
            onBlur: this.onBlurHandler,
          }
        );

        if (sizeIsNumber) {
          inputParams.size = size;
        }

        if (showStatus || suffix) {
          inputParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (type === 'search') {
          inputParams.autoComplete = 'off';
        }

        if (readOnly) {
          inputParams['aria-readonly'] = inputParams.readOnly = true;
        }

        if (!hasValue && placeholder && focusState !== 'focus') {
          inputParams['aria-labelledby'] = id + '-placeholder';
        }

        var shellParams = {
          'data-input-state': inputState,
          'data-has-content': hasValue ? 'true' : 'false',
        };

        if (isTrue(disabled)) {
          shellParams['aria-disabled'] = true;
        }

        validateDOMAttributes(this.props, inputParams);
        validateDOMAttributes(null, shellParams);

        if (InputElement && typeof InputElement === 'function') {
          InputElement = InputElement(inputParams, this._ref);
        } else if (!InputElement && _input_element) {
          InputElement = _input_element;
        }

        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              label_direction: label_direction,
              sr_only: label_sr_only,
              disabled: disabled,
            }),
          React.createElement(
            'span',
            innerParams,
            _ref$1,
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text: status,
                status: status_state,
                text_id: id + '-status',
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-input__row',
              },
              React.createElement(
                'span',
                _extends(
                  {
                    className: 'dnb-input__shell',
                  },
                  shellParams
                ),
                icon &&
                  React.createElement(InputIcon, {
                    className: 'dnb-input__icon',
                    icon: icon,
                    size: iconSize,
                    'aria-hidden': true,
                  }),
                !hasValue &&
                  placeholder &&
                  focusState !== 'focus' &&
                  React.createElement(
                    'span',
                    {
                      id: id + '-placeholder',
                      'aria-hidden': true,
                      className:
                        'dnb-input__placeholder' +
                        (align ? ' dnb-input__align--'.concat(align) : ''),
                    },
                    placeholder
                  ),
                InputElement ||
                  React.createElement(
                    'input',
                    _extends(
                      {
                        ref: this._ref,
                      },
                      inputParams
                    )
                  )
              ),
              hasSubmitButton &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-input__submit-element',
                  },
                  submit_element
                    ? submit_element
                    : React.createElement(
                        SubmitButton,
                        _extends({}, attributes, {
                          value: inputParams.value,
                          icon: submit_button_icon,
                          status: submit_button_status,
                          icon_size:
                            size === 'medium' || size === 'large'
                              ? 'medium'
                              : 'default',
                          title: submit_button_title,
                          variant: submit_button_variant,
                          disabled: disabled,
                          size: size,
                          on_submit: on_submit,
                        })
                      )
                ),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-input__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          )
        );
      },
    },
  ]);

  return Input;
})(React.PureComponent);

Input.tagName = 'dnb-input';
Input.defaultProps = defaultProps$5;
Input.renderProps = renderProps$3;
Input.contextType = Context;

var InputSubmitButton = (function(_React$PureComponent2) {
  _inherits(InputSubmitButton, _React$PureComponent2);

  var _super2 = _createSuper$6(InputSubmitButton);

  function InputSubmitButton() {
    var _this2;

    _classCallCheck(this, InputSubmitButton);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _this2.state = {
      focusState: 'virgin',
    };

    _this2.onFocusHandler = function(event) {
      var value = _this2.props.value;

      _this2.setState({
        focusState: 'focus',
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this2),
        'on_submit_focus',
        {
          value: value,
          event: event,
        }
      );
    };

    _this2.onBlurHandler = function(event) {
      var value = _this2.props.value;

      _this2.setState({
        focusState: 'dirty',
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this2),
        'on_submit_blur',
        {
          value: value,
          event: event,
        }
      );
    };

    _this2.onSubmitHandler = function(event) {
      var value = _this2.props.value;
      dispatchCustomElementEvent(
        _assertThisInitialized(_this2),
        'on_submit',
        {
          value: value,
          event: event,
        }
      );
    };

    return _this2;
  }

  _createClass(InputSubmitButton, [
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          id = _this$props.id,
          title = _this$props.title,
          disabled = _this$props.disabled,
          variant = _this$props.variant,
          icon = _this$props.icon,
          icon_size = _this$props.icon_size,
          className = _this$props.className,
          rest = _objectWithoutProperties(_this$props, [
            'id',
            'title',
            'disabled',
            'variant',
            'icon',
            'icon_size',
            'className',
          ]);

        var params = _extends(
          {
            id: id,
            type: 'submit',
            'aria-label': title,
            disabled: disabled,
          },
          rest
        );

        validateDOMAttributes(this.props, params);
        return React.createElement(
          'span',
          {
            className: 'dnb-input__submit-button',
            'data-input-state': this.state.focusState,
          },
          React.createElement(
            Button,
            _extends(
              {
                className: classnames(
                  'dnb-input__submit-button__button',
                  className
                ),
                variant: variant,
                icon: icon,
                icon_size: icon_size,
                onClick: this.onSubmitHandler,
                onFocus: this.onFocusHandler,
                onBlur: this.onBlurHandler,
              },
              params
            )
          )
        );
      },
    },
  ]);

  return InputSubmitButton;
})(React.PureComponent);

InputSubmitButton.defaultProps = {
  id: null,
  value: null,
  title: null,
  disabled: false,
  variant: 'secondary',
  icon: 'search',
  icon_size: null,
  className: null,
  on_submit: null,
  on_submit_focus: null,
  on_submit_blur: null,
};
var SubmitButton = React.forwardRef(function(props, ref) {
  return React.createElement(
    InputSubmitButton,
    _extends(
      {
        innerRef: ref,
      },
      props
    )
  );
});
var InputIcon = React.memo(
  function(props) {
    return React.createElement(IconPrimary, props);
  },
  function(_ref2, _ref3) {
    var prev = _ref2.icon;
    var next = _ref3.icon;

    if (typeof prev === 'string' && typeof next === 'string') {
      return false;
    }

    return _typeof(prev) === _typeof(next);
  }
);
InputIcon.propTypes = {
  icon: propTypes.oneOfType([
    propTypes.string,
    propTypes.node,
    propTypes.func,
  ]).isRequired,
};

function _createSuper$7(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$8()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$8() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$6 = {
  size: null,
  visible: true,
  complete: false,
  progress: null,
  maxOffset: 88,
  onComplete: null,
  callOnCompleteHandler: null,
};

var ProgressIndicatorCircular = (function(_React$PureComponent) {
  _inherits(ProgressIndicatorCircular, _React$PureComponent);

  var _super = _createSuper$7(ProgressIndicatorCircular);

  _createClass(ProgressIndicatorCircular, null, [
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        state.progress = parseFloat(props.progress);
        state.visible = props.visible;
        state.complete = props.complete;
        return state;
      },
    },
  ]);

  function ProgressIndicatorCircular(props) {
    var _this;

    _classCallCheck(this, ProgressIndicatorCircular);

    _this = _super.call(this, props);
    _this.useAnimationFrame =
      typeof props.onComplete === 'function' || isIE11 || isEdge;
    _this._refDark = React.createRef();
    _this._refLight = React.createRef();
    _this.state = {
      animate: false,
    };
    return _this;
  }

  _createClass(ProgressIndicatorCircular, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.useAnimationFrame) {
          this.startAnimationFirstTime();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.stopAnimation();
      },
    },
    {
      key: 'stopAnimation',
      value: function stopAnimation() {
        this.setState({
          animate: false,
        });

        if (this.startupTimeout) {
          clearTimeout(this.startupTimeout);
        }
      },
    },
    {
      key: 'startAnimationFirstTime',
      value: function startAnimationFirstTime() {
        var _this2 = this;

        this.setState({
          animate: false,
        });
        this.startupTimeout = setTimeout(function() {
          return _this2.startAnimation();
        }, 300);
      },
    },
    {
      key: 'startAnimation',
      value: function startAnimation() {
        var _this3 = this;

        this.setState(
          {
            animate: true,
          },
          function() {
            if (_this3._refDark.current) {
              _this3.animate(
                _this3._refDark.current,
                true,
                _this3.props.callOnCompleteHandler
              );
            }

            if (_this3._refLight.current) {
              _this3.animate(_this3._refLight.current, false);
            }
          }
        );
      },
    },
    {
      key: 'animate',
      value: function animate(element) {
        var _this4 = this;

        var animateOnStart =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : true;
        var callback =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : null;
        var min = 1;
        var max = 88;
        var start = 0,
          ms = 0,
          prog = max,
          setProg = animateOnStart,
          animate = true,
          completeCalled = false,
          stopNextRound = false;

        var step = function step(timestamp) {
          if (!start) {
            start = timestamp;
          }

          ms = timestamp - start;

          if (animate) {
            if (!_this4.state.visible && prog < 5) {
              prog = min;
            }

            if (setProg) {
              element.style['stroke-dashoffset'] = prog;
            } else if (!animateOnStart) {
              element.style['stroke-dashoffset'] = max;
            }
          }

          if (stopNextRound) {
            animate = false;

            if (!completeCalled) {
              completeCalled = true;

              if (animateOnStart && typeof callback === 'function') {
                callback();
              }
            } else if (_this4.state.visible && ms % 1e3 > 950) {
              stopNextRound = false;
            }
          } else {
            stopNextRound = !_this4.state.visible && prog === min;
            animate = true;
            completeCalled = false;
          }

          prog = Math.round(max - (max / 1e3) * (ms % 1e3));
          setProg = animateOnStart
            ? Math.ceil(ms / 1e3) % 2 === 1 || ms === 0
            : Math.ceil(ms / 1e3) % 2 === 0 && ms !== 0;

          if (_this4.state.animate) {
            window.requestAnimationFrame(step);
          }
        };

        if (
          typeof window !== 'undefined' &&
          window.requestAnimationFrame
        ) {
          window.requestAnimationFrame(step);
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          size = _this$props.size,
          maxOffset = _this$props.maxOffset,
          _progress = _this$props.progress,
          visible = _this$props.visible,
          complete = _this$props.complete,
          onComplete = _this$props.onComplete,
          callOnCompleteHandler = _this$props.callOnCompleteHandler,
          rest = _objectWithoutProperties(_this$props, [
            'size',
            'maxOffset',
            'progress',
            'visible',
            'complete',
            'onComplete',
            'callOnCompleteHandler',
          ]);

        var progress = this.state.progress;
        var strokeDashoffset = maxOffset - (maxOffset / 100) * progress;
        var hasProgressIndicator = parseFloat(progress) > -1;

        var params = _extends({}, rest);

        if (hasProgressIndicator) {
          params['title'] = ''.concat(progress, '%');
          params['aria-label'] = ''.concat(progress, '%');
        } else {
          params['aria-hidden'] = true;
        }

        validateDOMAttributes(this.props, params);
        return React.createElement(
          'div',
          _extends(
            {
              className: classnames(
                'dnb-progress-indicator__circular',
                size && 'dnb-progress-indicator__circular--'.concat(size),
                hasProgressIndicator &&
                  'dnb-progress-indicator__circular--has-progress-indicator'
              ),
            },
            params
          ),
          _ref$2,
          React.createElement(Circle, {
            className:
              'dnb-progress-indicator__circular__line dark dark' +
              (hasProgressIndicator || this.useAnimationFrame
                ? ' paused'
                : ''),
            style: hasProgressIndicator
              ? {
                  strokeDashoffset: strokeDashoffset,
                }
              : {},
            ref: this._refDark,
          }),
          !hasProgressIndicator &&
            React.createElement(Circle, {
              className:
                'dnb-progress-indicator__circular__line light' +
                (this.useAnimationFrame ? ' paused' : ''),
              ref: this._refLight,
            })
        );
      },
    },
  ]);

  return ProgressIndicatorCircular;
})(React.PureComponent);

ProgressIndicatorCircular.defaultProps = defaultProps$6;

var _ref3$2 = React.createElement('circle', {
  className: 'dnb-progress-indicator__circular__circle',
  fill: 'none',
  strokeWidth: '4',
  cx: '16',
  cy: '16',
  r: '14',
});

var Circle = React.forwardRef(function(_ref2, ref) {
    var className = _ref2.className,
      rest = _objectWithoutProperties(_ref2, ['className']);

    return React.createElement(
      'svg',
      _extends(
        {
          className: className,
          viewBox: '0 0 32 32',
          shapeRendering: 'geometricPrecision',
          ref: ref,
        },
        rest
      ),
      _ref3$2
    );
  }),
  _ref$2 = React.createElement(Circle, {
    className: 'dnb-progress-indicator__circular__line light paused',
  });

function _createSuper$8(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$9()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$9() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$4 = {
  on_complete: null,
};

var defaultProps$7 = _extends(
  {
    visible: true,
    type: 'circular',
    no_animation: false,
    size: 'medium',
    progress: null,
    label: null,
    label_direction: 'horizontal',
    show_label: false,
    children: null,
    indicator_label: null,
  },
  renderProps$4
);

var ProgressIndicator = (function(_React$PureComponent) {
  _inherits(ProgressIndicator, _React$PureComponent);

  var _super = _createSuper$8(ProgressIndicator);

  function ProgressIndicator() {
    var _this;

    _classCallCheck(this, ProgressIndicator);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      _listenForPropChanges: true,
    };

    _this.callOnCompleteHandler = function() {
      _this.completeTimeout = setTimeout(function() {
        _this.setState({
          complete: true,
        });

        if (typeof _this.props.on_complete === 'function') {
          _this.fadeOutTimeout = setTimeout(function() {
            dispatchCustomElementEvent(
              _assertThisInitialized(_this),
              'on_complete'
            );
          }, 600);
        }
      }, 200);
    };

    return _this;
  }

  _createClass(
    ProgressIndicator,
    [
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          clearTimeout(this.completeTimeout);
          clearTimeout(this.fadeOutTimeout);
        },
      },
      {
        key: 'render',
        value: function render() {
          var props = extendPropsWithContext(
            this.props,
            defaultProps$7,
            this.context.formRow,
            this.context.translation.ProgressIndicator
          );

          var type = props.type,
            size = props.size,
            no_animation = props.no_animation,
            on_complete = props.on_complete,
            label = props.label,
            indicator_label = props.indicator_label,
            label_direction = props.label_direction,
            show_label = props.show_label,
            children = props.children,
            _progress = props.progress,
            _visible = props.visible,
            _complete = props.complete,
            attributes = _objectWithoutProperties(props, [
              'type',
              'size',
              'no_animation',
              'on_complete',
              'label',
              'indicator_label',
              'label_direction',
              'show_label',
              'children',
              'progress',
              'visible',
              'complete',
            ]);

          var _this$state = this.state,
            progress = _this$state.progress,
            visible = _this$state.visible,
            complete = _this$state.complete;

          var params = _extends({}, attributes);

          var hasProgressIndicator = parseFloat(progress) > -1;

          if (visible && !hasProgressIndicator) {
            params.role = 'alert';
            params['aria-busy'] = 'true';
          }

          var indicatorLabel =
            label || children || (isTrue(show_label) && indicator_label);
          validateDOMAttributes(this.props, params);
          return React.createElement(
            'div',
            _extends(
              {
                className: classnames(
                  'dnb-progress-indicator',
                  createSpacingClasses(props),
                  visible && 'dnb-progress-indicator--visible',
                  complete && 'dnb-progress-indicator--complete',
                  label_direction &&
                    'dnb-progress-indicator--'.concat(label_direction),
                  isTrue(no_animation) &&
                    'dnb-progress-indicator--no-animation'
                ),
              },
              params
            ),
            type === 'circular' &&
              React.createElement(ProgressIndicatorCircular, {
                size: size,
                progress: progress,
                visible: visible,
                complete: complete,
                onComplete: on_complete,
                callOnCompleteHandler: this.callOnCompleteHandler,
              }),
            indicatorLabel &&
              React.createElement(
                'div',
                {
                  className: 'dnb-progress-indicator__label',
                },
                React.createElement(
                  'p',
                  {
                    className: 'dnb-p',
                  },
                  indicatorLabel
                )
              )
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            ProgressIndicator.tagName,
            ProgressIndicator,
            defaultProps$7
          );
        },
      },
      {
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
          if (state._listenForPropChanges) {
            state.visible = isTrue(props.visible);

            if (state.visible) {
              state.complete = false;
            }

            if (parseFloat(props.progress) > -1) {
              state.progress = props.progress;
            }
          }

          state._listenForPropChanges = true;
          return state;
        },
      },
    ]
  );

  return ProgressIndicator;
})(React.PureComponent);

ProgressIndicator.tagName = 'dnb-progress-indicator';
ProgressIndicator.defaultProps = defaultProps$7;
ProgressIndicator.contextType = Context;

var DrawerListContext = React.createContext({});

// 19.1.2.11 Object.isExtensible(O)

_objectSap('isExtensible', function($isExtensible) {
  return function isExtensible(it) {
    return _isObject(it)
      ? $isExtensible
        ? $isExtensible(it)
        : true
      : false;
  };
});

var parseContentTitle = function parseContentTitle(dataItem) {
  var _dataItem;

  var _ref =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {},
    _ref$separator = _ref.separator,
    separator = _ref$separator === void 0 ? '\n' : _ref$separator,
    _ref$removeNumericOnl = _ref.removeNumericOnlyValues,
    removeNumericOnlyValues =
      _ref$removeNumericOnl === void 0 ? false : _ref$removeNumericOnl,
    _ref$preferSelectedVa = _ref.preferSelectedValue,
    preferSelectedValue =
      _ref$preferSelectedVa === void 0 ? false : _ref$preferSelectedVa;

  var ret = '';
  var onlyNumericRegex = /[0-9.,-\s]+/;

  if (Array.isArray(dataItem) && dataItem.length > 0) {
    dataItem = {
      content: dataItem,
    };
  }

  var hasValue =
    (_dataItem = dataItem) === null || _dataItem === void 0
      ? void 0
      : _dataItem.selected_value;

  if (
    !(preferSelectedValue && hasValue) &&
    dataItem &&
    Array.isArray(dataItem.content)
  ) {
    ret = dataItem.content
      .reduce(function(acc, cur) {
        cur = grabStringFromReact(cur, ' ');

        if (cur === false) {
          return acc;
        }

        var found =
          removeNumericOnlyValues && cur && cur.match(onlyNumericRegex);

        if (!(found && found[0].length === cur.length)) {
          acc.push(cur);
        }

        return acc;
      }, [])
      .join(separator);
  } else {
    ret = grabStringFromReact(
      (dataItem && dataItem.content) || dataItem,
      ' '
    );
  }

  if (hasValue) {
    if (preferSelectedValue) {
      ret = String(dataItem.selected_value);
    } else if (!onlyNumericRegex.test(dataItem.selected_value)) {
      ret = String(dataItem.selected_value) + separator + ret;
    }
  }

  if (Array.isArray(dataItem) && dataItem.length === 0) {
    ret = null;
  }

  if (ret && ret.length === 1 && ret[0].ignore_events) {
    return null;
  }

  return ret;
};
var hasObjectKeyAsValue = function hasObjectKeyAsValue(data) {
  var _data;

  data =
    ((_data = data) === null || _data === void 0
      ? void 0
      : _data.raw_data) || data;
  return data && _typeof(data) === 'object' && !Array.isArray(data);
};
var preSelectData = function preSelectData(data) {
  if (typeof data === 'string') {
    data = data[0] === '{' || data[0] === '[' ? JSON.parse(data) : null;
  } else if (data && React.isValidElement(data)) {
    data = [];
  } else if (typeof data === 'function') {
    data = data();
  }

  return data;
};
var normalizeData = function normalizeData(props) {
  var data = preSelectData(props.data || props.children || props);

  if (data && _typeof(data) === 'object' && !Array.isArray(data)) {
    var list = [];

    for (var i in data) {
      list.push({
        selected_key: i,
        content: data[i],
        type: 'object',
      });
    }

    data = list;
  }

  return (data || []).map(function(item, i) {
    if (typeof item === 'string') {
      item = {
        content: item,
        __isTransformed: true,
      };
    }

    if (typeof item.__id !== 'undefined') {
      return item;
    }

    if (Object.isExtensible(item)) {
      item.__id = i;
      return item;
    } else {
      return _extends({}, item, {
        __id: i,
      });
    }
  });
};
var getData = function getData(props) {
  if (props.prepared_data && Array.isArray(props.prepared_data)) {
    return props.prepared_data;
  }

  return normalizeData(props);
};
var getCurrentIndex = function getCurrentIndex(value, data) {
  if (parseFloat(value) > -1) {
    return value;
  } else if (typeof value === 'string') {
    return data === null || data === void 0
      ? void 0
      : data.findIndex(function(cur) {
          return parseCurrentValue(cur) === value;
        });
  }

  return null;
};
var getSelectedItemValue = function getSelectedItemValue(value, state) {
  if (hasObjectKeyAsValue(state)) {
    return parseCurrentValue(
      state.data.filter(function(data, i) {
        return i === parseFloat(value);
      })[0]
    );
  }

  return value;
};
var parseCurrentValue = function parseCurrentValue(current) {
  return (
    (current === null || current === void 0
      ? void 0
      : current.selected_key) ||
    (current === null || current === void 0 ? void 0 : current.content) ||
    current
  );
};
var getCurrentData = function getCurrentData(item_index, data) {
  if (typeof data === 'function') {
    data = normalizeData(data);
  }

  data =
    (data &&
      data.find(function(_ref3) {
        var __id = _ref3.__id;
        return __id == item_index;
      })) ||
    null;

  if (data && data.__isTransformed) {
    data = parseCurrentValue(data);
  }

  return data;
};
var prepareStartupState = function prepareStartupState(props) {
  var raw_data = preSelectData(
    props.raw_data || props.data || props.children
  );
  var data = getData(props);
  var opened = props.opened !== null ? isTrue(props.opened) : null;
  var selected_item = null;

  if (
    props.value !== null &&
    typeof props.value !== 'undefined' &&
    props.value !== 'initval'
  ) {
    selected_item = getCurrentIndex(props.value, data);
  } else if (props.default_value !== null) {
    selected_item = getCurrentIndex(props.default_value, data);
  }

  return {
    opened: opened,
    data: data,
    original_data: data,
    raw_data: raw_data,
    direction: props.direction,
    max_height: props.max_height,
    selected_item: selected_item,
    active_item: selected_item,
    on_hide: props.on_hide,
    on_show: props.on_show,
    on_chnage: props.on_chnage,
    on_select: props.on_select,
    _listenForPropChanges: false,
  };
};
var prepareDerivedState = function prepareDerivedState(props, state) {
  if (state.opened && !state.data && typeof props.data === 'function') {
    state.data = getData(props);
  }

  if (state._listenForPropChanges) {
    if (
      ((props.data || props.prepared_data) &&
        typeof props.data !== 'function') ||
      props.children
    ) {
      state.data = getData(props);
    }

    if (
      typeof props.wrapper_element === 'string' &&
      typeof document !== 'undefined'
    ) {
      var wrapper_element = document.querySelector(props.wrapper_element);

      if (wrapper_element) {
        state.wrapper_element = wrapper_element;
      }
    } else if (props.wrapper_element) {
      state.wrapper_element = props.wrapper_element;
    }

    if (
      typeof props.value !== 'undefined' &&
      props.value !== 'initval' &&
      state.selected_item !== props.value
    ) {
      state.selected_item = getCurrentIndex(props.value, state.data);

      if (typeof props.on_state_update === 'function') {
        dispatchCustomElementEvent(
          {
            props: props,
          },
          'on_state_update',
          {
            selected_item: state.selected_item,
            value: getSelectedItemValue(state.selected_item, state),
            data: getCurrentData(state.selected_item, state.data),
          }
        );
      }
    }

    if (!(parseFloat(state.active_item) > -1)) {
      state.active_item = state.selected_item;
    }

    if (
      props.direction !== 'auto' &&
      props.direction !== state.direction
    ) {
      state.direction = props.direction;
    }

    if (parseFloat(state.selected_item) > -1) {
      state.current_title = getCurrentDataTitle(
        state.selected_item,
        state.data
      );
    }
  }

  state._listenForPropChanges = true;
  return state;
};
var getCurrentDataTitle = function getCurrentDataTitle(
  selected_item,
  data
) {
  var currentData = getCurrentData(selected_item, data);
  return parseContentTitle(currentData, {
    separator: ' ',
    preferSelectedValue: true,
  });
};
var grabStringFromReact = function grabStringFromReact(elements) {
  var separator =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : undefined;

  if (!Array.isArray(elements)) {
    elements = [elements];
  }

  return elements
    .map(function(word) {
      if (React.isValidElement(word)) {
        if (typeof word.props.children === 'string') {
          word = word.props.children;
        } else if (Array.isArray(word.props.children)) {
          word = word.props.children.reduce(function(acc, word) {
            if (typeof word === 'string') {
              acc = acc + word;
            }

            return acc;
          }, '');
        } else {
          return null;
        }
      }

      return word;
    })
    .filter(Boolean)
    .join(separator);
};
var findClosest = function findClosest(arr, val) {
  return Math.max.apply(
    null,
    arr.filter(function(v) {
      return v <= val;
    })
  );
};

function _createSuper$9(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$a()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$a() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$8 = {
  no_animation: false,
  prevent_selection: false,
  direction: 'auto',
  align_drawer: null,
  wrapper_element: null,
  prevent_close: false,
  keep_open: false,
  prevent_focus: false,
  skip_keysearch: false,
  page_offset: null,
  observer_element: null,
  opened: null,
  min_height: 10,
  max_height: null,
  on_resize: null,
  children: null,
};

var DrawerListProvider = (function(_React$PureComponent) {
  _inherits(DrawerListProvider, _React$PureComponent);

  var _super = _createSuper$9(DrawerListProvider);

  _createClass(DrawerListProvider, null, [
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        return prepareDerivedState(props, state);
      },
    },
  ]);

  function DrawerListProvider(props) {
    var _this;

    _classCallCheck(this, DrawerListProvider);

    _this = _super.call(this, props);

    _this.scrollToItem = function(active_item) {
      var _ref =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref$scrollTo = _ref.scrollTo,
        scrollTo = _ref$scrollTo === void 0 ? true : _ref$scrollTo;

      if (_this._refUl.current && parseFloat(active_item) > -1) {
        try {
          var ulElement = _this._refUl.current;
          var liElement = ulElement.querySelector(
            'li.dnb-drawer-list__option:nth-of-type('.concat(
              parseFloat(active_item) + 1,
              ')'
            )
          );

          if (liElement) {
            var top = liElement.offsetTop;

            if (ulElement.scrollTo) {
              var params = {
                top: top,
              };

              if (scrollTo) {
                params.behavior = 'smooth';
              }

              ulElement.scrollTo(params);
            } else if (ulElement.scrollTop) {
              ulElement.scrollTop = top;
            }

            if (!isTrue(_this.props.prevent_focus) && liElement) {
              liElement.focus();
            }
          }
        } catch (e) {
          console.warn('List could not scroll into element:', e);
        }
      }
    };

    _this.scrollToAndSetActiveItem = function(active_item) {
      var _ref2 =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref2$fireSelectEvent = _ref2.fireSelectEvent,
        fireSelectEvent =
          _ref2$fireSelectEvent === void 0 ? false : _ref2$fireSelectEvent,
        _ref2$scrollTo = _ref2.scrollTo,
        scrollTo = _ref2$scrollTo === void 0 ? true : _ref2$scrollTo,
        _ref2$event = _ref2.event,
        event = _ref2$event === void 0 ? null : _ref2$event;

      clearTimeout(_this._focusTimeout);

      if (parseFloat(active_item) > -1) {
        _this.setState(
          {
            active_item: active_item,
            _listenForPropChanges: false,
          },
          function() {
            var selected_item = _this.state.selected_item;

            if (fireSelectEvent) {
              var attributes = _this.attributes;
              var ret = dispatchCustomElementEvent(
                _this.state,
                'on_select',
                {
                  active_item: active_item,
                  value: getSelectedItemValue(selected_item, _this.state),
                  data: getCurrentData(active_item, _this.state.data),
                  event: event,
                  attributes: attributes,
                }
              );

              if (ret === false) {
                return;
              }
            }

            _this._focusTimeout = setTimeout(function() {
              return _this.scrollToItem(active_item, {
                scrollTo: scrollTo,
              });
            }, 1);
          }
        );
      } else if (!isTrue(_this.props.prevent_focus)) {
        _this._focusTimeout = setTimeout(function() {
          if (_this._refUl.current) {
            try {
              _this._refUl.current.focus({
                preventScroll: true,
              });
            } catch (e) {}
          }
        }, 1);
      }
    };

    _this.setTrianglePosition = function() {
      if (!_this._refTriangle.current) {
        return;
      }

      if (isTrue(_this.props.prevent_selection)) {
        return;
      }

      try {
        var width = (
          _this.state.wrapper_element || _this._refShell.current
        ).offsetWidth;

        if (parseFloat(width) > 0) {
          var align_drawer = _this.props.align_drawer;
          var triangle_position = _this.state.triangle_position;

          switch (align_drawer) {
            case 'left':
            default:
              if (triangle_position !== 'left') {
                _this._refTriangle.current.style.left = ''.concat(
                  width / 16 - 3,
                  'rem'
                );
              }

              break;

            case 'right':
              if (triangle_position === 'left') {
                _this._refTriangle.current.style.left = 'auto';
                _this._refTriangle.current.style.right = ''.concat(
                  width / 16 - 3,
                  'rem'
                );
              }

              break;
          }
        }
      } catch (e) {
        console.warn(e);
      }
    };

    _this.setWrapperElement = function() {
      var wrapper_element =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : _this.props.wrapper_element;

      if (
        typeof wrapper_element === 'string' &&
        typeof document !== 'undefined'
      ) {
        wrapper_element = document.querySelector(wrapper_element);
      }

      if (wrapper_element) {
        _this.setState({
          wrapper_element: wrapper_element,
          _listenForPropChanges: false,
        });
      }

      return _assertThisInitialized(_this);
    };

    _this.onKeyDownHandler = function(e) {
      var key = keycode(e);

      if (isTrue(_this.props.prevent_close)) {
        var isSameDrawer =
          typeof document !== 'undefined' &&
          getPreviousSibling('dnb-drawer-list', document.activeElement) ===
            _this._refShell.current;

        if (!isSameDrawer || key === 'tab') {
          return;
        }
      }

      if (isTrue(_this.state.ignore_events) && key !== 'tab') {
        return;
      }

      var active_item = parseFloat(_this.state.active_item);

      if (isNaN(active_item)) {
        active_item = -1;
      }

      var total = _this.state.data && _this.state.data.length - 1;

      switch (key) {
        case 'shift':
          e.preventDefault();
          break;

        case 'up':
          e.preventDefault();
          active_item = _this.getPrevActiveItem();

          if (isNaN(active_item)) {
            active_item = _this.getFirstItem();
          }

          break;

        case 'down':
          e.preventDefault();

          if (active_item === -1) {
            active_item = _this.getFirstItem();
          } else {
            active_item = _this.getNextActiveItem();

            if (isNaN(active_item) || active_item === total) {
              active_item = _this.getLastItem() || total;
            }
          }

          break;

        case 'home':
          e.preventDefault();
          active_item = _this.getFirstItem() || 0;
          break;

        case 'end':
          e.preventDefault();
          active_item = _this.getLastItem() || total;
          break;

        case 'enter':
        case 'space':
          active_item = _this.getCurrentActiveItem();

          if (
            isTrue(_this.props.skip_keysearch)
              ? active_item > -1 && key !== 'space'
              : true
          ) {
            e.preventDefault();

            _this.selectItem(active_item, {
              fireSelectEvent: true,
              event: e,
            });

            if (!isTrue(_this.props.keep_open)) {
              _this.setHidden({
                setFocus: true,
              });
            }
          }

          break;

        case 'esc':
          e.preventDefault();

          _this.setHidden({
            setFocus: true,
          });

          break;

        case 'tab':
          _this.setHidden();

          break;

        default:
          active_item = _this.findItemByValue(keycode(e));
          break;
      }

      if (
        parseFloat(active_item) > -1 &&
        active_item !== _this.state.active_item
      ) {
        if (active_item > total) {
          active_item = total;
        }

        _this.scrollToAndSetActiveItem(active_item, {
          fireSelectEvent: true,
          event: e,
        });
      }
    };

    _this.getSelectedElement = function() {
      var _this$_refUl$current;

      return (
        ((_this$_refUl$current = _this._refUl.current) === null ||
        _this$_refUl$current === void 0
          ? void 0
          : _this$_refUl$current.querySelector(
              'li.dnb-drawer-list__option--selected'
            )) ||
        _this._refUl.current || {
          getAttribute: function getAttribute() {
            return null;
          },
        }
      );
    };

    _this.getCurrentSelectedItem = function() {
      var elem = _this.getSelectedElement();

      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.getActiveElement = function() {
      var _this$_refUl$current2;

      return (
        ((_this$_refUl$current2 = _this._refUl.current) === null ||
        _this$_refUl$current2 === void 0
          ? void 0
          : _this$_refUl$current2.querySelector(
              'li.dnb-drawer-list__option--focus'
            )) || _this.getSelectedElement()
      );
    };

    _this.getCurrentActiveItem = function() {
      var elem = _this.getActiveElement();

      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.getNextActiveItem = function() {
      var elem = _this.getActiveElement().nextSibling;

      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.getPrevActiveItem = function() {
      var elem = _this.getActiveElement().previousSibling;

      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.getFirstItem = function() {
      var _this$_refUl$current3;

      var elem =
        (_this$_refUl$current3 = _this._refUl.current) === null ||
        _this$_refUl$current3 === void 0
          ? void 0
          : _this$_refUl$current3.querySelector(
              'li.dnb-drawer-list__option:first-of-type'
            );
      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.getLastItem = function() {
      var _this$_refUl$current4;

      var elem =
        (_this$_refUl$current4 = _this._refUl.current) === null ||
        _this$_refUl$current4 === void 0
          ? void 0
          : _this$_refUl$current4.querySelector(
              'li.dnb-drawer-list__option:last-of-type'
            );
      return parseFloat(elem && elem.getAttribute('data-item'));
    };

    _this.setOutsideClickObserver = function() {
      _this.outsideClick = detectOutsideClick(
        [_this.state.wrapper_element, _this._refShell.current],
        _this.setHidden
      );

      if (typeof document !== 'undefined') {
        document.addEventListener('keydown', _this.onKeyDownHandler);
      }
    };

    _this.setVisible = function() {
      if (_this.state.opened && _this.state.hidden === false) {
        return;
      }

      clearTimeout(_this._hideTimeout);
      _this.searchCache = null;

      _this.setState(
        {
          hidden: false,
          opened: true,
          _listenForPropChanges: false,
        },
        function() {
          _this.setWrapperElement();

          _this.setTrianglePosition();

          _this.setDirectionObserver();

          _this.setScrollObserver();

          _this.setOutsideClickObserver();

          var _this$state = _this.state,
            selected_item = _this$state.selected_item,
            active_item = _this$state.active_item;

          _this.scrollToAndSetActiveItem(
            parseFloat(active_item) > -1 ? active_item : selected_item,
            {
              scrollTo: false,
            }
          );

          dispatchCustomElementEvent(_this.state, 'on_show', {
            data: getCurrentData(selected_item, _this.state.data),
            attributes: _this.attributes,
          });
        }
      );
    };

    _this.setHidden = function() {
      var args =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : {};
      var onStateComplete =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      if (!_this.state.opened || isTrue(_this.props.prevent_close)) {
        if (typeof onStateComplete === 'function') {
          onStateComplete();
        }

        return;
      }

      clearTimeout(_this._focusTimeout);
      clearTimeout(_this._hideTimeout);

      _this.setState(
        {
          opened: false,
          _listenForPropChanges: false,
        },
        function() {
          _this._hideTimeout = setTimeout(
            function() {
              _this.setState({
                hidden: undefined,
                _listenForPropChanges: false,
              });

              if (typeof onStateComplete === 'function') {
                onStateComplete();
              }
            },
            isTrue(_this.props.no_animation)
              ? 1
              : DrawerListProvider.blurDelay
          );
        }
      );

      if (typeof _this.modalScrollLock === 'function') {
        _this.modalScrollLock();
      }

      _this.removeDirectionObserver();

      _this.removeScrollObserver();

      _this.removeOutsideClickObserver();

      dispatchCustomElementEvent(
        _this.state,
        'on_hide',
        _extends({}, args, {
          data: getCurrentData(
            _this.state.selected_item,
            _this.state.data
          ),
          attributes: _this.attributes,
        })
      );
    };

    _this.setDataHandler = function(data, cb) {
      var _ref3 =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : {},
        _ref3$overwriteOrigin = _ref3.overwriteOriginalData,
        overwriteOriginalData =
          _ref3$overwriteOrigin === void 0 ? false : _ref3$overwriteOrigin;

      if (!data) {
        return;
      }

      if (typeof data === 'function') {
        data = getData(data);
      }

      _this.setState(
        {
          data: data,
          original_data:
            !overwriteOriginalData && _this.state.original_data
              ? _this.state.original_data
              : data,
          _listenForPropChanges: false,
        },
        cb
      );

      return _assertThisInitialized(_this);
    };

    _this.setStateHandler = function(state) {
      var cb =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      _this.setState(
        _extends({}, state, {
          _listenForPropChanges: false,
        }),
        cb
      );

      return _assertThisInitialized(_this);
    };

    _this.selectItem = function(itemToSelect) {
      var _ref4 =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref4$fireSelectEvent = _ref4.fireSelectEvent,
        fireSelectEvent =
          _ref4$fireSelectEvent === void 0 ? false : _ref4$fireSelectEvent,
        _ref4$event = _ref4.event,
        event = _ref4$event === void 0 ? null : _ref4$event;

      if (event && typeof event.persist === 'function') {
        event.persist();
      }

      if (itemToSelect === -1) {
        itemToSelect = null;
      }

      var doCallOnChange = _this.state.selected_item !== itemToSelect;

      var onSelectionIsComplete = function onSelectionIsComplete() {
        var attributes = _this.attributes;

        if (doCallOnChange) {
          dispatchCustomElementEvent(_this.state, 'on_change', {
            selected_item: itemToSelect,
            value: getSelectedItemValue(itemToSelect, _this.state),
            data: getCurrentData(itemToSelect, _this.state.data),
            event: event,
            attributes: attributes,
          });
        }

        if (fireSelectEvent) {
          dispatchCustomElementEvent(_this.state, 'on_select', {
            selected_item: itemToSelect,
            active_item: itemToSelect,
            value: getSelectedItemValue(itemToSelect, _this.state),
            data: getCurrentData(itemToSelect, _this.state.data),
            event: event,
            attributes: attributes,
          });
        }

        clearTimeout(_this._selectTimeout);
        _this._selectTimeout = setTimeout(
          function() {
            if (!isTrue(_this.props.keep_open)) {
              _this.setHidden({
                setFocus: true,
              });
            }
          },
          isTrue(_this.props.no_animation)
            ? 1
            : DrawerListProvider.blurDelay / 2
        );
      };

      if (isTrue(_this.props.prevent_selection)) {
        onSelectionIsComplete();
      } else {
        _this.setState(
          {
            _listenForPropChanges: false,
            selected_item: itemToSelect,
            active_item: itemToSelect,
          },
          onSelectionIsComplete
        );
      }
    };

    _this.attributes = {};
    _this.state = _extends(
      {
        tagName: 'dnb-drawer-list',
        cache_hash: '',
        ignore_events: false,
      },
      prepareStartupState(props),
      {
        _listenForPropChanges: true,
      }
    );
    _this._refShell = React.createRef();
    _this._refUl = React.createRef();
    _this._refTriangle = React.createRef();
    return _this;
  }

  _createClass(DrawerListProvider, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.state.opened) {
          this.setVisible();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this._showTimeout);
        clearTimeout(this._focusTimeout);
        clearTimeout(this._hideTimeout);
        clearTimeout(this._selectTimeout);
        clearTimeout(this._ddt);
        this.setState({
          opened: false,
          _listenForPropChanges: false,
        });
        this.removeDirectionObserver();
        this.removeScrollObserver();
        this.removeOutsideClickObserver();
      },
    },
    {
      key: 'setScrollObserver',
      value: function setScrollObserver() {
        var _this2 = this;

        if (typeof window === 'undefined' || !this._refUl.current) {
          return;
        }

        this.removeScrollObserver();

        try {
          var itemSpots = this.state.data.reduce(function(acc, cur, i) {
            var _this2$_refUl$current;

            var element =
              (_this2$_refUl$current = _this2._refUl.current) === null ||
              _this2$_refUl$current === void 0
                ? void 0
                : _this2$_refUl$current.querySelector(
                    'li.dnb-drawer-list__option:nth-of-type('.concat(
                      i + 1,
                      ')'
                    )
                  );

            if (element) {
              acc[element.offsetTop] = {
                i: i,
              };
            }

            return acc;
          }, {});
          var counts = Object.keys(itemSpots);
          var closestToTop = null,
            closestToBottom = null,
            tmpToTop,
            tmpToBottom;

          this.setOnScroll = function() {
            closestToBottom = findClosest(
              counts,
              _this2._refUl.current.scrollTop +
                _this2._refUl.current.offsetHeight
            );
            closestToTop = findClosest(
              counts,
              _this2._refUl.current.scrollTop
            );

            if (itemSpots[closestToTop] && closestToTop !== tmpToTop) {
              _this2.setState({
                closestToTop: itemSpots[closestToTop].i,
                _listenForPropChanges: false,
              });
            }

            if (closestToBottom !== tmpToBottom) {
              _this2.setState({
                closestToBottom: itemSpots[closestToBottom].i,
                _listenForPropChanges: false,
              });
            }

            tmpToTop = closestToTop;
            tmpToBottom = closestToBottom;
          };

          this._refUl.current.addEventListener('scroll', this.setOnScroll);

          this.setOnScroll();
        } catch (e) {
          console.warn('List could not set onScroll:', e);
        }
      },
    },
    {
      key: 'removeScrollObserver',
      value: function removeScrollObserver() {
        if (typeof window !== 'undefined' && this.setOnScroll) {
          window.removeEventListener('resize', this.setOnScroll);
        }
      },
    },
    {
      key: 'setDirectionObserver',
      value: function setDirectionObserver() {
        var _this3 = this;

        if (
          typeof window === 'undefined' ||
          typeof document === 'undefined' ||
          !(this.state.wrapper_element || this._refShell.current)
        ) {
          return;
        }

        var _this$props = this.props,
          min_height = _this$props.min_height,
          max_height = _this$props.max_height,
          on_resize = _this$props.on_resize,
          page_offset = _this$props.page_offset,
          observer_element = _this$props.observer_element;
        var customMinHeight = parseFloat(min_height) * 16;
        var customMaxHeight = parseFloat(max_height) || 0;
        var customElem =
          typeof observer_element === 'string'
            ? document.querySelector(observer_element)
            : null;

        if (!customElem) {
          customElem = getPreviousSibling(
            'dnb-modal__content__inner',
            this._refShell.current
          );
        }

        this.removeDirectionObserver();
        var spaceToTopOffset = 4 * 16;
        var spaceToBottomOffset = 2 * 16;
        var elem = this.state.wrapper_element || this._refShell.current;

        var renderDirection = function renderDirection() {
          try {
            var _rootElem = customElem || document.documentElement;

            var pageYOffset = !isNaN(parseFloat(page_offset))
              ? parseFloat(page_offset)
              : _rootElem.scrollTop;
            var spaceToTop =
              getOffsetTop(elem) + elem.offsetHeight - pageYOffset;
            var spaceToBottom =
              _rootElem.clientHeight -
              (getOffsetTop(elem) + elem.offsetHeight) +
              pageYOffset;
            var direction =
              spaceToBottom < customMinHeight &&
              spaceToTop > customMinHeight
                ? 'top'
                : 'bottom';
            var _max_height = customMaxHeight;

            if (!(parseFloat(_max_height) > 0)) {
              _max_height =
                (direction === 'top'
                  ? spaceToTop -
                    ((
                      _this3.state.wrapper_element ||
                      _this3._refShell.current
                    ).offsetHeight || 0) -
                    spaceToTopOffset
                  : spaceToBottom - spaceToBottomOffset) / 16;
            }

            if (_this3.props.direction === 'auto') {
              _this3.setState({
                direction: direction,
                _listenForPropChanges: false,
              });
            }

            _this3.setState({
              max_height: _max_height,
              _listenForPropChanges: false,
            });

            if (on_resize) {
              dispatchCustomElementEvent(_this3.state, 'on_resize', {
                direction: direction,
                max_height: _max_height,
              });
            }
          } catch (e) {
            console.warn('List could not set onResize:', e);
          }
        };

        this.setDirection = function() {
          clearTimeout(_this3._ddt);
          _this3._ddt = setTimeout(renderDirection, 30);
        };

        var rootElem = customElem || window;
        rootElem.addEventListener('scroll', this.setDirection);
        window.addEventListener('resize', this.setDirection);
        renderDirection();
      },
    },
    {
      key: 'findItemByValue',
      value: function findItemByValue(value) {
        if (isTrue(this.props.skip_keysearch)) {
          return;
        }

        var index = -1;

        try {
          value = value.toLowerCase();

          if (this.changedOrderFor !== value) {
            this.searchCache = null;
            this.changedOrderFor = null;
          }

          this.searchCache =
            this.searchCache ||
            this.state.data.reduce(function(acc, itemData, i) {
              var str = String(
                parseContentTitle(itemData, {
                  separator: ' ',
                  removeNumericOnlyValues: true,
                })
              );
              var firstLetter = String(str[0]).toLowerCase();
              acc[firstLetter] = acc[firstLetter] || [];
              acc[firstLetter].push({
                i: i,
              });
              return acc;
            }, {});
          var found = this.searchCache[value];
          index = found && found[0] && found[0].i > -1 ? found[0].i : -1;

          if (found && found.length > 1) {
            found.push(found.shift());
            this.changedOrderFor = value;
          }
        } catch (e) {
          console.warn('List could not findItemByValue:', e);
        }

        return index;
      },
    },
    {
      key: 'removeDirectionObserver',
      value: function removeDirectionObserver() {
        if (typeof window !== 'undefined' && this.setDirection) {
          window.removeEventListener('resize', this.setDirection);
          window.removeEventListener('scroll', this.setDirection);
        }
      },
    },
    {
      key: 'removeOutsideClickObserver',
      value: function removeOutsideClickObserver() {
        if (this.outsideClick) {
          this.outsideClick.remove();
        }

        if (typeof document !== 'undefined') {
          document.removeEventListener('keydown', this.onKeyDownHandler);
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var children = this.props.children;
        var _this$state2 = this.state,
          opened = _this$state2.opened,
          hidden = _this$state2.hidden;

        if (
          this.props.opened !== null &&
          isTrue(this.props.opened) &&
          opened === false &&
          typeof hidden === 'undefined'
        ) {
          clearTimeout(this._showTimeout);
          this._showTimeout = setTimeout(this.setVisible, 1);
          return null;
        }

        if (
          this.props.opened !== null &&
          isTrue(this.props.opened) === false &&
          opened === true &&
          hidden === false
        ) {
          clearTimeout(this._hideTimeout);
          this._hideTimeout = setTimeout(this.setHidden, 1);
          return null;
        }

        return React.createElement(
          DrawerListContext.Provider,
          {
            value: _extends({}, this.context, {
              drawerList: _extends(
                {
                  attributes: this.attributes,
                  _refShell: this._refShell,
                  _refUl: this._refUl,
                  _refTriangle: this._refTriangle,
                  setData: this.setDataHandler,
                  setState: this.setStateHandler,
                  setWrapperElement: this.setWrapperElement,
                  setVisible: this.setVisible,
                  setHidden: this.setHidden,
                  selectItem: this.selectItem,
                  scrollToItem: this.scrollToItem,
                  scrollToAndSetActiveItem: this.scrollToAndSetActiveItem,
                },
                this.state
              ),
            }),
          },
          children
        );
      },
    },
  ]);

  return DrawerListProvider;
})(React.PureComponent);

DrawerListProvider.defaultProps = defaultProps$8;
DrawerListProvider.contextType = Context;
DrawerListProvider.blurDelay = 201;

function _createSuper$a(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$b()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$b() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$5 = {
  on_show: null,
  on_hide: null,
  on_change: null,
  on_resize: null,
  on_select: null,
  on_state_update: null,
  options_render: null,
  wrapper_element: null,
};
var propTypes$1 = {
  id: propTypes.string,
  cache_hash: propTypes.string,
  triangle_position: propTypes.string,
  scrollable: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  focusable: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  direction: propTypes.oneOf(['auto', 'top', 'bottom']),
  size: propTypes.oneOf(['default', 'small', 'medium', 'large']),
  max_height: propTypes.number,
  no_animation: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  no_scroll_animation: propTypes.oneOfType([
    propTypes.string,
    propTypes.bool,
  ]),
  prevent_selection: propTypes.oneOfType([
    propTypes.string,
    propTypes.bool,
  ]),
  align_drawer: propTypes.oneOf(['left', 'right']),
  options_render: propTypes.oneOfType([
    propTypes.object,
    propTypes.func,
    propTypes.node,
  ]),
  wrapper_element: propTypes.oneOfType([
    propTypes.object,
    propTypes.func,
    propTypes.node,
  ]),
  default_value: propTypes.oneOfType([propTypes.string, propTypes.number]),
  value: propTypes.oneOfType([propTypes.string, propTypes.number]),
  prevent_close: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  button_only: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  keep_open: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  prevent_focus: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  skip_keysearch: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  opened: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  class: propTypes.string,
  data: propTypes.oneOfType([
    propTypes.oneOfType([
      propTypes.string,
      propTypes.func,
      propTypes.node,
      propTypes.object,
    ]),
    propTypes.arrayOf(
      propTypes.oneOfType([
        propTypes.oneOfType([propTypes.string, propTypes.node]),
        propTypes.shape({
          selected_value: propTypes.oneOfType([
            propTypes.string,
            propTypes.node,
          ]),
          content: propTypes.oneOfType([
            propTypes.string,
            propTypes.node,
            propTypes.arrayOf(propTypes.string),
          ]),
        }),
      ])
    ),
  ]),
  prepared_data: propTypes.array,
  raw_data: propTypes.oneOfType([
    propTypes.array,
    propTypes.object,
    propTypes.func,
  ]),
  ignore_events: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  className: propTypes.string,
  children: propTypes.oneOfType([
    propTypes.string,
    propTypes.func,
    propTypes.node,
    propTypes.object,
    propTypes.array,
  ]),
  custom_element: propTypes.object,
  custom_method: propTypes.func,
  on_show: propTypes.func,
  on_hide: propTypes.func,
  on_change: propTypes.func,
  on_resize: propTypes.func,
  on_select: propTypes.func,
  on_state_update: propTypes.func,
};
var defaultProps$9 = _extends(
  {
    id: null,
    cache_hash: null,
    triangle_position: 'left',
    scrollable: true,
    focusable: false,
    max_height: null,
    direction: 'auto',
    size: 'default',
    no_animation: false,
    no_scroll_animation: false,
    prevent_selection: false,
    align_drawer: null,
    wrapper_element: null,
    default_value: null,
    value: 'initval',
    prevent_close: false,
    keep_open: false,
    prevent_focus: false,
    button_only: false,
    skip_keysearch: false,
    opened: null,
    class: null,
    data: null,
    prepared_data: null,
    raw_data: null,
    ignore_events: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$5
);

var DrawerList = (function(_React$PureComponent) {
  _inherits(DrawerList, _React$PureComponent);

  var _super = _createSuper$a(DrawerList);

  function DrawerList() {
    _classCallCheck(this, DrawerList);

    return _super.apply(this, arguments);
  }

  _createClass(
    DrawerList,
    [
      {
        key: 'render',
        value: function render() {
          var _this$context;

          var hasProvider =
            (_this$context = this.context) === null ||
            _this$context === void 0
              ? void 0
              : _this$context.drawerList;

          if (hasProvider) {
            return React.createElement(DrawerListInstance, this.props);
          }

          return React.createElement(
            DrawerListProvider,
            _extends({}, this.props, {
              data: this.props.data || this.props.children,
            }),
            React.createElement(DrawerListInstance, this.props)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(DrawerList.tagName, DrawerList, defaultProps$9);
        },
      },
    ]
  );

  return DrawerList;
})(React.PureComponent);

DrawerList.tagName = 'dnb-drawer-list';
DrawerList.defaultProps = defaultProps$9;
DrawerList.renderProps = renderProps$5;
DrawerList.contextType = DrawerListContext;

var _ref3$3 = React.createElement('span', {
  className: 'dnb-drawer-list__triangle',
});

var DrawerListInstance = (function(_React$PureComponent2) {
  _inherits(DrawerListInstance, _React$PureComponent2);

  var _super2 = _createSuper$a(DrawerListInstance);

  function DrawerListInstance(props, context) {
    var _this;

    _classCallCheck(this, DrawerListInstance);

    _this = _super2.call(this, props);

    _this.preventTab = function(e) {
      switch (keycode(e)) {
        case 'tab':
          _this.setHidden();

          break;
      }
    };

    _this.selectItemHandler = function(event) {
      var selected_item = parseFloat(
        event.currentTarget.getAttribute('data-item')
      );

      if (selected_item > -1) {
        _this.context.drawerList.selectItem(selected_item, {
          fireSelectEvent: true,
          event: event,
        });
      }
    };

    _this._id = props.id || makeUniqueId();
    _this.state = _this.state || {};
    context.drawerList.setState(
      Object.entries(renderProps$5).reduce(function(acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 1),
          key = _ref2[0];

        if (props[key]) {
          acc[key] = props[key];
        }

        return acc;
      }, {})
    );
    context.drawerList.setState({
      triangle_position: props.triangle_position,
    });
    return _this;
  }

  _createClass(DrawerListInstance, [
    {
      key: 'render',
      value: function render() {
        var _ulParams,
          _this2 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$9,
          this.context.formRow,
          this.context.translation.DrawerList
        );

        var align_drawer = props.align_drawer,
          button_only = props.button_only,
          scrollable = props.scrollable,
          focusable = props.focusable,
          size = props.size,
          no_animation = props.no_animation,
          no_scroll_animation = props.no_scroll_animation,
          prevent_selection = props.prevent_selection,
          inner_class = props.inner_class,
          ignore_events = props.ignore_events,
          options_render = props.options_render,
          className = props.className,
          _className = props.class,
          _cache_hash = props.cache_hash,
          _wrapper_element = props.wrapper_element,
          _triangle_position = props.triangle_position,
          _direction = props.direction,
          _max_height = props.max_height,
          _id = props.id,
          _data = props.data,
          _prepared_data = props.prepared_data,
          _raw_data = props.raw_data,
          _opened = props.opened,
          _value = props.value,
          children = props.children,
          attributes = _objectWithoutProperties(props, [
            'align_drawer',
            'button_only',
            'scrollable',
            'focusable',
            'size',
            'no_animation',
            'no_scroll_animation',
            'prevent_selection',
            'inner_class',
            'ignore_events',
            'options_render',
            'className',
            'class',
            'cache_hash',
            'wrapper_element',
            'triangle_position',
            'direction',
            'max_height',
            'id',
            'data',
            'prepared_data',
            'raw_data',
            'opened',
            'value',
            'children',
          ]);

        var id = this._id;
        var _this$context$drawerL = this.context.drawerList,
          data = _this$context$drawerL.data,
          opened = _this$context$drawerL.opened,
          hidden = _this$context$drawerL.hidden,
          triangle_position = _this$context$drawerL.triangle_position,
          direction = _this$context$drawerL.direction,
          max_height = _this$context$drawerL.max_height,
          cache_hash = _this$context$drawerL.cache_hash,
          selected_item = _this$context$drawerL.selected_item,
          active_item = _this$context$drawerL.active_item,
          closestToTop = _this$context$drawerL.closestToTop,
          closestToBottom = _this$context$drawerL.closestToBottom;

        var mainParams = _extends(
          {
            id: ''.concat(id, '-drawer-list'),
            className: classnames(
              'dnb-drawer-list dnb-drawer-list--'.concat(direction),
              createSpacingClasses(props),
              _className,
              className,
              opened && 'dnb-drawer-list--opened',
              hidden && 'dnb-drawer-list--hidden',
              triangle_position &&
                'dnb-drawer-list--icon-position-'.concat(
                  triangle_position
                ),
              align_drawer && 'dnb-drawer-list--'.concat(align_drawer),
              size && 'dnb-drawer-list--'.concat(size),
              button_only && 'dnb-drawer-list--is-popup',
              isTrue(scrollable) && 'dnb-drawer-list--scroll',
              isTrue(no_scroll_animation) &&
                'dnb-drawer-list--no-scroll-animation'
            ),
          },
          attributes
        );

        var listParams = {
          id: ''.concat(id, '-listbox'),
          className: classnames(
            'dnb-drawer-list__list',
            inner_class,
            isTrue(no_animation) && 'dnb-drawer-list__list--no-animation'
          ),
        };
        var ulParams =
          ((_ulParams = {
            id: ''.concat(id, '-ul'),
            role: 'listbox',
          }),
          _defineProperty(
            _ulParams,
            'aria-labelledby',
            ''.concat(id, '-label')
          ),
          _defineProperty(_ulParams, 'tabIndex', '-1'),
          _defineProperty(_ulParams, 'style', {
            maxHeight:
              max_height > 0 ? ''.concat(max_height, 'rem') : null,
          }),
          _ulParams);

        if (
          !isTrue(prevent_selection) &&
          !hidden &&
          parseFloat(selected_item) > -1
        ) {
          ulParams['aria-activedescendant'] = 'option-'
            .concat(id, '-')
            .concat(selected_item);
        }

        if (isTrue(focusable)) {
          ulParams.tabIndex = '0';
        }

        validateDOMAttributes(this.props, mainParams);
        validateDOMAttributes(null, listParams);
        validateDOMAttributes(null, ulParams);

        _extends(
          this.context.drawerList.attributes,
          validateDOMAttributes(null, attributes)
        );

        var ignoreEvents = isTrue(ignore_events);

        var Items = function Items() {
          return data.map(function(dataItem) {
            var _id = dataItem.__id;
            var liParams = {
              id: 'option-'.concat(id, '-').concat(_id),
              className: classnames(
                _id == closestToTop && 'closest-to-top',
                _id == closestToBottom && 'closest-to-bottom',
                _id == data.length - 1 && 'last-of-type'
              ),
              onClick: _this2.selectItemHandler,
              onKeyDown: _this2.preventTab,
              'data-item': _id,
            };

            if (ignoreEvents) {
              liParams.selected = null;
              liParams.onClick = null;
              liParams.onClick = null;
              liParams.className = classnames(
                liParams.className,
                'dnb-drawer-list__option--ignore'
              );
            }

            return React.createElement(
              DrawerList.Item,
              _extends(
                {
                  key: _id,
                  cache_hash: cache_hash,
                  selected: _id == selected_item,
                  active: !ignoreEvents && _id == active_item,
                },
                liParams
              ),
              dataItem
            );
          });
        };

        return React.createElement(
          'span',
          _extends({}, mainParams, {
            ref: this.context.drawerList._refShell,
          }),
          React.createElement(
            'span',
            listParams,
            hidden === false && data && data.length > 0
              ? React.createElement(
                  DrawerList.Options,
                  _extends({}, ulParams, {
                    ref: this.context.drawerList._refUl,
                    cache_hash:
                      cache_hash +
                      active_item +
                      selected_item +
                      closestToTop +
                      closestToBottom +
                      direction +
                      max_height,
                    triangleRef: this.context.drawerList._refTriangle,
                  }),
                  typeof options_render === 'function'
                    ? options_render({
                        data: data,
                        Items: Items,
                        Item: DrawerList.Item,
                      })
                    : React.createElement(Items, null)
                )
              : (children &&
                  React.createElement(
                    'span',
                    {
                      className: 'dnb-drawer-list__content',
                    },
                    children,
                    _ref3$3
                  )) ||
                  React.createElement(
                    'ul',
                    _extends({}, ulParams, {
                      hidden: true,
                    }),
                    React.createElement('li', {
                      role: 'option',
                      id: 'option-'.concat(id, '-').concat(selected_item),
                      'aria-selected': 'true',
                    })
                  )
          )
        );
      },
    },
  ]);

  return DrawerListInstance;
})(React.PureComponent);

DrawerListInstance.defaultProps = defaultProps$9;
DrawerListInstance.contextType = DrawerListContext;
DrawerList.Options = React.memo(
  React.forwardRef(function(props, ref) {
    var children = props.children,
      className = props.className,
      _props$triangleRef = props.triangleRef,
      triangleRef =
        _props$triangleRef === void 0 ? null : _props$triangleRef,
      _cache_hash = props.cache_hash,
      rest = _objectWithoutProperties(props, [
        'children',
        'className',
        'triangleRef',
        'cache_hash',
      ]);

    return React.createElement(
      'ul',
      _extends(
        {
          className: classnames('dnb-drawer-list__options', className),
        },
        rest,
        {
          ref: ref,
        }
      ),
      children,
      React.createElement('li', {
        className: 'dnb-drawer-list__triangle',
        'aria-hidden': true,
        ref: triangleRef,
      })
    );
  }),
  function(prevProps, nextProps) {
    if (!prevProps.cache_hash) {
      return null;
    }

    return prevProps.cache_hash === nextProps.cache_hash;
  }
);
DrawerList.Options.displayName = 'DrawerList.Options';
DrawerList.Options.propTypes = {
  children: propTypes.oneOfType([propTypes.node, propTypes.func]),
  className: propTypes.string,
  triangleRef: propTypes.object,
};
DrawerList.Options.defaultProps = {
  children: null,
  className: null,
  triangleRef: null,
};
DrawerList.Item = React.memo(
  React.forwardRef(function(props, ref) {
    var _cache_hash = props.cache_hash,
      children = props.children,
      className = props.className,
      on_click = props.on_click,
      selected = props.selected,
      active = props.active,
      value = props.value,
      rest = _objectWithoutProperties(props, [
        'cache_hash',
        'children',
        'className',
        'on_click',
        'selected',
        'active',
        'value',
      ]);

    var params = {};

    if (selected) {
      params['aria-current'] = true;
      params['aria-selected'] = true;
    }

    if (on_click) {
      params.onClick = function() {
        return dispatchCustomElementEvent(
          {
            props: _extends({}, props, {
              displayName: DrawerList.Item.displayName,
            }),
          },
          'on_click',
          _extends(
            {
              selected: selected,
              value: value,
            },
            rest
          )
        );
      };
    }

    return React.createElement(
      'li',
      _extends(
        {
          className: classnames(
            className,
            'dnb-drawer-list__option',
            selected && 'dnb-drawer-list__option--selected',
            active && 'dnb-drawer-list__option--focus'
          ),
          role: 'option',
          'aria-selected': 'false',
          tabIndex: '-1',
        },
        rest,
        params,
        {
          ref: ref,
        }
      ),
      React.createElement(
        'span',
        {
          className: 'dnb-drawer-list__option__inner',
        },
        React.createElement(ItemContent, null, children)
      )
    );
  }),
  function(prevProps, nextProps) {
    if (!prevProps.cache_hash) {
      return null;
    }

    if (
      prevProps.cache_hash === nextProps.cache_hash &&
      prevProps.className === nextProps.className &&
      prevProps.content === nextProps.content &&
      prevProps.selected === nextProps.selected &&
      prevProps.active === nextProps.active
    ) {
      return true;
    }

    return false;
  }
);
DrawerList.Item.displayName = 'DrawerList.Item';
DrawerList.Item.propTypes = {
  children: propTypes.oneOfType([
    propTypes.node,
    propTypes.func,
    propTypes.object,
  ]),
  className: propTypes.string,
  on_click: propTypes.func,
  selected: propTypes.bool,
  active: propTypes.bool,
  value: propTypes.oneOfType([propTypes.string, propTypes.number]),
};
DrawerList.Item.defaultProps = {
  children: null,
  className: null,
  on_click: null,
  selected: null,
  active: null,
  value: null,
};

var ItemContent = function ItemContent(_ref4) {
  var children = _ref4.children;

  if (Array.isArray(children.content || children)) {
    return (children.content || children).map(function(item, n) {
      return React.createElement(
        'span',
        {
          key: n,
          className: 'dnb-drawer-list__option__item',
        },
        children.render ? children.render(item) : item
      );
    });
  } else if (children.content) {
    return children.render
      ? children.render(children.content)
      : children.content;
  }

  return children;
};

function _createSuper$b(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$c()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$c() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$6 = {
  on_show: null,
  on_hide: null,
  on_change: null,
  on_select: null,
  on_state_update: null,
  input_component: null,
};

var defaultProps$a = _extends(
  {
    id: null,
    mode: 'sync',
    title: 'Option Menu',
    no_options: null,
    aria_live_options: null,
    indicator_label: null,
    submit_button_title: null,
    icon: 'chevron_down',
    icon_size: null,
    icon_position: null,
    triangle_position: null,
    input_icon: 'search',
    label: null,
    label_direction: null,
    label_sr_only: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    scrollable: true,
    focusable: false,
    skip_highlight: false,
    max_height: null,
    direction: 'auto',
    no_animation: false,
    no_scroll_animation: false,
    show_drawer_button: false,
    prevent_selection: false,
    size: 'default',
    align_autocomplete: null,
    data: null,
    default_value: null,
    value: 'initval',
    input_value: 'initval',
    open_on_focus: false,
    prevent_close: false,
    keep_open: false,
    opened: null,
    disabled: null,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$6
);

var Autocomplete = (function(_React$PureComponent) {
  _inherits(Autocomplete, _React$PureComponent);

  var _super = _createSuper$b(Autocomplete);

  function Autocomplete() {
    _classCallCheck(this, Autocomplete);

    return _super.apply(this, arguments);
  }

  _createClass(
    Autocomplete,
    [
      {
        key: 'render',
        value: function render() {
          return React.createElement(
            DrawerListProvider,
            _extends({}, this.props, {
              data: this.props.data || this.props.children,
              opened: null,
              tagName: 'dnb-autocomplete',
              ignore_events: false,
              prevent_focus: true,
              skip_keysearch: true,
            }),
            React.createElement(AutocompleteInstance, this.props)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            Autocomplete.tagName,
            Autocomplete,
            defaultProps$a
          );
        },
      },
    ]
  );

  return Autocomplete;
})(React.PureComponent);

Autocomplete.tagName = 'dnb-autocomplete';
Autocomplete.defaultProps = defaultProps$a;
Autocomplete.renderProps = renderProps$6;

var _ref14 = React.createElement(AlignmentHelper, null);

var _ref15 = React.createElement(ProgressIndicator, {
  size: 'small',
});

var AutocompleteInstance = (function(_React$PureComponent2) {
  _inherits(AutocompleteInstance, _React$PureComponent2);

  var _super2 = _createSuper$b(AutocompleteInstance);

  _createClass(AutocompleteInstance, null, [
    {
      key: 'parseDataItem',
      value: function parseDataItem(dataItem) {
        var toParse = parseContentTitle(dataItem, {
          separator: ' ',
        });

        if (typeof toParse !== 'string' && Array.isArray(toParse)) {
          return AutocompleteInstance.parseDataItem(toParse);
        }

        return toParse;
      },
    },
    {
      key: 'createSearchIndex',
      value: function createSearchIndex(data) {
        return data.map(function(dataItem) {
          var searchChunk = AutocompleteInstance.parseDataItem(dataItem);
          return {
            dataItem: dataItem,
            searchChunk: searchChunk,
          };
        });
      },
    },
    {
      key: 'getCurrentDataTitle',
      value: function getCurrentDataTitle(selected_item, data) {
        var currentData = getCurrentData(selected_item, data);
        return parseContentTitle(currentData, {
          separator: ' ',
          preferSelectedValue: true,
        });
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          var _props$input_value;

          state.skipHighlight = isTrue(props.skip_highlight);

          if (
            props.input_value !== 'initval' &&
            typeof state.inputValue === 'undefined' &&
            ((_props$input_value = props.input_value) === null ||
            _props$input_value === void 0
              ? void 0
              : _props$input_value.length) > 0
          ) {
            state.inputValue = props.input_value;
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function AutocompleteInstance(_props, context) {
    var _context$drawerList;

    var _this;

    _classCallCheck(this, AutocompleteInstance);

    _this = _super2.call(this, _props);

    _this.setVisible = function() {
      _this.context.drawerList
        .setWrapperElement(_this._refShell.current)
        .setVisible();
    };

    _this.setHidden = function() {
      _this.context.drawerList.setHidden();
    };

    _this.scrollToActiveItem = function() {
      if (parseFloat(_this.state.localActiveItem) > -1) {
        _this.context.drawerList.scrollToAndSetActiveItem(
          _this.state.localActiveItem,
          {
            scrollTo: false,
          }
        );

        _this.setState({
          localActiveItem: null,
          _listenForPropChanges: false,
        });
      }
    };

    _this.scrollToSelectedItem = function() {
      _this.context.drawerList.scrollToAndSetActiveItem(
        _this.context.drawerList.selected_item,
        {
          scrollTo: false,
        }
      );
    };

    _this.onInputChangeHandler = function(_ref) {
      var value = _ref.value,
        event = _ref.event;
      var options =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : {};

      _this.setState({
        typedInputValue: value,
        inputValue: value,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_type',
        _extends(
          {
            value: value,
            event: event,
          },
          _this.getEventObjects('on_type')
        )
      );
      value = String(value).trim();

      if (value !== _this.state.inputValue) {
        _this.runFilterWithSideEffects(value, options);
      }
    };

    _this.runFilterWithSideEffects = function(value) {
      var options =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : {};

      var data = _this.runFilter(value, options);

      _this.context.drawerList.setState(
        {
          cache_hash: value + data.length,
        },
        function() {
          return (
            typeof (options === null || options === void 0
              ? void 0
              : options.afterSetState) === 'function' &&
            (options === null || options === void 0
              ? void 0
              : options.afterSetState(data))
          );
        }
      );

      if (value && value.length > 0) {
        if (data.length === 0) {
          if (_this.state.mode !== 'async') {
            _this.showNoOptionsItem();
          }
        } else if (data.length > 0) {
          _this.context.drawerList.setData(data);

          var localActiveItem =
            data.length === 1 ||
            !parseFloat(_this.context.drawerList.active_item > -1)
              ? data[0].__id
              : null;

          _this.setState(
            {
              localActiveItem: localActiveItem,
              skipHighlight: false,
              _listenForPropChanges: false,
            },
            function() {
              if (!localActiveItem) {
                var _data$;

                _this.context.drawerList.scrollToItem(
                  (_data$ = data[0]) === null || _data$ === void 0
                    ? void 0
                    : _data$.__id,
                  {
                    scrollTo: false,
                  }
                );
              }
            }
          );

          if (data.length === 1) {
            _this.context.drawerList.setState({
              active_item: localActiveItem,
              ignore_events: false,
            });
          }
        }
      } else {
        _this.totalReset();

        _this.showAll();
      }

      _this.setVisible();

      _this.setAriaLiveUpdate();

      return data;
    };

    _this.runFilterToHighlight = function() {
      var value =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : null;

      if (value === null) {
        value = _this.state.inputValue;
      }

      value = String(value || '').trim();

      var data = _this.runFilter(value);

      _this.setState({
        skipHighlight: false,
        _listenForPropChanges: false,
      });

      _this.context.drawerList.setData(data);

      _this.context.drawerList.setState({
        cache_hash: value + data.length,
        ignore_events: false,
      });

      _this.setAriaLiveUpdate();

      return data;
    };

    _this.emptyData = function() {
      _this.setState({
        inputValue: '',
        typedInputValue: null,
        _listenForPropChanges: false,
      });

      _this.context.drawerList.setData(
        function() {
          return [];
        },
        function() {
          _this.setSearchIndex({
            overwriteSearchIndex: true,
          });

          _this.resetSelections();

          _this.totalReset();
        },
        {
          overwriteOriginalData: true,
        }
      );
    };

    _this.showNoOptionsItem = function() {
      _this.resetSelections();

      _this.ignoreEvents();

      _this.context.drawerList.setData([
        {
          content: _this._props.no_options,
          ignore_events: true,
          __id: 'no_options',
        },
      ]);

      _this.context.drawerList.setState({
        cache_hash: 'no_options',
      });

      _this.setVisible();
    };

    _this.showIndicatorItem = function() {
      _this.resetSelections();

      _this.ignoreEvents();

      _this.context.drawerList.setData([
        {
          content: React.createElement(ProgressIndicator, {
            label: _this._props.indicator_label,
          }),
          ignore_events: true,
          __id: 'indicator',
        },
      ]);

      _this.context.drawerList.setState({
        cache_hash: 'indicator',
      });

      _this.setVisible();
    };

    _this.showIndicator = function() {
      if (!_this.state.visibleIndicator) {
        _this.setState({
          visibleIndicator: true,
          _listenForPropChanges: false,
        });
      }
    };

    _this.hideIndicator = function() {
      _this.setState({
        visibleIndicator: false,
        _listenForPropChanges: false,
      });
    };

    _this.showAllItems = function() {
      _this.showAll();

      _this.scrollToSelectedItem();
    };

    _this.setMode = function(mode) {
      _this.setState({
        mode: mode,
        _listenForPropChanges: false,
      });
    };

    _this.updateData = function(data) {
      _this.context.drawerList.setData(
        function() {
          return data;
        },
        function() {
          _this.setSearchIndex(
            {
              overwriteSearchIndex: true,
            },
            function() {
              var typedInputValue = _this.state.typedInputValue;

              if (
                (typedInputValue === null || typedInputValue === void 0
                  ? void 0
                  : typedInputValue.length) > 0
              ) {
                var _data2 = _this.runFilterWithSideEffects(
                  typedInputValue
                );

                if (_data2.length === 0) {
                  _this.showNoOptionsItem();
                }
              } else {
                _this.resetSelections();

                _this.context.drawerList.setState({
                  active_item: -1,
                  ignore_events: false,
                });
              }
            }
          );
        },
        {
          overwriteOriginalData: true,
        }
      );

      return _assertThisInitialized(_this);
    };

    _this.onInputClickHandler = function(e) {
      var value = e.target.value;

      _this.runFilterToHighlight(value);

      _this.showAll();

      _this.setVisible();
    };

    _this.onInputFocusHandler = function(event) {
      if (_this.state.skipFocus) {
        return;
      }

      if (isTrue(_this.props.open_on_focus)) {
        _this.showAll();

        _this.setVisible();
      } else {
        _this.setSearchIndex();
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_focus',
        _extends(
          {
            event: event,
          },
          _this.getEventObjects('on_focus')
        )
      );
    };

    _this.onBlurHandler = function(event) {
      _this.setState({
        typedInputValue: null,
        _listenForPropChanges: false,
      });

      if (isTrue(_this.props.open_on_focus)) {
        _this.setHidden();
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_blur',
        _extends(
          {
            event: event,
          },
          _this.getEventObjects('on_blur')
        )
      );

      if (!isTrue(_this.props.prevent_selection)) {
        var inputValue = AutocompleteInstance.getCurrentDataTitle(
          _this.context.drawerList.selected_item,
          _this.context.drawerList.original_data
        );
        clearTimeout(_this._selectTimeout);
        _this._selectTimeout = setTimeout(function() {
          if (parseFloat(_this.context.drawerList.selected_item) > -1) {
            _this.setState({
              inputValue: inputValue,
              _listenForPropChanges: false,
            });
          } else {
            _this.setState({
              inputValue: '',
              _listenForPropChanges: false,
            });
          }
        }, 1);
      }
    };

    _this.getEventObjects = function(key) {
      var attributes = _this.attributes;
      return {
        attributes: attributes,
        dataList: _this.context.drawerList.data,
        updateData: _this.updateData,
        showAllItems: _this.showAllItems,
        setVisible: _this.setVisible,
        setHidden: _this.setHidden,
        emptyData: _this.emptyData,
        showNoOptionsItem: _this.showNoOptionsItem,
        showIndicatorItem: _this.showIndicatorItem,
        showIndicator: _this.showIndicator,
        hideIndicator: _this.hideIndicator,
        setMode: _this.setMode,
        debounce: function debounce$1(func) {
          var props =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          var wait =
            arguments.length > 2 && arguments[2] !== undefined
              ? arguments[2]
              : 250;
          _this.dbf = _this.dbf || {};
          return (
            _this.dbf[key] ||
            (_this.dbf[key] = debounce(func, wait, {
              context: _assertThisInitialized(_this),
            }))
          )(props);
        },
      };
    };

    _this.toggleVisible = function() {
      var _ref2 =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {},
        _ref2$hasFilter = _ref2.hasFilter,
        hasFilter = _ref2$hasFilter === void 0 ? false : _ref2$hasFilter;

      if (
        !hasFilter &&
        !isTrue(_this.props.prevent_close) &&
        !_this.context.drawerList.hidden &&
        _this.context.drawerList.opened
      ) {
        _this.setHidden();
      } else {
        _this.setVisible();
      }
    };

    _this.onSubmitHandler = function() {
      var hasFilter = _this.hasFilterActive();

      _this.showAll();

      _this.toggleVisible({
        hasFilter: hasFilter,
      });
    };

    _this.hasValidData = function() {
      var data =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : _this.context.drawerList.data;

      if (data.length > 0) {
        var first = data[0];

        if (!['no_options', 'indicator'].includes(first.__id)) {
          return true;
        }
      }

      return false;
    };

    _this.hasSelectedItem = function() {
      return parseFloat(_this.context.drawerList.selected_item) > -1;
    };

    _this.hasActiveItem = function() {
      return parseFloat(_this.context.drawerList.active_item) > -1;
    };

    _this.hasFilterActive = function() {
      var _this$context$drawerL;

      return (
        _this.context.drawerList.data.length !==
        ((_this$context$drawerL =
          _this.context.drawerList.original_data) === null ||
        _this$context$drawerL === void 0
          ? void 0
          : _this$context$drawerL.length)
      );
    };

    _this.onTriggerKeyDownHandler = function(_ref3) {
      var e = _ref3.event;
      var key = keycode(e);

      switch (key) {
        case 'up':
        case 'down':
          e.preventDefault();

          if (_this.hasFilterActive()) {
            _this.ignoreEvents();

            _this.showAll();

            _this.setVisible();

            _this.scrollToActiveItem();
          } else {
            _this.setVisible();
          }

          break;

        case 'enter':
          e.preventDefault();

          if (
            !_this.context.drawerList.opened &&
            _this.hasFilterActive()
          ) {
            _this.ignoreEvents();

            _this.showAll();
          }

          if (
            (!_this.hasValidData() || !_this.hasSelectedItem()) &&
            !_this.hasActiveItem()
          ) {
            clearTimeout(_this._toggleVisibleTimeout);
            _this._toggleVisibleTimeout = setTimeout(
              _this.toggleVisible,
              1
            );
          } else {
            _this.setVisible();
          }

          break;
      }
    };

    _this.ignoreEvents = function() {
      clearTimeout(_this.showAllTimeout);

      _this.context.drawerList.setState(
        {
          ignore_events: true,
        },
        function() {
          _this.showAllTimeout = setTimeout(function() {
            var _this$context, _this$context$drawerL2;

            (_this$context = _this.context) === null ||
            _this$context === void 0
              ? void 0
              : (_this$context$drawerL2 = _this$context.drawerList) ===
                  null || _this$context$drawerL2 === void 0
              ? void 0
              : _this$context$drawerL2.setState({
                  ignore_events: false,
                });
          }, 10);
        }
      );
    };

    _this.showAll = function() {
      _this.resetFilter();

      _this.setState({
        localActiveItem: null,
        _listenForPropChanges: false,
      });

      _this.context.drawerList.setState({
        cache_hash: 'all',
      });
    };

    _this.totalReset = function() {
      _this.setState({
        inputValue: undefined,
        typedInputValue: undefined,
        _listenForPropChanges: false,
      });

      _this.context.drawerList.setState({
        selected_item: null,
      });
    };

    _this.resetSelections = function() {
      _this.context.drawerList.setState({
        active_item: null,
        ignore_events: false,
      });
    };

    _this.resetFilter = function() {
      _this.context.drawerList.setData(
        _this.context.drawerList.original_data
      );
    };

    _this.runFilter = function(value) {
      var _ref4 =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref4$skipHighlight = _ref4.skipHighlight,
        skipHighlight =
          _ref4$skipHighlight === void 0 ? false : _ref4$skipHighlight;

      var words = value.split(/\s+/g).filter(Boolean);
      var wordsCount = words.length;

      var findWords = function findWords(item) {
        return words
          .map(function(word, wordIndex) {
            return {
              word: word,
              score: wordsCount - wordIndex,
            };
          })
          .filter(function(_ref5, wordIndex) {
            var word = _ref5.word;
            return (
              typeof item === 'string' &&
              (wordIndex > 1
                ? new RegExp(''.concat(word), 'i').test(item)
                : new RegExp(
                    '^'.concat(word, '|\\s').concat(word),
                    'i'
                  ).test(item))
            );
          });
      };

      var searchIndex = _this.state.searchIndex;

      if (!searchIndex) {
        searchIndex = _this.setSearchIndex();
      }

      if (typeof searchIndex === 'undefined') {
        return [];
      }

      var startTag =
        '<span class="dnb-drawer-list__option__item--highlight">';
      var endTag = '</span>';
      return searchIndex
        .map(function(item, itemIndex) {
          var listOfFoundWords = findWords(item.searchChunk);

          if (typeof item.dataItem === 'string') {
            item.dataItem = {
              content: item.dataItem,
            };
          }

          item.dataItem.render = function(children) {
            var Component = null;

            if (typeof children !== 'string') {
              if (!Array.isArray(children)) {
                children = [children];
              }

              Component = children;
              children = children.map(function(child) {
                return grabStringFromReact(child);
              });
            }

            if (typeof children === 'string') {
              children = [children];
            }

            children = children
              .map(function(child) {
                if (skipHighlight || _this.state.skipHighlight) {
                  return child;
                }

                var formatted = listOfFoundWords
                  .reverse()
                  .map(function(_ref6) {
                    var word = _ref6.word;
                    var charStart = child
                      .toLowerCase()
                      .indexOf(word.toLowerCase());
                    var charEnd = word.length + charStart;

                    if (charStart === -1) {
                      return null;
                    }

                    var ret = {
                      a: child.substring(0, charStart),
                      b: child.substring(charStart, charEnd),
                      c: child.substring(charEnd, child.length),
                    };
                    return ret;
                  })
                  .filter(Boolean)
                  .reduce(function(acc, _ref7) {
                    var a = _ref7.a,
                      b = _ref7.b,
                      c = _ref7.c;

                    if (acc.includes('š')) {
                      return acc.replace(
                        new RegExp('('.concat(b, ')'), 'gi'),
                        'š$1Ÿ'
                      );
                    }

                    return ''
                      .concat(a, '\u0161')
                      .concat(b, '\u0178')
                      .concat(c);
                  }, child);

                if (formatted.includes('š')) {
                  return React.createElement('span', {
                    key: itemIndex + child,
                    dangerouslySetInnerHTML: {
                      __html: formatted
                        .replace(/š/g, startTag)
                        .replace(/Ÿ/g, endTag),
                    },
                  });
                }

                return formatted;
              })
              .map(function(c, i, a) {
                return i < a.length - 1 ? [c, ' '] : c;
              });

            if (Component) {
              children = Array.isArray(Component)
                ? Component.map(function(Comp, i) {
                    return React.cloneElement(
                      Comp,
                      {
                        key: itemIndex + i,
                      },
                      children[i]
                    );
                  })
                : React.cloneElement(Component, null, children);
            }

            return children;
          };

          var totalScore = listOfFoundWords.reduce(function(acc, _ref8) {
            var score = _ref8.score;
            return (acc += score);
          }, 0);
          return {
            countFindings: listOfFoundWords.length + totalScore,
            item: item,
          };
        })
        .filter(function(_ref9) {
          var countFindings = _ref9.countFindings;
          return countFindings;
        })
        .sort(function(_ref10, _ref11) {
          var a = _ref10.countFindings;
          var b = _ref11.countFindings;
          return b - a;
        })
        .map(function(_ref12) {
          var item = _ref12.item;
          return item.dataItem;
        });
    };

    _this.onSelectHandler = function(args) {
      if (parseFloat(args.active_item) > -1) {
        dispatchCustomElementEvent(
          _assertThisInitialized(_this),
          'on_select',
          _extends({}, args, {}, _this.getEventObjects('on_select'))
        );
      }
    };

    _this.onChangeHandler = function(args) {
      var selected_item = args.selected_item;
      var inputValue = AutocompleteInstance.getCurrentDataTitle(
        selected_item,
        _this.context.drawerList.data
      );

      _this.setState({
        skipFocus: true,
        skipHighlight: true,
        inputValue: inputValue,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        _extends({}, args, {}, _this.getEventObjects('on_change'))
      );

      _this.setHidden();

      clearTimeout(_this._selectTimeout);
      _this._selectTimeout = setTimeout(function() {
        if (!isTrue(_this.props.keep_open)) {
          try {
            _this._refInput.current._ref.current.focus();

            _this.setState({
              skipFocus: false,
              _listenForPropChanges: false,
            });
          } catch (e) {}
        }
      }, 1);
    };

    _this._id = _props.id || makeUniqueId();
    _this.attributes = {};
    _this.state = _this.state || {};
    _this.state._listenForPropChanges = true;
    _this.state.mode = _props.mode;

    if (
      (_context$drawerList = context.drawerList) === null ||
      _context$drawerList === void 0
        ? void 0
        : _context$drawerList.current_title
    ) {
      _this.state.inputValue = context.drawerList.current_title;
    }

    _this._ref = React.createRef();
    _this._refShell = React.createRef();
    _this._refInput = React.createRef();
    return _this;
  }

  _createClass(AutocompleteInstance, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (isTrue(this.props.opened)) {
          this.runFilterToHighlight();
          this.setVisible();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.setHidden();
        clearTimeout(this._hideTimeout);
        clearTimeout(this._selectTimeout);
        clearTimeout(this._ariaLiveUpdateTiemout);
        clearTimeout(this._toggleVisibleTimeout);
      },
    },
    {
      key: 'setSearchIndex',
      value: function setSearchIndex() {
        var _ref13 =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {},
          _ref13$overwriteSearc = _ref13.overwriteSearchIndex,
          overwriteSearchIndex =
            _ref13$overwriteSearc === void 0
              ? false
              : _ref13$overwriteSearc;

        var cb = arguments.length > 1 ? arguments[1] : undefined;

        if (!overwriteSearchIndex && this.state.searchIndex) {
          return this.state.searchIndex;
        }

        var searchIndex = AutocompleteInstance.createSearchIndex(
          this.context.drawerList.original_data
        );
        this.setState(
          {
            searchIndex: searchIndex,
            _listenForPropChanges: false,
          },
          cb
        );
        return searchIndex;
      },
    },
    {
      key: 'setAriaLiveUpdate',
      value: function setAriaLiveUpdate() {
        var _this2 = this;

        var opened = this.context.drawerList.opened;
        var _this$_props = this._props,
          aria_live_options = _this$_props.aria_live_options,
          no_options = _this$_props.no_options;

        if (opened) {
          clearTimeout(this._ariaLiveUpdateTiemout);
          this._ariaLiveUpdateTiemout = setTimeout(function() {
            var newString = null;

            if (_this2.hasValidData()) {
              newString = String(aria_live_options).replace(
                '%s',
                _this2.context.drawerList.data.length
              );
            } else {
              newString = no_options;
            }

            if (newString) {
              _this2.setState({
                ariaLiveUpdate: newString,
                _listenForPropChanges: false,
              });

              _this2._ariaLiveUpdateTiemout = setTimeout(function() {
                _this2.setState({
                  ariaLiveUpdate: null,
                  _listenForPropChanges: false,
                });
              }, 1e3);
            }
          }, 1e3);
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var _triggerParams, _extends2;

        var props = (this._props = extendPropsWithContext(
          this.props,
          defaultProps$a,
          this.context.formRow,
          this.context.translation.Autocomplete
        ));

        var title = props.title,
          label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          icon = props.icon,
          icon_size = props.icon_size,
          input_icon = props.input_icon,
          size = props.size,
          align_autocomplete = props.align_autocomplete,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          scrollable = props.scrollable,
          focusable = props.focusable,
          keep_open = props.keep_open,
          prevent_close = props.prevent_close,
          no_animation = props.no_animation,
          no_scroll_animation = props.no_scroll_animation,
          show_drawer_button = props.show_drawer_button,
          CustomInput = props.input_component,
          options_render = props.options_render,
          prevent_selection = props.prevent_selection,
          max_height = props.max_height,
          default_value = props.default_value,
          submit_button_title = props.submit_button_title,
          className = props.className,
          _className = props.class,
          disabled = props.disabled,
          triangle_position = props.triangle_position,
          _mode = props.mode,
          _data = props.data,
          _no_options = props.no_options,
          _aria_live_options = props.aria_live_options,
          _children = props.children,
          _direction = props.direction,
          _skip_highlight = props.skip_highlight,
          _id = props.id,
          _opened = props.opened,
          _value = props.value,
          _indicator_label = props.indicator_label,
          attributes = _objectWithoutProperties(props, [
            'title',
            'label',
            'label_direction',
            'label_sr_only',
            'icon',
            'icon_size',
            'input_icon',
            'size',
            'align_autocomplete',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'scrollable',
            'focusable',
            'keep_open',
            'prevent_close',
            'no_animation',
            'no_scroll_animation',
            'show_drawer_button',
            'input_component',
            'options_render',
            'prevent_selection',
            'max_height',
            'default_value',
            'submit_button_title',
            'className',
            'class',
            'disabled',
            'triangle_position',
            'mode',
            'data',
            'no_options',
            'aria_live_options',
            'children',
            'direction',
            'skip_highlight',
            'id',
            'opened',
            'value',
            'indicator_label',
          ]);

        var icon_position = props.icon_position;

        if (!icon_position && align_autocomplete === 'right') {
          icon_position = 'right';
        }

        var id = this._id;
        var showStatus = status && status !== 'error';
        var _this$state = this.state,
          inputValue = _this$state.inputValue,
          visibleIndicator = _this$state.visibleIndicator,
          ariaLiveUpdate = _this$state.ariaLiveUpdate;
        var _this$context$drawerL3 = this.context.drawerList,
          selected_item = _this$context$drawerL3.selected_item,
          direction = _this$context$drawerL3.direction,
          opened = _this$context$drawerL3.opened,
          hidden = _this$context$drawerL3.hidden;

        _extends(
          this.context.drawerList.attributes,
          validateDOMAttributes(null, attributes)
        );

        var mainParams = {
          className: classnames(
            'dnb-autocomplete dnb-autocomplete--'.concat(
              direction,
              ' dnb-form-component'
            ),
            createSpacingClasses(props),
            _className,
            className,
            opened && 'dnb-autocomplete--opened',
            label_direction &&
              'dnb-autocomplete--'.concat(label_direction),
            icon_position &&
              'dnb-autocomplete--icon-position-'.concat(
                icon_position || 'left'
              ),
            align_autocomplete &&
              'dnb-autocomplete--'.concat(align_autocomplete),
            visibleIndicator && 'dnb-autocomplete--show-indicator',
            size && 'dnb-autocomplete--'.concat(size),
            status && 'dnb-autocomplete__status--'.concat(status_state),
            showStatus && 'dnb-autocomplete__form-status'
          ),
        };
        var triggerParams =
          ((_triggerParams = {}),
          _defineProperty(
            _triggerParams,
            'aria-owns',
            ''.concat(id, '-ul')
          ),
          _defineProperty(_triggerParams, 'aria-haspopup', 'listbox'),
          _defineProperty(_triggerParams, 'aria-expanded', opened),
          _triggerParams);

        var inputParams = _extends(
          ((_extends2 = {
            className:
              'dnb-autocomplete__input' +
              (opened ? ' dnb-button--active' : ''),
            id: id,
            disabled: disabled,
            placeholder: title,
          }),
          _defineProperty(_extends2, 'aria-autocomplete', 'list'),
          _defineProperty(
            _extends2,
            'aria-controls',
            ''.concat(id, '-ul')
          ),
          _defineProperty(_extends2, 'aria-haspopup', 'listbox'),
          _defineProperty(_extends2, 'aria-expanded', opened),
          _extends2),
          attributes
        );

        if (
          !isTrue(prevent_selection) &&
          !hidden &&
          parseFloat(selected_item) > -1
        ) {
          inputParams['aria-activedescendant'] = 'option-'
            .concat(id, '-')
            .concat(selected_item);
        }

        inputParams.value = inputValue;

        if (showStatus || suffix) {
          inputParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        validateDOMAttributes(null, mainParams);
        validateDOMAttributes(this.props, inputParams);
        this.attributes = validateDOMAttributes(null, attributes);
        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              label_direction: label_direction,
              sr_only: label_sr_only,
              disabled: disabled,
              onMouseDown: this.toggleVisible,
            }),
          React.createElement(
            'span',
            {
              className: 'dnb-autocomplete__inner',
              ref: this._ref,
            },
            _ref14,
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text_id: id + '-status',
                text: status,
                status: status_state,
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-autocomplete__row',
              },
              React.createElement(
                'span',
                {
                  className: 'dnb-autocomplete__shell',
                  ref: this._refShell,
                },
                CustomInput
                  ? React.createElement(CustomInput, inputParams)
                  : React.createElement(
                      Input,
                      _extends(
                        {
                          icon: visibleIndicator ? _ref15 : input_icon,
                          icon_size:
                            icon_size ||
                            (size === 'large' ? 'medium' : 'default'),
                          size: size,
                          status: !opened && status ? status_state : null,
                          type: 'search',
                          submit_element: isTrue(show_drawer_button)
                            ? React.createElement(
                                SubmitButton,
                                _extends(
                                  {
                                    icon: icon,
                                    icon_size:
                                      icon_size ||
                                      (size === 'large'
                                        ? 'medium'
                                        : 'default'),
                                    status:
                                      !opened && status
                                        ? status_state
                                        : null,
                                    title: submit_button_title,
                                    variant: 'secondary',
                                    disabled: disabled,
                                    size:
                                      size === 'default' ? 'medium' : size,
                                    on_submit: this.onSubmitHandler,
                                    onKeyDown: this
                                      .onTriggerKeyDownHandler,
                                  },
                                  triggerParams
                                )
                              )
                            : false,
                          ref: this._refInput,
                          onMouseDown: this.onInputClickHandler,
                          on_key_down: this.onTriggerKeyDownHandler,
                          on_change: this.onInputChangeHandler,
                          on_focus: this.onInputFocusHandler,
                          on_blur: this.onBlurHandler,
                        },
                        inputParams
                      )
                    ),
                React.createElement(DrawerList, {
                  id: id,
                  inner_class: 'dnb-autocomplete__list',
                  value: selected_item,
                  default_value: default_value,
                  scrollable: scrollable,
                  focusable: focusable,
                  no_animation: no_animation,
                  no_scroll_animation: no_scroll_animation,
                  prevent_selection: prevent_selection,
                  triangle_position:
                    triangle_position || icon_position || 'left',
                  keep_open: keep_open,
                  prevent_close: prevent_close,
                  align_drawer: align_autocomplete,
                  disabled: disabled,
                  max_height: max_height,
                  direction: direction,
                  size: size,
                  options_render: options_render,
                  on_change: this.onChangeHandler,
                  on_select: this.onSelectHandler,
                })
              ),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-autocomplete__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          ),
          React.createElement(
            'span',
            {
              className: 'dnb-sr-only',
              'aria-live': 'assertive',
            },
            ariaLiveUpdate
          )
        );
      },
    },
  ]);

  return AutocompleteInstance;
})(React.PureComponent);

AutocompleteInstance.defaultProps = defaultProps$a;
AutocompleteInstance.contextType = DrawerListContext;

function _createSuper$c(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$d()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$d() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$7 = {
  on_change: null,
  on_state_update: null,
};

var defaultProps$b = _extends(
  {
    label: null,
    label_position: null,
    title: null,
    default_state: null,
    checked: 'default',
    disabled: null,
    id: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    value: null,
    attributes: null,
    readOnly: false,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$7
);

var _ref$3 = React.createElement(AlignmentHelper, null);

var _ref2$2 = React.createElement(
  'span',
  {
    className: 'dnb-checkbox__button',
    'aria-hidden': true,
  },
  React.createElement('span', {
    className: 'dnb-checkbox__focus',
  })
);

var Checkbox = (function(_React$Component) {
  _inherits(Checkbox, _React$Component);

  var _super = _createSuper$c(Checkbox);

  _createClass(Checkbox, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Checkbox.tagName, Checkbox, defaultProps$b);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (state.hasDefaultState) {
            state.checked = Checkbox.parseChecked(props.default_state);
            state.hasDefaultState = false;
          } else if (props.checked !== 'default') {
            state.checked = Checkbox.parseChecked(props.checked);
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function Checkbox(props) {
    var _this;

    _classCallCheck(this, Checkbox);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(event) {
      switch (keycode(event)) {
        case 'enter':
          _this.onChangeHandler(event);

          break;
      }
    };

    _this.onChangeHandler = function(event) {
      if (isTrue(_this.props.readOnly)) {
        return event.preventDefault();
      }

      var checked = !_this.state.checked;

      _this.setState({
        checked: checked,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          checked: checked,
          event: event,
        }
      );

      if (_this._refInput.current) {
        _this._refInput.current.focus();
      }
    };

    _this.onMouseOutHandler = function() {
      if (_this.props.status && _this.props.status_state === 'error') {
        return;
      }

      if (_this._refInput.current) {
        _this._refInput.current.blur();
      }
    };

    _this._refInput = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this.state = {
      _listenForPropChanges: true,
      hasDefaultState: props.default_state !== null,
      checked: Checkbox.parseChecked(props.default_state || props.checked),
    };
    return _this;
  }

  _createClass(Checkbox, [
    {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (
          Checkbox.parseChecked(this.props.checked) !==
          Checkbox.parseChecked(nextProps.checked)
        ) {
          var checked = nextState.checked;
          dispatchCustomElementEvent(this, 'on_state_update', {
            checked: checked,
          });
        }

        return true;
      },
    },
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$b,
          this.context.formRow
        );

        var value = props.value,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          label = props.label,
          label_position = props.label_position,
          label_sr_only = props.label_sr_only,
          title = props.title,
          disabled = props.disabled,
          readOnly = props.readOnly,
          className = props.className,
          _className = props.class,
          _id = props.id,
          _default_state = props.default_state,
          _checked = props.checked,
          attributes = props.attributes,
          children = props.children,
          on_change = props.on_change,
          on_state_update = props.on_state_update,
          custom_method = props.custom_method,
          custom_element = props.custom_element,
          rest = _objectWithoutProperties(props, [
            'value',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'label',
            'label_position',
            'label_sr_only',
            'title',
            'disabled',
            'readOnly',
            'className',
            'class',
            'id',
            'default_state',
            'checked',
            'attributes',
            'children',
            'on_change',
            'on_state_update',
            'custom_method',
            'custom_element',
          ]);

        var checked = this.state.checked;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var mainParams = {
          className: classnames(
            'dnb-checkbox dnb-form-component',
            createSpacingClasses(props),
            className,
            _className,
            status && 'dnb-checkbox__status--'.concat(status_state),
            label &&
              'dnb-checkbox--label-position-'.concat(
                label_position || 'right'
              )
          ),
        };

        var inputParams = _extends(
          {
            disabled: disabled,
            checked: checked,
            onMouseOut: this.onMouseOutHandler,
          },
          rest
        );

        if (showStatus || suffix) {
          inputParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (readOnly) {
          inputParams['aria-readonly'] = inputParams.readOnly = true;
        }

        validateDOMAttributes(this.props, inputParams);
        var statusComp =
          showStatus &&
          React.createElement(FormStatus, {
            id: id + '-form-status',
            global_status_id: global_status_id,
            text_id: id + '-status',
            width_selector: id + ', ' + id + '-label',
            text: status,
            status: status_state,
            animation: status_animation,
          });
        return React.createElement(
          'span',
          mainParams,
          React.createElement(
            'span',
            {
              className: 'dnb-checkbox__order',
            },
            label &&
              React.createElement(FormLabel, {
                id: id + '-label',
                for_id: id,
                text: label,
                disabled: disabled,
                sr_only: label_sr_only,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-checkbox__inner',
              },
              _ref$3,
              label_position === 'left' && statusComp,
              React.createElement(
                'span',
                {
                  className: 'dnb-checkbox__shell',
                },
                React.createElement(
                  'input',
                  _extends(
                    {
                      id: id,
                      name: id,
                      type: 'checkbox',
                      title: title,
                      'aria-checked': checked,
                      className: 'dnb-checkbox__input',
                      value: checked ? value || '' : '',
                      disabled: isTrue(disabled),
                    },
                    inputParams,
                    {
                      onChange: this.onChangeHandler,
                      onKeyDown: this.onKeyDownHandler,
                      ref: this._refInput,
                    }
                  )
                ),
                _ref2$2,
                _ref3$4
              )
            ),
            suffix &&
              React.createElement(
                'span',
                {
                  className: 'dnb-checkbox__suffix',
                  id: id + '-suffix',
                },
                React.createElement(Suffix, props, suffix)
              )
          ),
          (label_position === 'right' || !label_position) && statusComp
        );
      },
    },
  ]);

  return Checkbox;
})(React.Component);

Checkbox.tagName = 'dnb-checkbox';
Checkbox.defaultProps = defaultProps$b;
Checkbox.renderProps = renderProps$7;
Checkbox.contextType = Context;

Checkbox.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

var _ref4$1 = React.createElement('path', {
  d:
    'M5.86 12.95a.75.75 0 1 0-1.22.86l1.22-.86zm2.15 4.34l.62-.42-.01-.01-.61.43zm.94.52l.02-.75-.02.75zm.98-.46l-.6-.47v.01l.6.46zm9.4-10.7a.75.75 0 0 0-1.17-.93l1.18.93zm-14.7 7.16l2.76 3.91 1.23-.86-2.76-3.91-1.22.86zm2.75 3.9c.35.52.93.84 1.55.85l.04-1.5a.43.43 0 0 1-.34-.19l-1.25.84zm1.55.85c.62.02 1.22-.26 1.6-.76l-1.2-.9a.43.43 0 0 1-.36.16l-.04 1.5zm1.59-.75l8.82-11.16-1.18-.93-8.82 11.16 1.18.93z',
});

var CheckSVG = function CheckSVG(props) {
    return React.createElement(
      'svg',
      _extends(
        {
          width: '24',
          height: '24',
          viewBox: '0 0 24 24',
          fill: 'none',
          className: 'dnb-checkbox__gfx',
          'aria-hidden': true,
        },
        props
      ),
      _ref4$1
    );
  },
  _ref3$4 = React.createElement(CheckSVG, null);

var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S = String(_defined(string));
  var p1 = '<' + tag;
  if (attribute !== '')
    p1 +=
      ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
var _stringHtml = function(NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  _export(
    _export.P +
      _export.F *
        _fails(function() {
          var test = ''[NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        }),
    'String',
    O
  );
};

// B.2.3.10 String.prototype.link(url)
_stringHtml('link', function(createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(
      required +
        ' argument' +
        (required > 1 ? 's' : '') +
        ' required, but only ' +
        args.length +
        ' present'
    );
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (
    argument instanceof Date ||
    (typeof argument === 'object' && argStr === '[object Date]')
  ) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (
    typeof argument === 'number' ||
    argStr === '[object Number]'
  ) {
    return new Date(argument);
  } else {
    if (
      (typeof argument === 'string' || argStr === '[object String]') &&
      typeof console !== 'undefined'
    ) {
      // eslint-disable-next-line no-console
      console.warn(
        "Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"
      ); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * var result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * var result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * var result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return !isNaN(date);
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds',
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds',
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes',
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes',
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours',
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours',
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days',
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months',
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months',
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years',
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years',
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years',
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years',
  },
};
function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

function buildFormatLongFn(args) {
  return function(dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy',
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a',
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}',
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full',
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full',
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full',
  }),
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P',
};
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray =
        args.formattingValues[width] ||
        args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width
        ? String(options.width)
        : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback
      ? args.argumentCallback(dirtyIndex)
      : dirtyIndex;
    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini'],
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'], // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec',
  ],
  wide: [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ],
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday',
  ],
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night',
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night',
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night',
  },
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night',
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night',
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night',
  },
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide',
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function(quarter) {
      return Number(quarter) - 1;
    },
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide',
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide',
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide',
  }),
};

function buildMatchPatternFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback
      ? args.valueCallback(parseResult[0])
      : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length),
    };
  };
}

function buildMatchFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern =
      (width && args.matchPatterns[width]) ||
      args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns =
      (width && args.parsePatterns[width]) ||
      args.parsePatterns[args.defaultParseWidth];
    var value;

    if (
      Object.prototype.toString.call(parsePatterns) === '[object Array]'
    ) {
      value = findIndex(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length),
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i,
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i],
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i,
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
};
var parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    },
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any',
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function(index) {
      return index + 1;
    },
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any',
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any',
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any',
  }),
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale = {
  code: 'en-US',
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0,
    /* Sunday */
    firstWeekContainsDate: 1,
  },
};

function toInteger(dirtyNumber) {
  if (
    dirtyNumber === null ||
    dirtyNumber === true ||
    dirtyNumber === false
  ) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters = {
  // Year
  y: function(date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(
      token === 'yy' ? year % 100 : year,
      token.length
    );
  },
  // Month
  M: function(date, token) {
    var month = date.getUTCMonth();
    return token === 'M'
      ? String(month + 1)
      : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
      case 'aaa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(
      milliseconds * Math.pow(10, numberOfDigits - 3)
    );
    return addLeadingZeros(fractionalSeconds, token.length);
  },
};

var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff =
    startOfUTCISOWeek(date).getTime() -
    startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn =
    locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError(
      'weekStartsOn must be between 0 and 6 inclusively'
    );
  }

  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate, dirtyOptions);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate =
    locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError(
      'firstWeekContainsDate must be between 1 and 7 inclusively'
    );
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate =
    locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff =
    startOfUTCWeek(date, options).getTime() -
    startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night',
  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
   * |  p! | Long localized time            |  P! | Long localized date            |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   * - `P` is long localized date format
   * - `p` is long localized time format
   */
};
var formatters$1 = {
  // Era
  G: function(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated',
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow',
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide',
        });
    }
  },
  // Year
  y: function(date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year',
      });
    }

    return formatters.y(date, token);
  },
  // Local week-numbering year
  Y: function(date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear =
      signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    } // Ordinal number

    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year',
      });
    } // Padding

    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date); // Padding

    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter',
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting',
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting',
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // Stand-alone quarter
  q: function(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter',
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone',
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone',
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone',
        });
    }
  },
  // Month
  M: function(date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return formatters.M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month',
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting',
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting',
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // Stand-alone month
  L: function(date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month',
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone',
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone',
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone',
        });
    }
  },
  // Local week of year
  w: function(date, token, localize, options) {
    var week = getUTCWeek(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week',
      });
    }

    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function(date, token, localize) {
    var isoWeek = getUTCISOWeek(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week',
      });
    }

    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function(date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date',
      });
    }

    return formatters.d(date, token);
  },
  // Day of year
  D: function(date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear',
      });
    }

    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function(date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting',
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting',
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting',
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // Local day of week
  e: function(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day',
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting',
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting',
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting',
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // Stand-alone local day of week
  c: function(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day',
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone',
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone',
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone',
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone',
        });
    }
  },
  // ISO day of week
  i: function(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day',
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting',
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting',
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting',
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // AM or PM
  a: function(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting',
        });

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting',
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting',
        });

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting',
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting',
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting',
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting',
        });
    }
  },
  // Hour [1-12]
  h: function(date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour',
      });
    }

    return formatters.h(date, token);
  },
  // Hour [0-23]
  H: function(date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour',
      });
    }

    return formatters.H(date, token);
  },
  // Hour [0-11]
  K: function(date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour',
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour',
      });
    }

    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function(date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute',
      });
    }

    return formatters.m(date, token);
  },
  // Second
  s: function(date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second',
      });
    }

    return formatters.s(date, token);
  },
  // Fraction of second
  S: function(date, token) {
    return formatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  },
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short',
      });

    case 'PP':
      return formatLong.date({
        width: 'medium',
      });

    case 'PPP':
      return formatLong.date({
        width: 'long',
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full',
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short',
      });

    case 'pp':
      return formatLong.time({
        width: 'medium',
      });

    case 'ppp':
      return formatLong.time({
        width: 'long',
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full',
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short',
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium',
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long',
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full',
      });
      break;
  }

  return dateTimeFormat
    .replace('{{date}}', dateLongFormatter(datePattern, formatLong))
    .replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter,
};

var MILLISECONDS_IN_MINUTE = 60000;

function getDateMillisecondsPart(date) {
  return date.getTime() % MILLISECONDS_IN_MINUTE;
}
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */

function getTimezoneOffsetInMilliseconds(dirtyDate) {
  var date = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
  date.setSeconds(0, 0);
  var hasNegativeUTCOffset = baseTimezoneOffset > 0;
  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset
    ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) %
      MILLISECONDS_IN_MINUTE
    : getDateMillisecondsPart(date);
  return (
    baseTimezoneOffset * MILLISECONDS_IN_MINUTE +
    millisecondsPartOfTimezoneOffset
  );
}

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token) {
  if (token === 'YYYY') {
    throw new RangeError(
      'Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr'
    );
  } else if (token === 'YY') {
    throw new RangeError(
      'Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr'
    );
  } else if (token === 'D') {
    throw new RangeError(
      'Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr'
    );
  } else if (token === 'DD') {
    throw new RangeError(
      'Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr'
    );
  }
}

// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          | a..aaa  | AM, PM                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 0001, ..., 999               |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 05/29/1453                        | 7     |
 * |                                 | PP      | May 29, 1453                      | 7     |
 * |                                 | PPP     | May 29th, 1453                    | 7     |
 * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
 * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;
  var localeFirstWeekContainsDate =
    locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError(
      'firstWeekContainsDate must be between 1 and 7 inclusively'
    );
  }

  var localeWeekStartsOn =
    locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError(
      'weekStartsOn must be between 0 and 6 inclusively'
    );
  }

  if (!locale$1.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale$1.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = toDate(dirtyDate);

  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376

  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1,
    _originalDate: originalDate,
  };
  var result = formatStr
    .match(longFormattingTokensRegExp)
    .map(function(substring) {
      var firstCharacter = substring[0];

      if (firstCharacter === 'p' || firstCharacter === 'P') {
        var longFormatter = longFormatters[firstCharacter];
        return longFormatter(
          substring,
          locale$1.formatLong,
          formatterOptions
        );
      }

      return substring;
    })
    .join('')
    .match(formattingTokensRegExp)
    .map(function(substring) {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return "'";
      }

      var firstCharacter = substring[0];

      if (firstCharacter === "'") {
        return cleanEscapedString(substring);
      }

      var formatter = formatters$1[firstCharacter];

      if (formatter) {
        if (
          !options.useAdditionalWeekYearTokens &&
          isProtectedWeekYearToken(substring)
        ) {
          throwProtectedError(substring);
        }

        if (
          !options.useAdditionalDayOfYearTokens &&
          isProtectedDayOfYearToken(substring)
        ) {
          throwProtectedError(substring);
        }

        return formatter(
          utcDate,
          substring,
          locale$1.localize,
          formatterOptions
        );
      }

      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          'Format string contains an unescaped latin alphabet character `' +
            firstCharacter +
            '`'
        );
      }

      return substring;
    })
    .join('');
  return result;
}

function cleanEscapedString(input) {
  return input
    .match(escapedStringRegExp)[1]
    .replace(doubleQuoteRegExp, "'");
}

/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

var MILLISECONDS_IN_DAY$1 = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * var result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * var result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */

function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft =
    startOfDayLeft.getTime() -
    getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight =
    startOfDayRight.getTime() -
    getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer
  // because the number of milliseconds in a day is not constant
  // (e.g. it's different in the day of the daylight saving time clock shift)

  return Math.round(
    (timestampLeft - timestampRight) / MILLISECONDS_IN_DAY$1
  );
}

var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    singular: 'mindre enn ett sekund',
    plural: 'mindre enn {{count}} sekunder',
  },
  xSeconds: {
    singular: 'ett sekund',
    plural: '{{count}} sekunder',
  },
  halfAMinute: 'et halvt minutt',
  lessThanXMinutes: {
    singular: 'mindre enn ett minutt',
    plural: 'mindre enn {{count}} minutter',
  },
  xMinutes: {
    singular: 'ett minutt',
    plural: '{{count}} minutter',
  },
  aboutXHours: {
    singular: 'omtrent en time',
    plural: 'omtrent {{count}} timer',
  },
  xHours: {
    singular: 'en time',
    plural: '{{count}} timer',
  },
  xDays: {
    singular: 'en dag',
    plural: '{{count}} dager',
  },
  aboutXMonths: {
    singular: 'omtrent en måned',
    plural: 'omtrent {{count}} måneder',
  },
  xMonths: {
    singular: 'en måned',
    plural: '{{count}} måneder',
  },
  aboutXYears: {
    singular: 'omtrent ett år',
    plural: 'omtrent {{count}} år',
  },
  xYears: {
    singular: 'ett år',
    plural: '{{count}} år',
  },
  overXYears: {
    singular: 'over ett år',
    plural: 'over {{count}} år',
  },
  almostXYears: {
    singular: 'nesten ett år',
    plural: 'nesten {{count}} år',
  },
};
var wordMapping = [
  'null',
  'en',
  'to',
  'tre',
  'fire',
  'fem',
  'seks',
  'sju',
  'åtte',
  'ni',
  'ti',
  'elleve',
  'tolv',
];
function formatDistance$1(token, count, options) {
  options = options || {
    onlyNumeric: false,
  };
  var translation = formatDistanceLocale$1[token];
  var result;

  if (typeof translation === 'string') {
    result = translation;
  } else if (count === 0 || count > 1) {
    if (options.onlyNumeric) {
      result = translation.plural.replace('{{count}}', count);
    } else {
      result = translation.plural.replace(
        '{{count}}',
        count < 13 ? wordMapping[count] : count
      );
    }
  } else {
    result = translation.singular;
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }

  return result;
}

var dateFormats$1 = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y',
};
var timeFormats$1 = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm',
};
var dateTimeFormats$1 = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}',
};
var formatLong$1 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: 'full',
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: 'full',
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: 'full',
  }),
};

var formatRelativeLocale$1 = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P',
};
function formatRelative$1(token, _date, _baseDate, _options) {
  return formatRelativeLocale$1[token];
}

var eraValues$1 = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['før Kristus', 'etter Kristus'],
};
var quarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal'],
};
var monthValues$1 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: [
    'jan.',
    'feb.',
    'mars',
    'apr.',
    'mai',
    'juni',
    'juli',
    'aug.',
    'sep.',
    'okt.',
    'nov.',
    'des.',
  ],
  wide: [
    'januar',
    'februar',
    'mars',
    'april',
    'mai',
    'juni',
    'juli',
    'august',
    'september',
    'oktober',
    'november',
    'desember',
  ],
};
var dayValues$1 = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
  abbreviated: ['søn', 'man', 'tir', 'ons', 'tor', 'fre', 'lør'],
  wide: [
    'søndag',
    'mandag',
    'tirsdag',
    'onsdag',
    'torsdag',
    'fredag',
    'lørdag',
  ],
};
var dayPeriodValues$1 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten',
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten',
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgenen',
    afternoon: 'på ettermiddagen',
    evening: 'på kvelden',
    night: 'på natten',
  },
};

function ordinalNumber$1(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$1 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: 'wide',
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: 'wide',
    argumentCallback: function(quarter) {
      return Number(quarter) - 1;
    },
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: 'wide',
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: 'wide',
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: 'wide',
  }),
};

var matchOrdinalNumberPattern$1 = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i,
};
var parseEraPatterns$1 = {
  any: [/^f/i, /^e/i],
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i,
};
var parseQuarterPatterns$1 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};
var matchMonthPatterns$1 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i,
};
var parseMonthPatterns$1 = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};
var matchDayPatterns$1 = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i,
};
var parseDayPatterns$1 = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i],
};
var matchDayPeriodPatterns$1 = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i,
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i,
  },
};
var match$1 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function(value) {
      return parseInt(value, 10);
    },
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: 'any',
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: 'any',
    valueCallback: function(index) {
      return index + 1;
    },
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: 'any',
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: 'any',
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: 'any',
  }),
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Bokmål locale.
 * @language Norwegian Bokmål
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse]{@link https://github.com/Hanse}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Dag Stuan [@dagstuan]{@link https://github.com/dagstuan}
 */

var locale$1 = {
  code: 'nb',
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1,
    /* Monday */
    firstWeekContainsDate: 4,
  },
};

var _arrayFill = function fill(value /* , start = 0, end = @length */) {
  var O = _toObject(this);
  var length = _toLength(O.length);
  var aLen = arguments.length;
  var index = _toAbsoluteIndex(
    aLen > 1 ? arguments[1] : undefined,
    length
  );
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

_export(_export.P, 'Array', { fill: _arrayFill });

_addToUnscopables('fill');

/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * var result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */

function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * var result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  var desiredMonth = date.getMonth() + amount;
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));
  return date;
}

/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * var result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */

function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

/**
 * @name isWithinInterval
 * @category Interval Helpers
 * @summary Is the given date within the interval?
 *
 * @description
 * Is the given date within the interval? (Including start and end.)
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `isWithinRange` to `isWithinInterval`.
 *   This change was made to mirror the use of the word "interval" in standard ISO 8601:2004 terminology:
 *
 *   ```
 *   2.1.3
 *   time interval
 *   part of the time axis limited by two instants
 *   ```
 *
 *   Also, this function now accepts an object with `start` and `end` properties
 *   instead of two arguments as an interval.
 *   This function now throws `RangeError` if the start of the interval is after its end
 *   or if any date in the interval is `Invalid Date`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   isWithinRange(
 *     new Date(2014, 0, 3),
 *     new Date(2014, 0, 1), new Date(2014, 0, 7)
 *   )
 *
 *   // v2.0.0 onward
 *
 *   isWithinInterval(
 *     new Date(2014, 0, 3),
 *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }
 *   )
 *   ```
 *
 * @param {Date|Number} date - the date to check
 * @param {Interval} interval - the interval to check
 * @returns {Boolean} the date is within the interval
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // For the date within the interval:
 * isWithinInterval(new Date(2014, 0, 3), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> true
 *
 * @example
 * // For the date outside of the interval:
 * isWithinInterval(new Date(2014, 0, 10), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> false
 *
 * @example
 * // For date equal to interval start:
 * isWithinInterval(date, { start, end: date }) // => true
 *
 * @example
 * // For date equal to interval end:
 * isWithinInterval(date, { start: date, end }) // => true
 */

function isWithinInterval(dirtyDate, dirtyInterval) {
  requiredArgs(2, arguments);
  var interval = dirtyInterval || {};
  var time = toDate(dirtyDate).getTime();
  var startTime = toDate(interval.start).getTime();
  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`

  if (!(startTime <= endTime)) {
    throw new RangeError('Invalid interval');
  }

  return time >= startTime && time <= endTime;
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */

function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */

function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day?
 *
 * @description
 * Are the given dates in the same day?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 */

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

/**
 * @name isToday
 * @category Day Helpers
 * @summary Is the given date today?
 * @pure false
 *
 * @description
 * Is the given date today?
 *
 * > ⚠️ Please note that this function is not present in the FP submodule as
 * > it uses `Date.now()` internally hence impure and can't be safely curried.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date is today
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // If today is 6 October 2014, is 6 October 14:00:00 today?
 * var result = isToday(new Date(2014, 9, 6, 14, 0))
 * //=> true
 */

function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}

/**
 * @name isWeekend
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * var result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */

function isWeekend(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day === 0 || day === 6;
}

/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month?
 *
 * @description
 * Are the given dates in the same month?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */

function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return (
    dateLeft.getFullYear() === dateRight.getFullYear() &&
    dateLeft.getMonth() === dateRight.getMonth()
  );
}

/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * var result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */

function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  date.setDate(date.getDate() + amount);
  return date;
}

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn =
    locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError(
      'weekStartsOn must be between 0 and 6 inclusively'
    );
  }

  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {0|1|2|3|4|5|6} the day of week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * var result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */

function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE$1 = 60000;
var DEFAULT_ADDITIONAL_DIGITS = 2;
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/,
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
/**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The previous `parse` implementation was renamed to `parseISO`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward
 *   parseISO('2016-01-01')
 *   ```
 *
 * - `parseISO` now validates separate date and time values in ISO-8601 strings
 *   and returns `Invalid Date` if the date is invalid.
 *
 *   ```javascript
 *   parseISO('2018-13-32')
 *   //=> Invalid Date
 *   ```
 *
 * - `parseISO` now doesn't fall back to `new Date` constructor
 *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.
 *
 * @param {String} argument - the value to convert
 * @param {Object} [options] - an object with options.
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * var result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * var result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */

function parseISO(argument, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var additionalDigits =
    options.additionalDigits == null
      ? DEFAULT_ADDITIONAL_DIGITS
      : toInteger(options.additionalDigits);

  if (
    additionalDigits !== 2 &&
    additionalDigits !== 1 &&
    additionalDigits !== 0
  ) {
    throw new RangeError('additionalDigits must be 0, 1 or 2');
  }

  if (
    !(
      typeof argument === 'string' ||
      Object.prototype.toString.call(argument) === '[object String]'
    )
  ) {
    return new Date(NaN);
  }

  var dateStrings = splitDateString(argument);
  var date;

  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }

  if (isNaN(date) || !date) {
    return new Date(NaN);
  }

  var timestamp = date.getTime();
  var time = 0;
  var offset;

  if (dateStrings.time) {
    time = parseTime(dateStrings.time);

    if (isNaN(time) || time === null) {
      return new Date(NaN);
    }
  }

  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);

    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone
    // but we need it to be parsed in our timezone
    // so we use utc values to build date in our timezone.
    // Year values from 0 to 99 map to the years 1900 to 1999
    // so set year explicitly with setFullYear.

    var result = new Date(
      dirtyDate.getUTCFullYear(),
      dirtyDate.getUTCMonth(),
      dirtyDate.getUTCDate(),
      dirtyDate.getUTCHours(),
      dirtyDate.getUTCMinutes(),
      dirtyDate.getUTCSeconds(),
      dirtyDate.getUTCMilliseconds()
    );
    result.setFullYear(dirtyDate.getUTCFullYear());
    return result;
  }

  return new Date(timestamp + time + offset);
}

function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;

  if (/:/.test(array[0])) {
    dateStrings.date = null;
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];

    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(
        dateStrings.date.length,
        dateString.length
      );
    }
  }

  if (timeString) {
    var token = patterns.timezone.exec(timeString);

    if (token) {
      dateStrings.time = timeString.replace(token[1], '');
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings;
}

function parseYear(dateString, additionalDigits) {
  var regex = new RegExp(
    '^(?:(\\d{4}|[+-]\\d{' +
      (4 + additionalDigits) +
      '})|(\\d{2}|[+-]\\d{' +
      (2 + additionalDigits) +
      '})$)'
  );
  var captures = dateString.match(regex); // Invalid ISO-formatted year

  if (!captures)
    return {
      year: null,
    };
  var year = captures[1] && parseInt(captures[1]);
  var century = captures[2] && parseInt(captures[2]);
  return {
    year: century == null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length),
  };
}

function parseDate(dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) return null;
  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string

  if (!captures) return null;
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;

  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }

    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = new Date(0);

    if (
      !validateDate(year, month, day) ||
      !validateDayOfYearDate(year, dayOfYear)
    ) {
      return new Date(NaN);
    }

    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}

function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}

function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return null; // Invalid ISO-formatted time

  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);

  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }

  return (
    hours * MILLISECONDS_IN_HOUR +
    minutes * MILLISECONDS_IN_MINUTE$1 +
    seconds * 1000
  );
}

function parseTimeUnit(value) {
  return (value && parseFloat(value.replace(',', '.'))) || 0;
}

function parseTimezone(timezoneString) {
  if (timezoneString === 'Z') return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign = captures[1] === '+' ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = (captures[3] && parseInt(captures[3])) || 0;

  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }

  return (
    sign *
    (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1)
  );
}

function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
} // Validation functions
// February is null to handle the leap year (using ||)

var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function isLeapYearIndex(year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100);
}

function validateDate(year, month, date) {
  return (
    month >= 0 &&
    month <= 11 &&
    date >= 1 &&
    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))
  );
}

function validateDayOfYearDate(year, dayOfYear) {
  return (
    dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365)
  );
}

function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}

function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }

  return (
    seconds >= 0 &&
    seconds < 60 &&
    minutes >= 0 &&
    minutes < 60 &&
    hours >= 0 &&
    hours < 25
  );
}

function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError(
      'assign requires that input parameter not be null or undefined'
    );
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (dirtyObject.hasOwnProperty(property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn =
    locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError(
      'weekStartsOn must be between 0 and 6 inclusively'
    );
  }

  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

var MILLISECONDS_IN_HOUR$1 = 3600000;
var MILLISECONDS_IN_MINUTE$2 = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/, // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/,
};

function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  }

  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length),
  };
}

function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  } // Input is 'Z'

  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1),
    };
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value:
      sign *
      (hours * MILLISECONDS_IN_HOUR$1 +
        minutes * MILLISECONDS_IN_MINUTE$2 +
        seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length),
  };
}

function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(
    numericPatterns.anyDigitsSigned,
    string,
    valueCallback
  );
}

function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(
        numericPatterns.singleDigit,
        string,
        valueCallback
      );

    case 2:
      return parseNumericPattern(
        numericPatterns.twoDigits,
        string,
        valueCallback
      );

    case 3:
      return parseNumericPattern(
        numericPatterns.threeDigits,
        string,
        valueCallback
      );

    case 4:
      return parseNumericPattern(
        numericPatterns.fourDigits,
        string,
        valueCallback
      );

    default:
      return parseNumericPattern(
        new RegExp('^\\d{1,' + n + '}'),
        string,
        valueCallback
      );
  }
}

function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(
        numericPatterns.singleDigitSigned,
        string,
        valueCallback
      );

    case 2:
      return parseNumericPattern(
        numericPatterns.twoDigitsSigned,
        string,
        valueCallback
      );

    case 3:
      return parseNumericPattern(
        numericPatterns.threeDigitsSigned,
        string,
        valueCallback
      );

    case 4:
      return parseNumericPattern(
        numericPatterns.fourDigitsSigned,
        string,
        valueCallback
      );

    default:
      return parseNumericPattern(
        new RegExp('^-?\\d{1,' + n + '}'),
        string,
        valueCallback
      );
  }
}

function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4;

    case 'evening':
      return 17;

    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;

    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0; // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC

  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;

  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result =
      twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [
  31,
  29,
  31,
  30,
  31,
  30,
  31,
  31,
  30,
  31,
  30,
  31,
]; // User for validation

function isLeapYearIndex$1(year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */

var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function(string, token, match, _options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return (
            match.era(string, {
              width: 'abbreviated',
            }) ||
            match.era(string, {
              width: 'narrow',
            })
          );
        // A, B

        case 'GGGGG':
          return match.era(string, {
            width: 'narrow',
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return (
            match.era(string, {
              width: 'wide',
            }) ||
            match.era(string, {
              width: 'abbreviated',
            }) ||
            match.era(string, {
              width: 'narrow',
            })
          );
      }
    },
    set: function(date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['R', 'u', 't', 'T'],
  },
  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    priority: 130,
    parse: function(string, token, match, _options) {
      var valueCallback = function(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy',
        };
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback);

        case 'yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback,
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(
          value.year,
          currentYear
        );
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }

      var year =
        !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T'],
  },
  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function(string, token, match, _options) {
      var valueCallback = function(year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY',
        };
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback);

        case 'Yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback,
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(
          value.year,
          currentYear
        );
        date.setUTCFullYear(
          normalizedTwoDigitYear,
          0,
          options.firstWeekContainsDate
        );
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }

      var year =
        !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: [
      'y',
      'R',
      'u',
      'Q',
      'q',
      'M',
      'L',
      'I',
      'd',
      'D',
      'i',
      't',
      'T',
    ],
  },
  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function(_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: [
      'G',
      'y',
      'Y',
      'u',
      'Q',
      'q',
      'M',
      'L',
      'w',
      'd',
      'D',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Extended year
  u: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'G',
      'y',
      'Y',
      'R',
      'w',
      'I',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Quarter
  Q: {
    priority: 120,
    parse: function(string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return match.ordinalNumber(string, {
            unit: 'quarter',
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return (
            match.quarter(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.quarter(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return match.quarter(string, {
            width: 'narrow',
            context: 'formatting',
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return (
            match.quarter(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.quarter(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.quarter(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'q',
      'M',
      'L',
      'w',
      'I',
      'd',
      'D',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function(string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return match.ordinalNumber(string, {
            unit: 'quarter',
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return (
            match.quarter(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.quarter(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return match.quarter(string, {
            width: 'narrow',
            context: 'standalone',
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return (
            match.quarter(string, {
              width: 'wide',
              context: 'standalone',
            }) ||
            match.quarter(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.quarter(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'Q',
      'M',
      'L',
      'w',
      'I',
      'd',
      'D',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Month
  M: {
    priority: 110,
    parse: function(string, token, match, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(
            numericPatterns.month,
            string,
            valueCallback
          );
        // 01, 02, ..., 12

        case 'MM':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback,
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return (
            match.month(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.month(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // J, F, ..., D

        case 'MMMMM':
          return match.month(string, {
            width: 'narrow',
            context: 'formatting',
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return (
            match.month(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.month(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.month(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'q',
      'Q',
      'L',
      'w',
      'I',
      'D',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Stand-alone month
  L: {
    priority: 110,
    parse: function(string, token, match, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(
            numericPatterns.month,
            string,
            valueCallback
          );
        // 01, 02, ..., 12

        case 'LL':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback,
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return (
            match.month(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.month(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
        // J, F, ..., D

        case 'LLLLL':
          return match.month(string, {
            width: 'narrow',
            context: 'standalone',
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return (
            match.month(string, {
              width: 'wide',
              context: 'standalone',
            }) ||
            match.month(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.month(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'q',
      'Q',
      'M',
      'w',
      'I',
      'D',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Local week of year
  w: {
    priority: 100,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string);

        case 'wo':
          return match.ordinalNumber(string, {
            unit: 'week',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: [
      'y',
      'R',
      'u',
      'q',
      'Q',
      'M',
      'L',
      'I',
      'd',
      'D',
      'i',
      't',
      'T',
    ],
  },
  // ISO week of year
  I: {
    priority: 100,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string);

        case 'Io':
          return match.ordinalNumber(string, {
            unit: 'week',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCISOWeek(
        setUTCISOWeek(date, value, options),
        options
      );
    },
    incompatibleTokens: [
      'y',
      'Y',
      'u',
      'q',
      'Q',
      'M',
      'L',
      'w',
      'd',
      'D',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Day of the month
  d: {
    priority: 90,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string);

        case 'do':
          return match.ordinalNumber(string, {
            unit: 'date',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();

      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'q',
      'Q',
      'w',
      'I',
      'D',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Day of year
  D: {
    priority: 90,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string);

        case 'Do':
          return match.ordinalNumber(string, {
            unit: 'date',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);

      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'Y',
      'R',
      'q',
      'Q',
      'M',
      'L',
      'w',
      'I',
      'd',
      'E',
      'i',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // Day of week
  E: {
    priority: 90,
    parse: function(string, token, match, _options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return (
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // T

        case 'EEEEE':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
          });
        // Tu

        case 'EEEEEE':
          return (
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // Tuesday

        case 'EEEE':
        default:
          return (
            match.day(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T'],
  },
  // Local day of week
  e: {
    priority: 90,
    parse: function(string, token, match, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'eo':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback,
          });
        // Tue

        case 'eee':
          return (
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // T

        case 'eeeee':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
          });
        // Tu

        case 'eeeeee':
          return (
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
        // Tuesday

        case 'eeee':
        default:
          return (
            match.day(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'y',
      'R',
      'u',
      'q',
      'Q',
      'M',
      'L',
      'I',
      'd',
      'D',
      'E',
      'i',
      'c',
      't',
      'T',
    ],
  },
  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function(string, token, match, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'co':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback,
          });
        // Tue

        case 'ccc':
          return (
            match.day(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
        // T

        case 'ccccc':
          return match.day(string, {
            width: 'narrow',
            context: 'standalone',
          });
        // Tu

        case 'cccccc':
          return (
            match.day(string, {
              width: 'short',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
        // Tuesday

        case 'cccc':
        default:
          return (
            match.day(string, {
              width: 'wide',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'abbreviated',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'short',
              context: 'standalone',
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'standalone',
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'y',
      'R',
      'u',
      'q',
      'Q',
      'M',
      'L',
      'I',
      'd',
      'D',
      'E',
      'i',
      'e',
      't',
      'T',
    ],
  },
  // ISO day of week
  i: {
    priority: 90,
    parse: function(string, token, match, _options) {
      var valueCallback = function(value) {
        if (value === 0) {
          return 7;
        }

        return value;
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, string);
        // 2nd

        case 'io':
          return match.ordinalNumber(string, {
            unit: 'day',
          });
        // Tue

        case 'iii':
          return (
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
              valueCallback: valueCallback,
            })
          );
        // T

        case 'iiiii':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback,
          });
        // Tu

        case 'iiiiii':
          return (
            match.day(string, {
              width: 'short',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
              valueCallback: valueCallback,
            })
          );
        // Tuesday

        case 'iiii':
        default:
          return (
            match.day(string, {
              width: 'wide',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'abbreviated',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'short',
              context: 'formatting',
              valueCallback: valueCallback,
            }) ||
            match.day(string, {
              width: 'narrow',
              context: 'formatting',
              valueCallback: valueCallback,
            })
          );
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function(date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: [
      'y',
      'Y',
      'u',
      'q',
      'Q',
      'M',
      'L',
      'w',
      'd',
      'D',
      'E',
      'e',
      'c',
      't',
      'T',
    ],
  },
  // AM or PM
  a: {
    priority: 80,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return (
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );

        case 'aaaaa':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting',
          });

        case 'aaaa':
        default:
          return (
            match.dayPeriod(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T'],
  },
  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return (
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );

        case 'bbbbb':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting',
          });

        case 'bbbb':
        default:
          return (
            match.dayPeriod(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T'],
  },
  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return (
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );

        case 'BBBBB':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting',
          });

        case 'BBBB':
        default:
          return (
            match.dayPeriod(string, {
              width: 'wide',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'abbreviated',
              context: 'formatting',
            }) ||
            match.dayPeriod(string, {
              width: 'narrow',
              context: 'formatting',
            })
          );
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 't', 'T'],
  },
  // Hour [1-12]
  h: {
    priority: 70,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string);

        case 'ho':
          return match.ordinalNumber(string, {
            unit: 'hour',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['H', 'K', 'k', 't', 'T'],
  },
  // Hour [0-23]
  H: {
    priority: 70,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string);

        case 'Ho':
          return match.ordinalNumber(string, {
            unit: 'hour',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T'],
  },
  // Hour [0-11]
  K: {
    priority: 70,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string);

        case 'Ko':
          return match.ordinalNumber(string, {
            unit: 'hour',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T'],
  },
  // Hour [1-24]
  k: {
    priority: 70,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string);

        case 'ko':
          return match.ordinalNumber(string, {
            unit: 'hour',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function(date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T'],
  },
  // Minute
  m: {
    priority: 60,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string);

        case 'mo':
          return match.ordinalNumber(string, {
            unit: 'minute',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T'],
  },
  // Second
  s: {
    priority: 50,
    parse: function(string, token, match, _options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string);

        case 'so':
          return match.ordinalNumber(string, {
            unit: 'second',
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T'],
  },
  // Fraction of second
  S: {
    priority: 30,
    parse: function(string, token, _match, _options) {
      var valueCallback = function(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };

      return parseNDigits(token.length, string, valueCallback);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ['t', 'T'],
  },
  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(
            timezonePatterns.basicOptionalMinutes,
            string
          );

        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'XXXX':
          return parseTimezonePattern(
            timezonePatterns.basicOptionalSeconds,
            string
          );

        case 'XXXXX':
          return parseTimezonePattern(
            timezonePatterns.extendedOptionalSeconds,
            string
          );

        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'x'],
  },
  // Timezone (ISO-8601)
  x: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(
            timezonePatterns.basicOptionalMinutes,
            string
          );

        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'xxxx':
          return parseTimezonePattern(
            timezonePatterns.basicOptionalSeconds,
            string
          );

        case 'xxxxx':
          return parseTimezonePattern(
            timezonePatterns.extendedOptionalSeconds,
            string
          );

        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'X'],
  },
  // Seconds timestamp
  t: {
    priority: 40,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [
        new Date(value * 1000),
        {
          timestampIsSet: true,
        },
      ];
    },
    incompatibleTokens: '*',
  },
  // Milliseconds timestamp
  T: {
    priority: 20,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [
        new Date(value),
        {
          timestampIsSet: true,
        },
      ];
    },
    incompatibleTokens: '*',
  },
};

var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 0001, ..., 999               |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Old `parse` was renamed to `toDate`.
 *   Now `parse` is a new function which parses a string using a provided format.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward
 *   toDate('2016-01-01')
 *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
 *   ```
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */

function parse(
  dirtyDateString,
  dirtyFormatString,
  dirtyReferenceDate,
  dirtyOptions
) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;

  if (!locale$1.match) {
    throw new RangeError('locale must contain match property');
  }

  var localeFirstWeekContainsDate =
    locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError(
      'firstWeekContainsDate must be between 1 and 7 inclusively'
    );
  }

  var localeWeekStartsOn =
    locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError(
      'weekStartsOn must be between 0 and 6 inclusively'
    );
  }

  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1, // If timezone isn't specified, it will be set to the system timezone
  };
  var setters = [
    {
      priority: TIMEZONE_UNIT_PRIORITY,
      set: dateToSystemTimezone,
      index: 0,
    },
  ];
  var i;
  var tokens = formatString
    .match(longFormattingTokensRegExp$1)
    .map(function(substring) {
      var firstCharacter = substring[0];

      if (firstCharacter === 'p' || firstCharacter === 'P') {
        var longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale$1.formatLong, subFnOptions);
      }

      return substring;
    })
    .join('')
    .match(formattingTokensRegExp$1);
  var usedTokens = [];

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (
      !options.useAdditionalWeekYearTokens &&
      isProtectedWeekYearToken(token)
    ) {
      throwProtectedError(token);
    }

    if (
      !options.useAdditionalDayOfYearTokens &&
      isProtectedDayOfYearToken(token)
    ) {
      throwProtectedError(token);
    }

    var firstCharacter = token[0];
    var parser = parsers[firstCharacter];

    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;

      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;

        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;

          if (
            incompatibleTokens.indexOf(usedToken) !== -1 ||
            usedToken === firstCharacter
          ) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }

        if (incompatibleToken) {
          throw new RangeError(
            "The format string mustn't contain `"
              .concat(incompatibleToken.fullToken, '` and `')
              .concat(token, '` at the same time')
          );
        }
      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
        throw new RangeError(
          "The format string mustn't contain `".concat(
            token,
            '` and any other token at the same time'
          )
        );
      }

      usedTokens.push({
        token: firstCharacter,
        fullToken: token,
      });
      var parseResult = parser.parse(
        dateString,
        token,
        locale$1.match,
        subFnOptions
      );

      if (!parseResult) {
        return new Date(NaN);
      }

      setters.push({
        priority: parser.priority,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length,
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
        throw new RangeError(
          'Format string contains an unescaped latin alphabet character `' +
            firstCharacter +
            '`'
        );
      } // Replace two single quote characters with one single quote character

      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString$1(token);
      } // Cut token from string, or, if string doesn't match the token, return Invalid Date

      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  } // Check if the remaining input contains something other than whitespace

  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }

  var uniquePrioritySetters = setters
    .map(function(setter) {
      return setter.priority;
    })
    .sort(function(a, b) {
      return b - a;
    })
    .filter(function(priority, index, array) {
      return array.indexOf(priority) === index;
    })
    .map(function(priority) {
      return setters
        .filter(function(setter) {
          return setter.priority === priority;
        })
        .reverse();
    })
    .map(function(setterArray) {
      return setterArray[0];
    });
  var date = toDate(dirtyReferenceDate);

  if (isNaN(date)) {
    return new Date(NaN);
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37

  var utcDate = subMilliseconds(
    date,
    getTimezoneOffsetInMilliseconds(date)
  );
  var flags = {};

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (
      setter.validate &&
      !setter.validate(utcDate, setter.value, subFnOptions)
    ) {
      return new Date(NaN);
    }

    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)

    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]); // Result is date
    } else {
      utcDate = result;
    }
  }

  return utcDate;
}

function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }

  var convertedDate = new Date(0);
  convertedDate.setFullYear(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate()
  );
  convertedDate.setHours(
    date.getUTCHours(),
    date.getUTCMinutes(),
    date.getUTCSeconds(),
    date.getUTCMilliseconds()
  );
  return convertedDate;
}

function cleanEscapedString$1(input) {
  return input
    .match(escapedStringRegExp$1)[1]
    .replace(doubleQuoteRegExp$1, "'");
}

var makeDayObject = function makeDayObject(date, _ref) {
  var startDate = _ref.startDate,
    endDate = _ref.endDate,
    hoverDate = _ref.hoverDate,
    minDate = _ref.minDate,
    maxDate = _ref.maxDate,
    month = _ref.month;
  var range = getRange(startDate, endDate, hoverDate);
  return {
    date: date,
    isToday: isToday(date),
    isWeekend: isWeekend(date),
    isLastMonth: isSameMonth(subMonths(date, 1), month),
    isNextMonth: isSameMonth(addMonths(date, 1), month),
    isStartDate: isStartDate(date, range),
    isEndDate: isEndDate(date, range),
    isWithinSelection: isWithinSelection(date, startDate, endDate),
    isPreview: isPreview(date, startDate, endDate, hoverDate),
    isDisabled: isDisabled(date, minDate, maxDate),
  };
};
var getCalendar = function getCalendar(month) {
  var weekStartsOn =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var _ref2 =
      arguments.length > 2 && arguments[2] !== undefined
        ? arguments[2]
        : {},
    _ref2$onlyMonth = _ref2.onlyMonth,
    onlyMonth = _ref2$onlyMonth === void 0 ? false : _ref2$onlyMonth,
    _ref2$hideNextMonthWe = _ref2.hideNextMonthWeek,
    hideNextMonthWeek =
      _ref2$hideNextMonthWe === void 0 ? false : _ref2$hideNextMonthWe;

  var thisMonth = getMonth(month);

  if (onlyMonth) {
    return (calendarCache[month] = _toConsumableArray(thisMonth));
  }

  if (calendarCache[month]) {
    return calendarCache[month];
  }

  var firstDay = (7 + getDay(startOfMonth(month)) - weekStartsOn) % 7;
  var lastMonth = getMonth(
    subMonths(month, 1),
    getDaysInMonth(subMonths(month, 1)) - firstDay
  );
  var fillCount = -1;

  if (hideNextMonthWeek) {
    fillCount = 35 - (thisMonth.length + firstDay);
  }

  if (fillCount < 0) {
    fillCount = 42 - (thisMonth.length + firstDay);
  }

  var nextMonth = getMonth(
    addMonths(month, 1),
    0,
    fillCount > -1 ? fillCount : 0
  );
  return (calendarCache[month] = [].concat(
    _toConsumableArray(lastMonth),
    _toConsumableArray(thisMonth),
    _toConsumableArray(nextMonth)
  ));
};
var calendarCache = {};
var dayOffset = function dayOffset(dayName) {
  var week = [
    'sunday',
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday',
  ];
  return dayName ? week.indexOf(dayName.toLowerCase()) : 0;
};
var toRange = function toRange(startDate, endDate) {
  if (isBefore(endDate, startDate)) {
    var _startDate = startDate;
    startDate = endDate;
    endDate = _startDate;
  }

  return {
    startDate: startDate,
    endDate: endDate,
  };
};

var getRange = function getRange(startDate, endDate, hoverDate) {
  if (startDate && endDate) {
    return toRange(startDate, endDate);
  } else if (startDate && hoverDate) {
    return toRange(startDate, hoverDate);
  } else {
    return toRange(startDate, startDate);
  }
};

var getWeek = function getWeek(weekStartsOn) {
  var startDay = startOfWeek(new Date(), {
    weekStartsOn: weekStartsOn,
  });
  return Array(7)
    .fill(1)
    .map(function(value, i) {
      return addDays(startDay, i);
    });
};
var getMonth = function getMonth(month) {
  var skip =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var limit = arguments.length > 2 ? arguments[2] : undefined;
  var startDay = startOfMonth(month);
  var size = getDaysInMonth(month) - skip;
  size = Math.min(Math.max(parseInt(size), 0), limit > -1 ? limit : size);
  size = size < 0 ? 0 : size;
  return Array(size)
    .fill(1)
    .map(function(value, i) {
      return addDays(startDay, i + skip);
    });
};

var isWithinSelection = function isWithinSelection(
  date,
  startDate,
  endDate
) {
  var _toRange = toRange(startDate, endDate),
    start = _toRange.startDate,
    end = _toRange.endDate;

  return startDate && endDate
    ? isValid(start) &&
        isValid(end) &&
        isWithinInterval(date, {
          start: start,
          end: end,
        })
    : false;
};

var isDisabled = function isDisabled(date, minDate, maxDate) {
  return (
    (minDate && isBefore(date, minDate)) ||
    (maxDate && isAfter(date, maxDate))
  );
};

var isStartDate = function isStartDate(date, range) {
  return range.startDate && isSameDay(date, range.startDate);
};

var isEndDate = function isEndDate(date, range) {
  return range.endDate && isSameDay(date, range.endDate);
};

var isPreview = function isPreview(date, startDate, endDate, hoverDate) {
  var _toRange2 = toRange(startDate, hoverDate),
    start = _toRange2.startDate,
    end = _toRange2.endDate;

  return (
    startDate &&
    !endDate &&
    isValid(start) &&
    isValid(end) &&
    isWithinInterval(date, {
      start: start,
      end: end,
    })
  );
};

var correctV1Format = function correctV1Format(date) {
  if (/YYYY/.test(date) && /DD/.test(date)) {
    console.warn(
      'You are using "YYYY-MM-DD" as the date_format or return_format? Please use "yyyy-MM-dd" instead!'
    );
    date = date.replace(/DD/, 'dd').replace(/YYYY/, 'yyyy');
  }

  return date;
};
var convertStringToDate = function convertStringToDate(date) {
  var _ref3 =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {},
    _ref3$date_format = _ref3.date_format,
    date_format = _ref3$date_format === void 0 ? null : _ref3$date_format;

  if (date === null) {
    return null;
  }

  var dateObject;
  dateObject = typeof date === 'string' ? parseISO(date) : toDate(date);

  if (typeof date === 'string' && date_format && !isValid(dateObject)) {
    date_format = correctV1Format(date_format);
    dateObject = parse(date, date_format, new Date());
  }

  if (!isValid(dateObject)) {
    console.warn('convertStringToDate got invalid date:', date);
    return null;
  }

  return dateObject;
};

/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the weeks added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * var result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */

function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var days = amount * 7;
  return addDays(dirtyDate, days);
}

/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * var result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */

function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

/**
 * @name setDate
 * @category Day Helpers
 * @summary Set the day of the month to the given date.
 *
 * @description
 * Set the day of the month to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} dayOfMonth - the day of the month of the new date
 * @returns {Date} the new date with the day of the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set the 30th day of the month to 1 September 2014:
 * var result = setDate(new Date(2014, 8, 1), 30)
 * //=> Tue Sep 30 2014 00:00:00
 */

function setDate(dirtyDate, dirtyDayOfMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dayOfMonth = toInteger(dirtyDayOfMonth);
  date.setDate(dayOfMonth);
  return date;
}

/**
 * @name lastDayOfMonth
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the last day of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */

function lastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(0, 0, 0, 0);
  return date;
}

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */

function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */

function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */

function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(
    differenceInCalendarMonths(dateLeft, dateRight)
  );
  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
  // If so, result must be decreased by 1 in absolute value

  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero

  return result === 0 ? 0 : result;
}

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * var result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

function _createSuper$d(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$e()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$e() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$c = {
  id: null,
  nr: null,
  month: null,
  prevBtn: true,
  nextBtn: true,
  titleFormat: 'MMMM yyyy',
  dayOfWeekFormat: 'EEEEEE',
  firstDayOfWeek: 'monday',
  hideNav: false,
  hideDays: false,
  onlyMonth: false,
  hideNextMonthWeek: false,
  noAutofocus: false,
  enableKeyboardNav: false,
  locale: locale$1,
  rtl: false,
  onHover: null,
  onSelect: null,
  onPrev: null,
  onNext: null,
  hoverDate: null,
  range: null,
  resetDate: true,
  startDate: null,
  endDate: null,
  minDate: null,
  maxDate: null,
  onKeyDown: null,
};

var DatePickerCalendar = (function(_React$PureComponent) {
  _inherits(DatePickerCalendar, _React$PureComponent);

  var _super = _createSuper$d(DatePickerCalendar);

  function DatePickerCalendar(props) {
    var _this;

    _classCallCheck(this, DatePickerCalendar);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(event) {
      if (typeof _this.props.onKeyDown === 'function') {
        _this.props.onKeyDown(event, _this._listRef, _this.props.nr);
      }
    };

    _this.buildClassNames = function(day) {
      return classnames(
        (day.isLastMonth || day.isNextMonth || day.isDisabled) &&
          'dnb-date-picker__day--inactive',
        day.isLastMonth
          ? 'dnb-date-picker__day--last-month'
          : !day.isNextMonth &&
              !day.isDisabled &&
              'dnb-date-picker__day--selectable',
        day.isStartDate && 'dnb-date-picker__day--start-date',
        day.isEndDate && 'dnb-date-picker__day--end-date',
        day.isPreview && 'dnb-date-picker__day--preview',
        day.isWithinSelection && 'dnb-date-picker__day--within-selection',
        day.isDisabled && 'dnb-date-picker__day--disabled',
        day.isToday && 'dnb-date-picker__day--today',
        day.isWeekend && 'dnb-date-picker__day--weekend',
        day.isNextMonth && 'dnb-date-picker__day--next-month'
      );
    };

    _this._listRef = React.createRef();
    _this._labelRef = React.createRef();
    return _this;
  }

  _createClass(DatePickerCalendar, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (!this.props.noAutofocus && this.props.nr === 0) {
          if (this.props.enableKeyboardNav && this._listRef.current) {
            this._listRef.current.focus({
              preventScroll: true,
            });
          } else if (this._labelRef.current) {
            this._labelRef.current.focus({
              preventScroll: true,
            });
          }
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var _this$props = this.props,
          id = _this$props.id,
          nr = _this$props.nr,
          rtl = _this$props.rtl,
          month = _this$props.month,
          range = _this$props.range,
          titleFormat = _this$props.titleFormat,
          locale = _this$props.locale,
          firstDayOfWeek = _this$props.firstDayOfWeek,
          dayOfWeekFormat = _this$props.dayOfWeekFormat,
          hideNav = _this$props.hideNav,
          hideDays = _this$props.hideDays,
          onlyMonth = _this$props.onlyMonth,
          hideNextMonthWeek = _this$props.hideNextMonthWeek,
          onPrev = _this$props.onPrev,
          onNext = _this$props.onNext,
          onSelect = _this$props.onSelect,
          resetDate = _this$props.resetDate,
          onHover = _this$props.onHover,
          prevBtn = _this$props.prevBtn,
          nextBtn = _this$props.nextBtn,
          maxDate = _this$props.maxDate,
          minDate = _this$props.minDate,
          hoverDate = _this$props.hoverDate,
          startDate = _this$props.startDate,
          endDate = _this$props.endDate;
        var selected_month = this.context.translation.DatePicker
          .selected_month;
        this.days = getCalendar(
          month || new Date(),
          dayOffset(firstDayOfWeek),
          {
            onlyMonth: onlyMonth,
            hideNextMonthWeek: hideNextMonthWeek,
          }
        ).map(function(date) {
          return makeDayObject(date, {
            startDate: startDate,
            endDate: endDate,
            hoverDate: hoverDate,
            minDate: minDate,
            maxDate: maxDate,
            month: month,
          });
        });
        return React.createElement(
          'div',
          {
            className: 'dnb-date-picker__calendar' + (rtl ? ' rtl' : ''),
          },
          !hideNav &&
            React.createElement(
              'div',
              {
                className: 'dnb-date-picker__header',
              },
              React.createElement(
                'div',
                {
                  className: 'dnb-date-picker__header__nav',
                },
                React.createElement(PrevButton, {
                  nr: nr,
                  minDate: minDate,
                  month: month,
                  locale: locale,
                  context: this.context,
                  prevBtn: prevBtn,
                  onPrev: onPrev,
                  onKeyDown: this.onKeyDownHandler,
                })
              ),
              React.createElement(
                'label',
                {
                  id: ''.concat(id, '--title'),
                  className: 'dnb-date-picker__header__title dnb-no-focus',
                  title: selected_month.replace(
                    /%s/,
                    format(month, titleFormat, {
                      locale: locale,
                    })
                  ),
                  tabIndex: '-1',
                  ref: this._labelRef,
                },
                format(month, titleFormat, {
                  locale: locale,
                })
              ),
              React.createElement(
                'div',
                {
                  className: 'dnb-date-picker__header__nav',
                },
                React.createElement(NextButton, {
                  nr: nr,
                  maxDate: maxDate,
                  month: month,
                  locale: locale,
                  context: this.context,
                  nextBtn: nextBtn,
                  onNext: onNext,
                  onKeyDown: this.onKeyDownHandler,
                })
              )
            ),
          React.createElement(
            'table',
            {
              role: 'grid',
              className: 'dnb-no-focus',
              tabIndex: '-1',
              'aria-labelledby': ''.concat(id, '--title'),
              onKeyDown: this.onKeyDownHandler,
              ref: this._listRef,
            },
            !hideDays &&
              React.createElement(
                'thead',
                {
                  'aria-hidden': true,
                },
                React.createElement(
                  'tr',
                  {
                    role: 'row',
                    className: 'dnb-date-picker__labels',
                  },
                  getWeek(dayOffset(firstDayOfWeek)).map(function(day, i) {
                    return React.createElement(
                      'th',
                      {
                        key: i,
                        role: 'columnheader',
                        className: 'dnb-date-picker__labels__day',
                      },
                      format(day, dayOfWeekFormat, {
                        locale: locale,
                      })
                    );
                  })
                )
              ),
            React.createElement(
              'tbody',
              null,
              React.createElement(
                'tr',
                {
                  role: 'row',
                  className: 'dnb-date-picker__days',
                },
                this.days.map(function(day, i) {
                  var title = format(day.date, 'PPPP', {
                    locale: locale,
                  });
                  var isDisabled =
                    day.isLastMonth || day.isNextMonth || day.isDisabled;
                  var isInactive = day.isLastMonth || day.isNextMonth;
                  var paramsCell = {};

                  if (isInactive) {
                    paramsCell['aria-hidden'] = true;
                  } else {
                    paramsCell.tabIndex = '-1';

                    if (day.isStartDate) {
                      paramsCell.id = id + '--button-start';
                    } else if (day.isEndDate) {
                      paramsCell.id = id + '--button-end';
                    }
                  }

                  var paramsButton = {};

                  if (nr === 0 ? day.isStartDate : day.isEndDate) {
                    paramsButton['aria-current'] = 'date';
                    paramsCell['aria-selected'] = true;
                  }

                  return React.createElement(
                    'td',
                    _extends(
                      {
                        key: 'day' + i,
                        role: 'gridcell',
                        className: classnames(
                          'dnb-date-picker__day dnb-no-focus',
                          _this2.buildClassNames(day)
                        ),
                      },
                      paramsCell
                    ),
                    React.createElement(
                      Button,
                      _extends(
                        {
                          size: 'medium',
                          variant: 'secondary',
                          text: format(day.date, 'd', {
                            locale: locale,
                          }),
                          bounding: true,
                          disabled: isDisabled,
                          tabIndex: isDisabled ? '0' : '-1',
                          'aria-hidden': isInactive ? true : null,
                          'aria-disabled': isDisabled,
                          'aria-label': title,
                        },
                        paramsButton,
                        {
                          onClick: function onClick(_ref) {
                            var event = _ref.event;
                            return (
                              !day.isLastMonth &&
                              !day.isNextMonth &&
                              !day.isDisabled &&
                              onSelectRange({
                                day: day,
                                range: range,
                                startDate: startDate,
                                endDate: endDate,
                                onSelect: onSelect,
                                resetDate: resetDate,
                                event: event,
                              })
                            );
                          },
                          onMouseOver: function onMouseOver() {
                            return onHoverDay({
                              day: day,
                              hoverDate: hoverDate,
                              onHover: onHover,
                            });
                          },
                          onFocus: function onFocus() {
                            return onHoverDay({
                              day: day,
                              hoverDate: hoverDate,
                              onHover: onHover,
                            });
                          },
                        }
                      )
                    )
                  );
                })
              )
            )
          )
        );
      },
    },
  ]);

  return DatePickerCalendar;
})(React.PureComponent);

DatePickerCalendar.defaultProps = defaultProps$c;
DatePickerCalendar.contextType = Context;

var PrevButton = function PrevButton(_ref2) {
  var nr = _ref2.nr,
    minDate = _ref2.minDate,
    month = _ref2.month,
    locale = _ref2.locale,
    context = _ref2.context,
    prevBtn = _ref2.prevBtn,
    onPrev = _ref2.onPrev,
    onKeyDown = _ref2.onKeyDown;

  if (!prevBtn) {
    return React.createElement(React.Fragment, null);
  }

  var disabled = minDate && isSameMonth(month, minDate);

  var onClick = function onClick() {
    return (
      onPrev &&
      !disabled &&
      onPrev({
        nr: nr,
      })
    );
  };

  var prev_month = context.translation.DatePicker.prev_month;
  var title = prev_month.replace(
    /%s/,
    format(subMonths(month, 1), 'MMMM yyyy', {
      locale: locale,
    })
  );
  return React.createElement(Button, {
    className: 'dnb-date-picker__prev' + (disabled ? ' disabled' : ''),
    icon: 'chevron_left',
    size: 'small',
    'aria-label': title,
    onClick: onClick,
    onKeyDown: onKeyDown,
  });
};
PrevButton.defaultProps = {
  minDate: null,
  onKeyDown: null,
};

var NextButton = function NextButton(_ref3) {
  var nr = _ref3.nr,
    maxDate = _ref3.maxDate,
    month = _ref3.month,
    locale = _ref3.locale,
    context = _ref3.context,
    nextBtn = _ref3.nextBtn,
    onNext = _ref3.onNext,
    onKeyDown = _ref3.onKeyDown;

  if (!nextBtn) {
    return React.createElement(React.Fragment, null);
  }

  var disabled = maxDate && isSameMonth(month, maxDate);

  var onClick = function onClick() {
    return (
      onNext &&
      !disabled &&
      onNext({
        nr: nr,
      })
    );
  };

  var next_month = context.translation.DatePicker.next_month;
  var title = next_month.replace(
    /%s/,
    format(addMonths(month, 1), 'MMMM yyyy', {
      locale: locale,
    })
  );
  return (
    nextBtn &&
    React.createElement(Button, {
      className: 'dnb-date-picker__next' + (disabled ? ' disabled' : ''),
      icon: 'chevron_right',
      size: 'small',
      'aria-label': title,
      onClick: onClick,
      onKeyDown: onKeyDown,
    })
  );
};
NextButton.defaultProps = {
  maxDate: null,
  onKeyDown: null,
};

var onSelectRange = function onSelectRange(_ref4) {
  var day = _ref4.day,
    range = _ref4.range,
    startDate = _ref4.startDate,
    endDate = _ref4.endDate,
    onSelect = _ref4.onSelect,
    resetDate = _ref4.resetDate,
    event = _ref4.event;

  if (onSelect) {
    if (!range) {
      onSelect({
        startDate: startOfDay(day.date),
        endDate: endOfDay(day.date),
        event: event,
      });
    } else if (!startDate || (resetDate && startDate && endDate)) {
      onSelect({
        startDate: startOfDay(day.date),
        endDate: null,
        event: event,
      });
    } else {
      var hasEndDate = endDate;
      var daysToStartDate = Math.abs(
        differenceInCalendarDays(startDate, day.date)
      );
      var daysToEndDate = Math.abs(
        differenceInCalendarDays(endDate, day.date)
      );

      var _range = toRange(startDate, day.date);

      if (hasEndDate && !resetDate && daysToStartDate < daysToEndDate) {
        _range = toRange(endDate, day.date);
      }

      onSelect({
        startDate: startOfDay(_range.startDate),
        endDate: endOfDay(_range.endDate),
        event: event,
      });
    }
  }
};

var onHoverDay = function onHoverDay(_ref5) {
  var day = _ref5.day,
    hoverDate = _ref5.hoverDate,
    onHover = _ref5.onHover;

  if (!isSameDay(day.date, hoverDate)) {
    onHover && onHover(day.date);
  }
};

function _createSuper$e(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$f()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$f() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$d = {
  id: null,
  month: null,
  startMonth: null,
  endMonth: null,
  startDate: null,
  endDate: null,
  minDate: null,
  maxDate: null,
  range: null,
  link: null,
  sync: null,
  onlyMonth: null,
  hideNav: null,
  enableKeyboardNav: false,
  views: null,
  onChange: null,
  onNav: null,
  onSelect: null,
};

var DatePickerRange = (function(_React$PureComponent) {
  _inherits(DatePickerRange, _React$PureComponent);

  var _super = _createSuper$e(DatePickerRange);

  _createClass(DatePickerRange, null, [
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (
            !state.views ||
            (props.sync &&
              ((props.startDate &&
                state.startDate &&
                (!isSameMonth(props.startDate, state.startDate) ||
                  !isSameYear(props.startDate, state.startDate))) ||
                (props.endDate &&
                  state.endDate &&
                  (!isSameMonth(props.endDate, state.endDate) ||
                    !isSameYear(props.endDate, state.endDate)))))
          ) {
            state.views = DatePickerRange.getViews(props, props.range);
          }

          if (typeof props.startDate !== 'undefined') {
            state.startDate = props.startDate;
          }

          if (typeof props.endDate !== 'undefined') {
            state.endDate = props.endDate;
          }

          if (typeof props.month !== 'undefined') {
            state.startMonth = props.month;
          }

          if (typeof props.startMonth !== 'undefined') {
            state.startMonth = props.startMonth;
          }

          if (typeof props.endMonth !== 'undefined') {
            state.endMonth = props.endMonth;
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function DatePickerRange(props) {
    var _this;

    _classCallCheck(this, DatePickerRange);

    _this = _super.call(this, props);
    _this.state = {
      views: null,
      startDate: null,
      endDate: null,
      startMonth: null,
      endMonth: null,
      _listenForPropChanges: true,
    };

    _this.onSelect = function() {
      var _ref =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : {};

      var e = _ref.event,
        args = _objectWithoutProperties(_ref, ['event']);

      var event = _extends({}, e);

      _this.setState(
        _extends({}, args, {
          _listenForPropChanges: false,
        }),
        function() {
          var _this$state = _this.state,
            startDate = _this$state.startDate,
            endDate = _this$state.endDate;
          _this.props.onSelect &&
            _this.props.onSelect({
              startDate: startDate,
              endDate: endDate,
              event: event,
            });

          _this.callOnChange({
            event: event,
          });
        }
      );
    };

    _this.onNext = function(_ref2) {
      var nr = _ref2.nr;

      var views = _this.state.views.map(function(c) {
        if (c.nr === nr) {
          var _this$setState;

          var month = addMonths(c.month, 1);

          _this.setState(
            ((_this$setState = {}),
            _defineProperty(
              _this$setState,
              ''.concat(nr === 0 ? 'start' : 'end', 'Month'),
              month
            ),
            _defineProperty(
              _this$setState,
              '_listenForPropChanges',
              false
            ),
            _this$setState)
          );

          return _extends({}, c, {
            month: month,
          });
        }

        if (_this.props.link && c.nr === 1) {
          var _this$setState2;

          var _month = addMonths(c.month, 1);

          _this.setState(
            ((_this$setState2 = {}),
            _defineProperty(
              _this$setState2,
              ''.concat(nr !== 0 ? 'start' : 'end', 'Month'),
              _month
            ),
            _defineProperty(
              _this$setState2,
              '_listenForPropChanges',
              false
            ),
            _this$setState2)
          );

          return _extends({}, c, {
            month: _month,
          });
        }

        return c;
      });

      _this.setState(
        {
          views: views,
          _listenForPropChanges: false,
        },
        function() {
          _this.callOnNav();
        }
      );
    };

    _this.onPrev = function(_ref3) {
      var nr = _ref3.nr;

      var views = _this.state.views.map(function(c) {
        if (c.nr === nr) {
          var _this$setState3;

          var month = subMonths(c.month, 1);

          _this.setState(
            ((_this$setState3 = {}),
            _defineProperty(
              _this$setState3,
              ''.concat(nr === 0 ? 'start' : 'end', 'Month'),
              month
            ),
            _defineProperty(
              _this$setState3,
              '_listenForPropChanges',
              false
            ),
            _this$setState3)
          );

          return _extends({}, c, {
            month: month,
          });
        }

        if (_this.props.link && c.nr === 1) {
          var _this$setState4;

          var _month2 = subMonths(c.month, 1);

          _this.setState(
            ((_this$setState4 = {}),
            _defineProperty(
              _this$setState4,
              ''.concat(nr !== 0 ? 'start' : 'end', 'Month'),
              _month2
            ),
            _defineProperty(
              _this$setState4,
              '_listenForPropChanges',
              false
            ),
            _this$setState4)
          );

          return _extends({}, c, {
            month: _month2,
          });
        }

        return c;
      });

      _this.setState(
        {
          views: views,
          _listenForPropChanges: false,
        },
        function() {
          _this.callOnNav();
        }
      );
    };

    _this.onHover = function(date) {
      _this.setState({
        hoverDate: date,
        _listenForPropChanges: false,
      });
    };

    _this.onKeyDownHandler = function(event, ref, nr) {
      if (!_this.props.enableKeyboardNav) {
        return;
      }

      var keyCode = keycode(event);

      switch (keyCode) {
        case 'left':
        case 'right':
        case 'up':
        case 'down':
        case 'enter':
        case 'space':
          event.preventDefault();
          event.persist();
          break;

        default:
          return;
      }

      var type = nr === 0 ? 'start' : 'end';

      if (!_this.props.range) {
        type = 'start';
      }

      var newDate = _this.state[''.concat(type, 'Date')];

      if (newDate) {
        switch (keyCode) {
          case 'left':
            newDate = addDays(newDate, -1);
            break;

          case 'right':
            newDate = addDays(newDate, 1);
            break;

          case 'up':
            newDate = addWeeks(newDate, -1);
            break;

          case 'down':
            newDate = addWeeks(newDate, 1);
            break;
        }
      } else {
        newDate =
          _this.state[''.concat(type, 'Month')] ||
          (_this.props.range && nr === 1
            ? addMonths(new Date(), 1)
            : new Date());
      }

      if (newDate === _this.state[''.concat(type, 'Date')]) {
        switch (keyCode) {
          case 'enter':
          case 'space':
            _this.callOnChange({
              event: event,
              hidePicker: true,
            });

            break;
        }
      } else {
        var state = {
          _listenForPropChanges: false,
        };

        var currentMonth = _this.state[''.concat(type, 'Month')];

        if (
          (currentMonth && !_this.state[''.concat(type, 'Date')]) ||
          (currentMonth &&
            Math.abs(differenceInMonths(newDate, currentMonth)) > 1)
        ) {
          if (!_this.props.range) {
            newDate = currentMonth;
          } else {
            newDate =
              nr === 0
                ? setDate(currentMonth, 1)
                : lastDayOfMonth(currentMonth);
          }
        } else if (
          currentMonth &&
          !isSameMonth(_this.state[''.concat(type, 'Date')], currentMonth)
        ) {
          state[''.concat(type, 'Month')] = newDate;
        }

        state[''.concat(type, 'Date')] = newDate;

        if (!_this.props.range) {
          state.endDate = newDate;
        } else {
          if (!_this.state.startDate) {
            state.startDate = newDate;
          }

          if (!_this.state.endDate) {
            state.endDate = newDate;
          }
        }

        if (_this.props.onlyMonth || _this.props.hideNav) {
          if (
            !isSameMonth(state.startDate, _this.state.startDate) ||
            !isSameMonth(state.endDate, _this.state.startDate)
          ) {
            return;
          }
        }

        if (
          isDisabled(
            state.startDate,
            _this.props.minDate,
            _this.props.maxDate
          ) ||
          isDisabled(
            state.endDate,
            _this.props.minDate,
            _this.props.maxDate
          )
        ) {
          return;
        }

        if (_this.props.sync) {
          state.startMonth = state.startDate;
          state.endMonth = state.endDate;
          state.views = _this.state.views;
          state.views[nr] = DatePickerRange.getViews(
            _extends({}, _this.state, {}, state),
            _this.props.range
          )[nr];
        }

        _this.setState(state, function() {
          _this.callOnChange({
            event: event,
            hidePicker: false,
          });

          if (ref && ref.current) {
            ref.current.focus({
              preventScroll: true,
            });
          }
        });
      }
    };

    if (!props.startMonth) {
      _this.state.startMonth = DatePickerRange.getFallbackMonth(props);
    }

    if (!props.endMonth) {
      _this.state.endDate =
        _this.state.startMonth || DatePickerRange.getFallbackMonth(props);
    }

    return _this;
  }

  _createClass(
    DatePickerRange,
    [
      {
        key: 'callOnChange',
        value: function callOnChange() {
          var _ref4 =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {};

          var _ref4$event = _ref4.event,
            event = _ref4$event === void 0 ? null : _ref4$event,
            args = _objectWithoutProperties(_ref4, ['event']);

          var _this$state2 = this.state,
            startDate = _this$state2.startDate,
            endDate = _this$state2.endDate,
            views = _this$state2.views;
          this.props.onChange &&
            this.props.onChange(
              {
                startDate: startDate,
                endDate: endDate,
                views: views,
                event: event,
              },
              _extends(
                {
                  hidePicker: !this.props.range,
                  callOnlyOnChangeHandler: false,
                },
                args
              )
            );
        },
      },
      {
        key: 'callOnNav',
        value: function callOnNav() {
          this.props.onNav && this.props.onNav(this.state.views);
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this2 = this;

          var _this$state3 = this.state,
            views = _this$state3.views,
            startDate = _this$state3.startDate,
            endDate = _this$state3.endDate,
            hoverDate = _this$state3.hoverDate;

          var _this$props = this.props,
            id = _this$props.id,
            props = _objectWithoutProperties(_this$props, ['id']);

          return React.createElement(
            'div',
            {
              className: 'dnb-date-picker__views',
            },
            views.map(function(calendar, i) {
              return React.createElement(
                DatePickerCalendar,
                _extends(
                  {
                    key: calendar.nr,
                    id: ''.concat(id, '-').concat(i, '-'),
                  },
                  props,
                  calendar,
                  {
                    startDate: startDate,
                    endDate: endDate,
                    hoverDate: hoverDate,
                    onSelect: _this2.onSelect,
                    onHover: _this2.onHover,
                    onPrev: _this2.onPrev,
                    onNext: _this2.onNext,
                    onKeyDown: _this2.onKeyDownHandler,
                  }
                )
              );
            })
          );
        },
      },
    ],
    [
      {
        key: 'getViews',
        value: function getViews(state, isRange) {
          return (Array.isArray(state.views)
            ? state.views
            : Array(isRange ? 2 : state.views).fill(1)
          ).map(function(view, i) {
            return _extends({}, view, {
              month: DatePickerRange.getMonth(i, state),
              nr: i,
            });
          });
        },
      },
      {
        key: 'getMonth',
        value: function getMonth(viewCount, state) {
          if ((state.startMonth || state.startDate) && viewCount === 0) {
            return state.startMonth || state.startDate;
          }

          if ((state.endMonth || state.endDate) && viewCount === 1) {
            return state.endMonth || state.endDate;
          }

          return addMonths(
            DatePickerRange.getFallbackMonth(state),
            viewCount
          );
        },
      },
      {
        key: 'getFallbackMonth',
        value: function getFallbackMonth(state) {
          return state.startMonth || state.startDate || new Date();
        },
      },
    ]
  );

  return DatePickerRange;
})(React.PureComponent);

DatePickerRange.defaultProps = defaultProps$d;

var _anInstance = function(it, Constructor, name, forbiddenField) {
  if (
    !(it instanceof Constructor) ||
    (forbiddenField !== undefined && forbiddenField in it)
  ) {
    throw TypeError(name + ': incorrect invocation!');
  }
  return it;
};

var _forOf = createCommonjsModule(function(module) {
  var BREAK = {};
  var RETURN = {};
  var exports = (module.exports = function(
    iterable,
    entries,
    fn,
    that,
    ITERATOR
  ) {
    var iterFn = ITERATOR
      ? function() {
          return iterable;
        }
      : core_getIteratorMethod(iterable);
    var f = _ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function')
      throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (_isArrayIter(iterFn))
      for (length = _toLength(iterable.length); length > index; index++) {
        result = entries
          ? f(_anObject((step = iterable[index]))[0], step[1])
          : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      }
    else
      for (
        iterator = iterFn.call(iterable);
        !(step = iterator.next()).done;

      ) {
        result = _iterCall(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
  });
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
});

var process$1 = _global.process;
var setTask = _global.setImmediate;
var clearTask = _global.clearImmediate;
var MessageChannel = _global.MessageChannel;
var Dispatch = _global.Dispatch;
var counter = 0;
var queue$1 = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function() {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue$1.hasOwnProperty(id)) {
    var fn = queue$1[id];
    delete queue$1[id];
    fn();
  }
};
var listener = function(event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue$1[++counter] = function() {
      // eslint-disable-next-line no-new-func
      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue$1[id];
  };
  // Node.js 0.8-
  if (_cof(process$1) == 'process') {
    defer = function(id) {
      process$1.nextTick(_ctx(run, id, 1));
    };
    // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function(id) {
      Dispatch.now(_ctx(run, id, 1));
    };
    // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = _ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    _global.addEventListener &&
    typeof postMessage == 'function' &&
    !_global.importScripts
  ) {
    defer = function(id) {
      _global.postMessage(id + '', '*');
    };
    _global.addEventListener('message', listener, false);
    // IE8-
  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
    defer = function(id) {
      _html.appendChild(_domCreate('script'))[
        ONREADYSTATECHANGE
      ] = function() {
        _html.removeChild(this);
        run.call(id);
      };
    };
    // Rest old browsers
  } else {
    defer = function(id) {
      setTimeout(_ctx(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask,
};

var macrotask = _task.set;
var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
var process$2 = _global.process;
var Promise$1 = _global.Promise;
var isNode = _cof(process$2) == 'process';

var _microtask = function() {
  var head, last, notify;

  var flush = function() {
    var parent, fn;
    if (isNode && (parent = process$2.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    }
    last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function() {
      process$2.nextTick(flush);
    };
    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (
    Observer &&
    !(_global.navigator && _global.navigator.standalone)
  ) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function() {
      node.data = toggle = !toggle;
    };
    // environments with maybe non-completely correct, but existent Promise
  } else if (Promise$1 && Promise$1.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise$1.resolve(undefined);
    notify = function() {
      promise.then(flush);
    };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
  } else {
    notify = function() {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(_global, flush);
    };
  }

  return function(fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    }
    last = task;
  };
};

// 25.4.1.5 NewPromiseCapability(C)

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined)
      throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = _aFunction(resolve);
  this.reject = _aFunction(reject);
}

var f$4 = function(C) {
  return new PromiseCapability(C);
};

var _newPromiseCapability = {
  f: f$4,
};

var _perform = function(exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

var navigator$1 = _global.navigator;

var _userAgent = (navigator$1 && navigator$1.userAgent) || '';

var _promiseResolve = function(C, x) {
  _anObject(C);
  if (_isObject(x) && x.constructor === C) return x;
  var promiseCapability = _newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var _redefineAll = function(target, src, safe) {
  for (var key in src) _redefine(target, key, src[key], safe);
  return target;
};

var task = _task.set;
var microtask = _microtask();

var PROMISE = 'Promise';
var TypeError$1 = _global.TypeError;
var process$3 = _global.process;
var versions$1 = process$3 && process$3.versions;
var v8 = (versions$1 && versions$1.v8) || '';
var $Promise = _global[PROMISE];
var isNode$1 = _classof(process$3) == 'process';
var empty = function() {
  /* empty */
};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = (newGenericPromiseCapability =
  _newPromiseCapability.f);

var USE_NATIVE = !!(function() {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = ((promise.constructor = {})[
      _wks('species')
    ] = function(exec) {
      exec(empty, empty);
    });
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (
      (isNode$1 || typeof PromiseRejectionEvent == 'function') &&
      promise.then(empty) instanceof FakePromise &&
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      v8.indexOf('6.6') !== 0 &&
      _userAgent.indexOf('Chrome/66') === -1
    );
  } catch (e) {
    /* empty */
  }
})();

// helpers
var isThenable = function(it) {
  var then;
  return _isObject(it) && typeof (then = it.then) == 'function'
    ? then
    : false;
};
var notify = function(promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function() {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function(reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if ((then = isThenable(result))) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function(promise) {
  task.call(_global, function() {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = _perform(function() {
        if (isNode$1) {
          process$3.emit('unhandledRejection', value, promise);
        } else if ((handler = _global.onunhandledrejection)) {
          handler({ promise: promise, reason: value });
        } else if ((console = _global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
    }
    promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function(promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function(promise) {
  task.call(_global, function() {
    var handler;
    if (isNode$1) {
      process$3.emit('rejectionHandled', promise);
    } else if ((handler = _global.onrejectionhandled)) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function(value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value)
      throw TypeError$1("Promise can't be resolved itself");
    if ((then = isThenable(value))) {
      microtask(function() {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(
            value,
            _ctx($resolve, wrapper, 1),
            _ctx($reject, wrapper, 1)
          );
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    _anInstance(this, $Promise, PROMISE, '_h');
    _aFunction(executor);
    Internal.call(this);
    try {
      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = []; // <- awaiting reactions
    this._a = undefined; // <- checked in isUnhandled reactions
    this._s = 0; // <- state
    this._d = false; // <- done
    this._v = undefined; // <- value
    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false; // <- notify
  };
  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(
        _speciesConstructor(this, $Promise)
      );
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode$1 ? process$3.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    catch: function(onRejected) {
      return this.then(undefined, onRejected);
    },
  });
  OwnPromiseCapability = function() {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = _ctx($resolve, promise, 1);
    this.reject = _ctx($reject, promise, 1);
  };
  _newPromiseCapability.f = newPromiseCapability = function(C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE, {
  Promise: $Promise,
});
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core[PROMISE];

// statics
_export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  },
});
_export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return _promiseResolve(this, x);
  },
});
_export(
  _export.S +
    _export.F *
      !(
        USE_NATIVE &&
        _iterDetect(function(iter) {
          $Promise.all(iter)['catch'](empty);
        })
      ),
  PROMISE,
  {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;
      var result = _perform(function() {
        var values = [];
        var index = 0;
        var remaining = 1;
        _forOf(iterable, false, function(promise) {
          var $index = index++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function(value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (result.e) reject(result.v);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;
      var result = _perform(function() {
        _forOf(iterable, false, function(promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (result.e) reject(result.v);
      return capability.promise;
    },
  }
);

var runtime_1 = createCommonjsModule(function(module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function(exports) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === 'function' ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || '@@iterator';
    var asyncIteratorSymbol = $Symbol.asyncIterator || '@@asyncIterator';
    var toStringTagSymbol = $Symbol.toStringTag || '@@toStringTag';

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator =
        outerFn && outerFn.prototype instanceof Generator
          ? outerFn
          : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: 'normal', arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: 'throw', arg: err };
      }
    }

    var GenStateSuspendedStart = 'suspendedStart';
    var GenStateSuspendedYield = 'suspendedYield';
    var GenStateExecuting = 'executing';
    var GenStateCompleted = 'completed';

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function() {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype =
      getProto && getProto(getProto(values([])));
    if (
      NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)
    ) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = (GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(
      IteratorPrototype
    ));
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[
      toStringTagSymbol
    ] = GeneratorFunction.displayName = 'GeneratorFunction';

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ['next', 'throw', 'return'].forEach(function(method) {
        prototype[method] = function(arg) {
          return this._invoke(method, arg);
        };
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === 'function' && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === 'GeneratorFunction'
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = 'GeneratorFunction';
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === 'throw') {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (
            value &&
            typeof value === 'object' &&
            hasOwn.call(value, '__await')
          ) {
            return PromiseImpl.resolve(value.__await).then(
              function(value) {
                invoke('next', value, resolve, reject);
              },
              function(err) {
                invoke('throw', err, resolve, reject);
              }
            );
          }

          return PromiseImpl.resolve(value).then(
            function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            },
            function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke('throw', error, resolve, reject);
            }
          );
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return (previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise
            ? previousPromise.then(
                callInvokeWithMethodAndArg,
                // Avoid propagating failures to Promises returned by later
                // invocations of the iterator.
                callInvokeWithMethodAndArg
              )
            : callInvokeWithMethodAndArg());
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(
      innerFn,
      outerFn,
      self,
      tryLocsList,
      PromiseImpl
    ) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error('Generator is already running');
        }

        if (state === GenStateCompleted) {
          if (method === 'throw') {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === 'next') {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === 'throw') {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === 'return') {
            context.abrupt('return', context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === 'normal') {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done,
            };
          } else if (record.type === 'throw') {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = 'throw';
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === 'throw') {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator['return']) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = 'return';
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === 'throw') {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = 'throw';
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method"
          );
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === 'throw') {
        context.method = 'throw';
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = 'throw';
        context.arg = new TypeError('iterator result is not an object');
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== 'return') {
          context.method = 'next';
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = 'Generator';

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return '[object Generator]';
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = 'normal';
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: 'root' }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === 'function') {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

          return (next.next = next);
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = 'next';
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (
              name.charAt(0) === 't' &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))
            ) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === 'throw') {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = 'throw';
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = 'next';
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === 'root') {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle('end');
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, 'catchLoc');
            var hasFinally = hasOwn.call(entry, 'finallyLoc');

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error('try statement without catch or finally');
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (
            entry.tryLoc <= this.prev &&
            hasOwn.call(entry, 'finallyLoc') &&
            this.prev < entry.finallyLoc
          ) {
            var finallyEntry = entry;
            break;
          }
        }

        if (
          finallyEntry &&
          (type === 'break' || type === 'continue') &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc
        ) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = 'next';
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === 'throw') {
          throw record.arg;
        }

        if (record.type === 'break' || record.type === 'continue') {
          this.next = record.arg;
        } else if (record.type === 'return') {
          this.rval = this.arg = record.arg;
          this.method = 'return';
          this.next = 'end';
        } else if (record.type === 'normal' && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      catch: function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === 'throw') {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error('illegal catch attempt');
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc,
        };

        if (this.method === 'next') {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      },
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;
  })(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports
  );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function('r', 'regeneratorRuntime = r')(runtime);
  }
});

var regenerator = runtime_1;

function asyncGeneratorStep(
  gen,
  resolve,
  reject,
  _next,
  _throw,
  key,
  arg
) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(
          gen,
          resolve,
          reject,
          _next,
          _throw,
          'next',
          value
        );
      }

      function _throw(err) {
        asyncGeneratorStep(
          gen,
          resolve,
          reject,
          _next,
          _throw,
          'throw',
          err
        );
      }

      _next(undefined);
    });
  };
}

/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * var result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */

function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * var result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */

function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month
  // if the original date was the last day of the longer month

  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * var result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */

function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

  if (isNaN(date)) {
    return new Date(NaN);
  }

  date.setFullYear(year);
  return date;
}

var reactTextMask = createCommonjsModule(function(module, exports) {
  !(function(e, t) {
    module.exports = t(React);
  })(this, function(e) {
    return (function(e) {
      function t(n) {
        if (r[n]) return r[n].exports;
        var o = (r[n] = { exports: {}, id: n, loaded: !1 });
        return (
          e[n].call(o.exports, o, o.exports, t), (o.loaded = !0), o.exports
        );
      }
      var r = {};
      return (t.m = e), (t.c = r), (t.p = ''), t(0);
    })([
      function(e, t, r) {
        function n(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function o(e, t) {
          var r = {};
          for (var n in e)
            t.indexOf(n) >= 0 ||
              (Object.prototype.hasOwnProperty.call(e, n) &&
                (r[n] = e[n]));
          return r;
        }
        function i(e, t) {
          if (!(e instanceof t))
            throw new TypeError('Cannot call a class as a function');
        }
        function a(e, t) {
          if (!e)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return !t || ('object' != typeof t && 'function' != typeof t)
            ? e
            : t;
        }
        function u(e, t) {
          if ('function' != typeof t && null !== t)
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof t
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              enumerable: !1,
              writable: !0,
              configurable: !0,
            },
          })),
            t &&
              (Object.setPrototypeOf
                ? Object.setPrototypeOf(e, t)
                : (e.__proto__ = t));
        }
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.conformToMask = void 0);
        var s =
            Object.assign ||
            function(e) {
              for (var t = 1; t < arguments.length; t++) {
                var r = arguments[t];
                for (var n in r)
                  Object.prototype.hasOwnProperty.call(r, n) &&
                    (e[n] = r[n]);
              }
              return e;
            },
          l = (function() {
            function e(e, t) {
              for (var r = 0; r < t.length; r++) {
                var n = t[r];
                (n.enumerable = n.enumerable || !1),
                  (n.configurable = !0),
                  'value' in n && (n.writable = !0),
                  Object.defineProperty(e, n.key, n);
              }
            }
            return function(t, r, n) {
              return r && e(t.prototype, r), n && e(t, n), t;
            };
          })(),
          f = r(3);
        Object.defineProperty(t, 'conformToMask', {
          enumerable: !0,
          get: function() {
            return n(f).default;
          },
        });
        var c = r(11),
          p = n(c),
          d = r(9),
          h = n(d),
          v = r(5),
          y = n(v),
          m = r(2),
          b = (function(e) {
            function t() {
              var e;
              i(this, t);
              for (
                var r = arguments.length, n = Array(r), o = 0;
                o < r;
                o++
              )
                n[o] = arguments[o];
              var u = a(
                this,
                (e = t.__proto__ || Object.getPrototypeOf(t)).call.apply(
                  e,
                  [this].concat(n)
                )
              );
              return (
                (u.setRef = u.setRef.bind(u)),
                (u.onBlur = u.onBlur.bind(u)),
                (u.onChange = u.onChange.bind(u)),
                u
              );
            }
            return (
              u(t, e),
              l(t, [
                {
                  key: 'setRef',
                  value: function(e) {
                    this.inputElement = e;
                  },
                },
                {
                  key: 'initTextMask',
                  value: function() {
                    var e = this.props,
                      t = this.props.value;
                    (this.textMaskInputElement = (0, y.default)(
                      s({ inputElement: this.inputElement }, e)
                    )),
                      this.textMaskInputElement.update(t);
                  },
                },
                {
                  key: 'componentDidMount',
                  value: function() {
                    this.initTextMask();
                  },
                },
                {
                  key: 'componentDidUpdate',
                  value: function(e) {
                    var t = this.props,
                      r = t.value,
                      n = t.pipe,
                      o = t.mask,
                      i = t.guide,
                      a = t.placeholderChar,
                      u = t.showMask,
                      s = { guide: i, placeholderChar: a, showMask: u },
                      l =
                        'function' == typeof n &&
                        'function' == typeof e.pipe
                          ? n.toString() !== e.pipe.toString()
                          : ((0, m.isNil)(n) && !(0, m.isNil)(e.pipe)) ||
                            (!(0, m.isNil)(n) && (0, m.isNil)(e.pipe)),
                      f = o.toString() !== e.mask.toString(),
                      c =
                        Object.keys(s).some(function(t) {
                          return s[t] !== e[t];
                        }) ||
                        f ||
                        l,
                      p = r !== this.inputElement.value;
                    (p || c) && this.initTextMask();
                  },
                },
                {
                  key: 'render',
                  value: function e() {
                    var t = this.props,
                      e = t.render,
                      r = o(t, ['render']);
                    return (
                      delete r.mask,
                      delete r.guide,
                      delete r.pipe,
                      delete r.placeholderChar,
                      delete r.keepCharPositions,
                      delete r.value,
                      delete r.onBlur,
                      delete r.onChange,
                      delete r.showMask,
                      e(
                        this.setRef,
                        s(
                          {
                            onBlur: this.onBlur,
                            onChange: this.onChange,
                            defaultValue: this.props.value,
                          },
                          r
                        )
                      )
                    );
                  },
                },
                {
                  key: 'onChange',
                  value: function(e) {
                    this.textMaskInputElement.update(),
                      'function' == typeof this.props.onChange &&
                        this.props.onChange(e);
                  },
                },
                {
                  key: 'onBlur',
                  value: function(e) {
                    'function' == typeof this.props.onBlur &&
                      this.props.onBlur(e);
                  },
                },
              ]),
              t
            );
          })(p.default.PureComponent);
        (t.default = b),
          (b.propTypes = {
            mask: h.default.oneOfType([
              h.default.array,
              h.default.func,
              h.default.bool,
              h.default.shape({
                mask: h.default.oneOfType([
                  h.default.array,
                  h.default.func,
                ]),
                pipe: h.default.func,
              }),
            ]).isRequired,
            guide: h.default.bool,
            value: h.default.oneOfType([
              h.default.string,
              h.default.number,
            ]),
            pipe: h.default.func,
            placeholderChar: h.default.string,
            keepCharPositions: h.default.bool,
            showMask: h.default.bool,
          }),
          (b.defaultProps = {
            render: function(e, t) {
              return p.default.createElement('input', s({ ref: e }, t));
            },
          });
      },
      function(e, t) {
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.placeholderChar = '_'),
          (t.strFunction = 'function');
      },
      function(e, t, r) {
        function n() {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : f,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : l.placeholderChar;
          if (!o(e))
            throw new Error(
              'Text-mask:convertMaskToPlaceholder; The mask property must be an array.'
            );
          if (e.indexOf(t) !== -1)
            throw new Error(
              'Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n' +
                ('The placeholder character that was received is: ' +
                  JSON.stringify(t) +
                  '\n\n') +
                ('The mask that was received is: ' + JSON.stringify(e))
            );
          return e
            .map(function(e) {
              return e instanceof RegExp ? t : e;
            })
            .join('');
        }
        function o(e) {
          return (Array.isArray && Array.isArray(e)) || e instanceof Array;
        }
        function i(e) {
          return 'string' == typeof e || e instanceof String;
        }
        function a(e) {
          return 'number' == typeof e && void 0 === e.length && !isNaN(e);
        }
        function u(e) {
          return 'undefined' == typeof e || null === e;
        }
        function s(e) {
          for (var t = [], r = void 0; (r = e.indexOf(c)), r !== -1; )
            t.push(r), e.splice(r, 1);
          return { maskWithoutCaretTraps: e, indexes: t };
        }
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.convertMaskToPlaceholder = n),
          (t.isArray = o),
          (t.isString = i),
          (t.isNumber = a),
          (t.isNil = u),
          (t.processCaretTraps = s);
        var l = r(1),
          f = [],
          c = '[]';
      },
      function(e, t, r) {
        function n() {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : s,
            t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : u,
            r =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : {};
          if (!(0, i.isArray)(t)) {
            if (
              ('undefined' == typeof t ? 'undefined' : o(t)) !==
              a.strFunction
            )
              throw new Error(
                'Text-mask:conformToMask; The mask property must be an array.'
              );
            (t = t(e, r)),
              (t = (0, i.processCaretTraps)(t).maskWithoutCaretTraps);
          }
          var n = r.guide,
            l = void 0 === n || n,
            f = r.previousConformedValue,
            c = void 0 === f ? s : f,
            p = r.placeholderChar,
            d = void 0 === p ? a.placeholderChar : p,
            h = r.placeholder,
            v = void 0 === h ? (0, i.convertMaskToPlaceholder)(t, d) : h,
            y = r.currentCaretPosition,
            m = r.keepCharPositions,
            b = l === !1 && void 0 !== c,
            g = e.length,
            k = c.length,
            C = v.length,
            O = t.length,
            T = g - k,
            P = T > 0,
            x = y + (P ? -T : 0),
            w = x + Math.abs(T);
          if (m === !0 && !P) {
            for (var S = s, _ = x; _ < w; _++) v[_] === d && (S += d);
            e = e.slice(0, x) + S + e.slice(x, g);
          }
          for (
            var M = e.split(s).map(function(e, t) {
                return { char: e, isNew: t >= x && t < w };
              }),
              j = g - 1;
            j >= 0;
            j--
          ) {
            var E = M[j].char;
            if (E !== d) {
              var R = j >= x && k === O;
              E === v[R ? j - T : j] && M.splice(j, 1);
            }
          }
          var V = s,
            N = !1;
          e: for (var A = 0; A < C; A++) {
            var B = v[A];
            if (B === d) {
              if (M.length > 0)
                for (; M.length > 0; ) {
                  var I = M.shift(),
                    F = I.char,
                    q = I.isNew;
                  if (F === d && b !== !0) {
                    V += d;
                    continue e;
                  }
                  if (t[A].test(F)) {
                    if (m === !0 && q !== !1 && c !== s && l !== !1 && P) {
                      for (var D = M.length, L = null, W = 0; W < D; W++) {
                        var J = M[W];
                        if (J.char !== d && J.isNew === !1) break;
                        if (J.char === d) {
                          L = W;
                          break;
                        }
                      }
                      null !== L ? ((V += F), M.splice(L, 1)) : A--;
                    } else V += F;
                    continue e;
                  }
                  N = !0;
                }
              b === !1 && (V += v.substr(A, C));
              break;
            }
            V += B;
          }
          if (b && P === !1) {
            for (var U = null, H = 0; H < V.length; H++)
              v[H] === d && (U = H);
            V = null !== U ? V.substr(0, U + 1) : s;
          }
          return { conformedValue: V, meta: { someCharsRejected: N } };
        }
        Object.defineProperty(t, '__esModule', { value: !0 });
        var o =
          'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
            ? function(e) {
                return typeof e;
              }
            : function(e) {
                return e &&
                  'function' == typeof Symbol &&
                  e.constructor === Symbol &&
                  e !== Symbol.prototype
                  ? 'symbol'
                  : typeof e;
              };
        t.default = n;
        var i = r(2),
          a = r(1),
          u = [],
          s = '';
      },
      function(e, t) {
        function r(e) {
          var t = e.previousConformedValue,
            r = void 0 === t ? o : t,
            i = e.previousPlaceholder,
            a = void 0 === i ? o : i,
            u = e.currentCaretPosition,
            s = void 0 === u ? 0 : u,
            l = e.conformedValue,
            f = e.rawValue,
            c = e.placeholderChar,
            p = e.placeholder,
            d = e.indexesOfPipedChars,
            h = void 0 === d ? n : d,
            v = e.caretTrapIndexes,
            y = void 0 === v ? n : v;
          if (0 === s || !f.length) return 0;
          var m = f.length,
            b = r.length,
            g = p.length,
            k = l.length,
            C = m - b,
            O = C > 0,
            T = 0 === b,
            P = C > 1 && !O && !T;
          if (P) return s;
          var x = O && (r === l || l === p),
            w = 0,
            S = void 0,
            _ = void 0;
          if (x) w = s - C;
          else {
            var M = l.toLowerCase(),
              j = f.toLowerCase(),
              E = j.substr(0, s).split(o),
              R = E.filter(function(e) {
                return M.indexOf(e) !== -1;
              });
            _ = R[R.length - 1];
            var V = a
                .substr(0, R.length)
                .split(o)
                .filter(function(e) {
                  return e !== c;
                }).length,
              N = p
                .substr(0, R.length)
                .split(o)
                .filter(function(e) {
                  return e !== c;
                }).length,
              A = N !== V,
              B =
                void 0 !== a[R.length - 1] &&
                void 0 !== p[R.length - 2] &&
                a[R.length - 1] !== c &&
                a[R.length - 1] !== p[R.length - 1] &&
                a[R.length - 1] === p[R.length - 2];
            !O &&
              (A || B) &&
              V > 0 &&
              p.indexOf(_) > -1 &&
              void 0 !== f[s] &&
              ((S = !0), (_ = f[s]));
            for (
              var I = h.map(function(e) {
                  return M[e];
                }),
                F = I.filter(function(e) {
                  return e === _;
                }).length,
                q = R.filter(function(e) {
                  return e === _;
                }).length,
                D = p
                  .substr(0, p.indexOf(c))
                  .split(o)
                  .filter(function(e, t) {
                    return e === _ && f[t] !== e;
                  }).length,
                L = D + q + F + (S ? 1 : 0),
                W = 0,
                J = 0;
              J < k;
              J++
            ) {
              var U = M[J];
              if (((w = J + 1), U === _ && W++, W >= L)) break;
            }
          }
          if (O) {
            for (var H = w, Y = w; Y <= g; Y++)
              if (
                (p[Y] === c && (H = Y),
                p[Y] === c || y.indexOf(Y) !== -1 || Y === g)
              )
                return H;
          } else if (S) {
            for (var z = w - 1; z >= 0; z--)
              if (l[z] === _ || y.indexOf(z) !== -1 || 0 === z) return z;
          } else
            for (var G = w; G >= 0; G--)
              if (p[G - 1] === c || y.indexOf(G) !== -1 || 0 === G)
                return G;
        }
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.default = r);
        var n = [],
          o = '';
      },
      function(e, t, r) {
        function n(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function o(e) {
          var t = {
            previousConformedValue: void 0,
            previousPlaceholder: void 0,
          };
          return {
            state: t,
            update: function(r) {
              var n =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : e,
                o = n.inputElement,
                l = n.mask,
                c = n.guide,
                y = n.pipe,
                b = n.placeholderChar,
                g = void 0 === b ? h.placeholderChar : b,
                k = n.keepCharPositions,
                C = void 0 !== k && k,
                O = n.showMask,
                T = void 0 !== O && O;
              if (
                ('undefined' == typeof r && (r = o.value),
                r !== t.previousConformedValue)
              ) {
                ('undefined' == typeof l ? 'undefined' : s(l)) === m &&
                  void 0 !== l.pipe &&
                  void 0 !== l.mask &&
                  ((y = l.pipe), (l = l.mask));
                var P = void 0,
                  x = void 0;
                if (
                  (l instanceof Array &&
                    (P = (0, d.convertMaskToPlaceholder)(l, g)),
                  l !== !1)
                ) {
                  var w = a(r),
                    S = o.selectionEnd,
                    _ = t.previousConformedValue,
                    M = t.previousPlaceholder,
                    j = void 0;
                  if (
                    ('undefined' == typeof l ? 'undefined' : s(l)) ===
                    h.strFunction
                  ) {
                    if (
                      ((x = l(w, {
                        currentCaretPosition: S,
                        previousConformedValue: _,
                        placeholderChar: g,
                      })),
                      x === !1)
                    )
                      return;
                    var E = (0, d.processCaretTraps)(x),
                      R = E.maskWithoutCaretTraps,
                      V = E.indexes;
                    (x = R),
                      (j = V),
                      (P = (0, d.convertMaskToPlaceholder)(x, g));
                  } else x = l;
                  var N = {
                      previousConformedValue: _,
                      guide: c,
                      placeholderChar: g,
                      pipe: y,
                      placeholder: P,
                      currentCaretPosition: S,
                      keepCharPositions: C,
                    },
                    A = (0, p.default)(w, x, N),
                    B = A.conformedValue,
                    I =
                      ('undefined' == typeof y ? 'undefined' : s(y)) ===
                      h.strFunction,
                    F = {};
                  I &&
                    ((F = y(B, u({ rawValue: w }, N))),
                    F === !1
                      ? (F = { value: _, rejected: !0 })
                      : (0, d.isString)(F) && (F = { value: F }));
                  var q = I ? F.value : B,
                    D = (0, f.default)({
                      previousConformedValue: _,
                      previousPlaceholder: M,
                      conformedValue: q,
                      placeholder: P,
                      rawValue: w,
                      currentCaretPosition: S,
                      placeholderChar: g,
                      indexesOfPipedChars: F.indexesOfPipedChars,
                      caretTrapIndexes: j,
                    }),
                    L = q === P && 0 === D,
                    W = T ? P : v,
                    J = L ? W : q;
                  (t.previousConformedValue = J),
                    (t.previousPlaceholder = P),
                    o.value !== J && ((o.value = J), i(o, D));
                }
              }
            },
          };
        }
        function i(e, t) {
          document.activeElement === e &&
            (b
              ? g(function() {
                  return e.setSelectionRange(t, t, y);
                }, 0)
              : e.setSelectionRange(t, t, y));
        }
        function a(e) {
          if ((0, d.isString)(e)) return e;
          if ((0, d.isNumber)(e)) return String(e);
          if (void 0 === e || null === e) return v;
          throw new Error(
            "The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " +
              JSON.stringify(e)
          );
        }
        Object.defineProperty(t, '__esModule', { value: !0 });
        var u =
            Object.assign ||
            function(e) {
              for (var t = 1; t < arguments.length; t++) {
                var r = arguments[t];
                for (var n in r)
                  Object.prototype.hasOwnProperty.call(r, n) &&
                    (e[n] = r[n]);
              }
              return e;
            },
          s =
            'function' == typeof Symbol &&
            'symbol' == typeof Symbol.iterator
              ? function(e) {
                  return typeof e;
                }
              : function(e) {
                  return e &&
                    'function' == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? 'symbol'
                    : typeof e;
                };
        t.default = o;
        var l = r(4),
          f = n(l),
          c = r(3),
          p = n(c),
          d = r(2),
          h = r(1),
          v = '',
          y = 'none',
          m = 'object',
          b =
            'undefined' != typeof navigator &&
            /Android/i.test(navigator.userAgent),
          g =
            'undefined' != typeof requestAnimationFrame
              ? requestAnimationFrame
              : setTimeout;
      },
      function(e, t) {
        function r(e) {
          return function() {
            return e;
          };
        }
        var n = function() {};
        (n.thatReturns = r),
          (n.thatReturnsFalse = r(!1)),
          (n.thatReturnsTrue = r(!0)),
          (n.thatReturnsNull = r(null)),
          (n.thatReturnsThis = function() {
            return this;
          }),
          (n.thatReturnsArgument = function(e) {
            return e;
          }),
          (e.exports = n);
      },
      function(e, t, r) {
        function n(e, t, r, n, i, a, u, s) {
          if (!e) {
            var l;
            if (void 0 === t)
              l = new Error(
                'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'
              );
            else {
              var f = [r, n, i, a, u, s],
                c = 0;
              (l = new Error(
                t.replace(/%s/g, function() {
                  return f[c++];
                })
              )),
                (l.name = 'Invariant Violation');
            }
            throw ((l.framesToPop = 1), l);
          }
        }
        e.exports = n;
      },
      function(e, t, r) {
        var n = r(6),
          o = r(7),
          i = r(10);
        e.exports = function() {
          function e(e, t, r, n, a, u) {
            u !== i &&
              o(
                !1,
                'Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'
              );
          }
          function t() {
            return e;
          }
          e.isRequired = e;
          var r = {
            array: e,
            bool: e,
            func: e,
            number: e,
            object: e,
            string: e,
            symbol: e,
            any: e,
            arrayOf: t,
            element: e,
            instanceOf: t,
            node: e,
            objectOf: t,
            oneOf: t,
            oneOfType: t,
            shape: t,
            exact: t,
          };
          return (r.checkPropTypes = n), (r.PropTypes = r), r;
        };
      },
      function(e, t, r) {
        e.exports = r(8)();
      },
      function(e, t) {
        var r = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
        e.exports = r;
      },
      function(t, r) {
        t.exports = e;
      },
    ]);
  });
});

var MaskedInput = unwrapExports(reactTextMask);
var reactTextMask_1 = reactTextMask.reactTextMask;

function _createSuper$f(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$g()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$g() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$e = {
  id: null,
  title: null,
  selectedDateTitle: null,
  maskOrder: 'dd/mm/yyyy',
  maskPlaceholder: 'dd/mm/åååå',
  separatorRexExp: /[-/ ]/g,
  submitAttributes: null,
  range: null,
  status: null,
  status_state: 'error',
  minDate: null,
  maxDate: null,
  input_element: null,
  disabled: null,
  opened: false,
  showInput: null,
  onChange: null,
  onSubmit: null,
  onSubmitButtonFocus: null,
  onFocus: null,
};

var _ref6 = React.createElement(
  'span',
  {
    className: 'dnb-date-picker--separator',
    'aria-hidden': true,
  },
  ' – '
);

var DatePickerInput = (function(_React$PureComponent) {
  _inherits(DatePickerInput, _React$PureComponent);

  var _super = _createSuper$f(DatePickerInput);

  function DatePickerInput(props) {
    var _this;

    _classCallCheck(this, DatePickerInput);

    _this = _super.call(this, props);
    _this.state = {
      _listenForPropChanges: true,
      focusState: 'virgin',
      startDate: null,
      endDate: null,
      _startDay: null,
      _startMonth: null,
      _startYear: null,
      _endDay: null,
      _endMonth: null,
      _endYear: null,
    };

    _this.onKeyUpHandler = function() {
      if (_this.props.showInput) {
        return;
      }

      if (_this._startDayRef.current) {
        setTimeout(function() {
          try {
            var elem = _this._startDayRef.current.inputElement;
            elem.focus();
            elem.select();
          } catch (e) {
            console.warn(e);
          }
        }, 100);
      }

      if (typeof _this.props.onSubmitButtonFocus === 'function') {
        _this.props.onSubmitButtonFocus();
      }

      _this.onKeyUpHandler = null;
    };

    _this.callOnChange = function(_ref) {
      var startDate = _ref.startDate,
        endDate = _ref.endDate,
        event = _ref.event;
      var onState =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      if (
        typeof startDate !== 'undefined' &&
        DatePickerInput.isValidDate(startDate)
      ) {
        _this.setState(
          {
            startDate: startDate,
            _listenForPropChanges: false,
          },
          onState
        );

        if (typeof _this.props.onChange === 'function') {
          _this.props.onChange({
            startDate: startDate,
            event: event,
          });
        }
      }

      if (
        typeof endDate !== 'undefined' &&
        DatePickerInput.isValidDate(endDate)
      ) {
        _this.setState(
          {
            endDate: endDate,
            _listenForPropChanges: false,
          },
          onState
        );

        if (typeof _this.props.onChange === 'function') {
          _this.props.onChange({
            endDate: endDate,
            event: event,
          });
        }
      }
    };

    _this.prepareCounting = (function() {
      var _ref3 = _asyncToGenerator(
        regenerator.mark(function _callee(_ref2) {
          var _this$callOnChange;

          var keyCode,
            target,
            event,
            isDate,
            isInRange,
            date,
            count,
            endPos;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch ((_context.prev = _context.next)) {
                case 0:
                  (keyCode = _ref2.keyCode),
                    (target = _ref2.target),
                    (event = _ref2.event);
                  isDate = target
                    .getAttribute('class')
                    .match(/__input--([day|month|year]+)($|\s)/)[1];
                  isInRange = target
                    .getAttribute('id')
                    .match(/[0-9]-([start|end]+)-/)[1];
                  date =
                    isInRange === 'start'
                      ? _this.state.startDate
                      : _this.state.endDate;

                  if (date) {
                    _context.next = 6;
                    break;
                  }

                  return _context.abrupt('return');

                case 6:
                  count = keyCode === 'up' ? 1 : -1;

                  if (!(keyCode === 'up' || keyCode === 'down')) {
                    _context.next = 17;
                    break;
                  }

                  _context.t0 = isDate;
                  _context.next =
                    _context.t0 === 'day'
                      ? 11
                      : _context.t0 === 'month'
                      ? 13
                      : _context.t0 === 'year'
                      ? 15
                      : 17;
                  break;

                case 11:
                  date = addDays(date, count);
                  return _context.abrupt('break', 17);

                case 13:
                  date = addMonths(date, count);
                  return _context.abrupt('break', 17);

                case 15:
                  date = addYears(date, count);
                  return _context.abrupt('break', 17);

                case 17:
                  _this.callOnChange(
                    ((_this$callOnChange = {}),
                    _defineProperty(
                      _this$callOnChange,
                      isInRange === 'start' ? 'startDate' : 'endDate',
                      date
                    ),
                    _defineProperty(_this$callOnChange, 'event', event),
                    _this$callOnChange)
                  );

                  _context.next = 20;
                  return wait(1);

                case 20:
                  endPos = target.value.length;
                  target.focus();
                  target.setSelectionRange(0, endPos);

                case 23:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee);
        })
      );

      return function(_x) {
        return _ref3.apply(this, arguments);
      };
    })();

    _this.onFocusHandler = function(event) {
      try {
        var target = event.target;
        var endPos = target.value.length;
        target.focus();
        target.setSelectionRange(0, endPos);
      } catch (e) {
        console.warn(e);
      }
    };

    _this.onKeyDownHandler = (function() {
      var _ref4 = _asyncToGenerator(
        regenerator.mark(function _callee2(event) {
          var keyCode,
            target,
            size,
            firstSelectionStart,
            secondSelectionStart,
            isValid,
            index,
            nextSibling,
            prevSibling,
            endPos;
          return regenerator.wrap(
            function _callee2$(_context2) {
              while (1) {
                switch ((_context2.prev = _context2.next)) {
                  case 0:
                    keyCode = keycode(event);
                    target = event.target;
                    _context2.t0 = keyCode;
                    _context2.next =
                      _context2.t0 === 'up'
                        ? 5
                        : _context2.t0 === 'down'
                        ? 5
                        : _context2.t0 === 'tab'
                        ? 9
                        : 10;
                    break;

                  case 5:
                    event.persist();
                    event.preventDefault();

                    _this.prepareCounting({
                      event: event,
                      keyCode: keyCode,
                      target: target,
                    });

                    return _context2.abrupt('return', false);

                  case 9:
                    return _context2.abrupt('return', false);

                  case 10:
                    size = parseFloat(target.getAttribute('size'));
                    firstSelectionStart = target.selectionStart;
                    _context2.next = 14;
                    return wait(1);

                  case 14:
                    secondSelectionStart = target.selectionStart;
                    isValid = /[0-9]/.test(keyCode);
                    index = _this.refList.findIndex(function(_ref5) {
                      var current = _ref5.current;
                      return current.inputElement === target;
                    });

                    if (
                      !(
                        index < _this.refList.length - 1 &&
                        ((secondSelectionStart === size &&
                          isValid &&
                          keyCode !== 'left' &&
                          keyCode !== 'backspace') ||
                          (firstSelectionStart === size &&
                            keyCode === 'right'))
                      )
                    ) {
                      _context2.next = 30;
                      break;
                    }

                    _context2.prev = 18;

                    if (_this.refList[index + 1].current) {
                      _context2.next = 21;
                      break;
                    }

                    return _context2.abrupt('return');

                  case 21:
                    nextSibling =
                      _this.refList[index + 1].current.inputElement;

                    if (nextSibling) {
                      nextSibling.focus();
                      nextSibling.setSelectionRange(0, 0);
                    }

                    _context2.next = 28;
                    break;

                  case 25:
                    _context2.prev = 25;
                    _context2.t1 = _context2['catch'](18);
                    console.warn(_context2.t1);

                  case 28:
                    _context2.next = 36;
                    break;

                  case 30:
                    if (!(firstSelectionStart === 0 && index > 0)) {
                      _context2.next = 36;
                      break;
                    }

                    _context2.t2 = keyCode;
                    _context2.next =
                      _context2.t2 === 'left'
                        ? 34
                        : _context2.t2 === 'backspace'
                        ? 34
                        : 36;
                    break;

                  case 34:
                    try {
                      prevSibling =
                        _this.refList[index - 1].current.inputElement;

                      if (prevSibling) {
                        endPos = prevSibling.value.length;
                        prevSibling.focus();
                        prevSibling.setSelectionRange(endPos, endPos);
                      }
                    } catch (e) {
                      console.warn(e);
                    }

                    return _context2.abrupt('break', 36);

                  case 36:
                  case 'end':
                    return _context2.stop();
                }
              }
            },
            _callee2,
            null,
            [[18, 25]]
          );
        })
      );

      return function(_x2) {
        return _ref4.apply(this, arguments);
      };
    })();

    _this.set_startDay = function(event) {
      _this.setDate(event, 2, 'start', 'Day', setDate);
    };

    _this.set_startMonth = function(event) {
      _this.setDate(event, 2, 'start', 'Month', setMonth);
    };

    _this.set_startYear = function(event) {
      _this.setDate(event, 4, 'start', 'Year', setYear);
    };

    _this.set_endDay = function(event) {
      _this.setDate(event, 2, 'end', 'Day', setDate);
    };

    _this.set_endMonth = function(event) {
      _this.setDate(event, 2, 'end', 'Month', setMonth);
    };

    _this.set_endYear = function(event) {
      _this.setDate(event, 4, 'end', 'Year', setYear);
    };

    _this.setDate = function(event, count, mode, type, fn) {
      event.persist();

      try {
        var _this$setState;

        var value = event.target.value;

        _this.setState(
          ((_this$setState = {}),
          _defineProperty(
            _this$setState,
            '_'.concat(mode).concat(type),
            value
          ),
          _defineProperty(_this$setState, '_listenForPropChanges', false),
          _this$setState)
        );

        if (
          parseFloat(value) > 0 &&
          new RegExp('[0-9]{'.concat(count, '}')).test(value)
        ) {
          var _this$callOnChange2;

          value = parseFloat(value);

          if (type === 'Month') {
            value--;
          }

          var year = parseFloat(_this.state['_'.concat(mode, 'Year')]);
          var month = parseFloat(_this.state['_'.concat(mode, 'Month')]);
          var day = parseFloat(_this.state['_'.concat(mode, 'Day')]);
          var date = fn(
            _this.state[''.concat(mode, 'Date')] ||
              new Date(year || 1111, month > 0 ? month - 1 : 1, day || 1),
            value
          );

          _this.callOnChange(
            ((_this$callOnChange2 = {}),
            _defineProperty(
              _this$callOnChange2,
              ''.concat(mode, 'Date'),
              date
            ),
            _defineProperty(_this$callOnChange2, 'event', event),
            _this$callOnChange2)
          );
        }
      } catch (e) {
        console.warn(e);
      }
    };

    _this.renderInputElement = function(params) {
      var _this$props = _this.props,
        id = _this$props.id,
        range = _this$props.range;
      _this.refList = [];

      var startDateList = _this.generateDateList(params, 'start');

      var endDateList = _this.generateDateList(params, 'end');

      return React.createElement(
        'span',
        {
          id: ''.concat(id, '-input'),
          className: 'dnb-date-picker__input__wrapper',
        },
        startDateList,
        range && _ref6,
        range && endDateList
      );
    };

    var separators = props.maskOrder.match(props.separatorRexExp);
    _this.maskList = props.maskOrder
      .split(props.separatorRexExp)
      .reduce(function(acc, cur) {
        acc.push(cur);

        if (separators.length > 0) {
          acc.push(separators.shift());
        }

        return acc;
      }, []);
    _this._startDayRef = React.createRef();
    _this._startMonthRef = React.createRef();
    _this._startYearRef = React.createRef();
    _this._endDayRef = React.createRef();
    _this._endMonthRef = React.createRef();
    _this._endYearRef = React.createRef();
    return _this;
  }

  _createClass(
    DatePickerInput,
    [
      {
        key: 'generateDateList',
        value: function generateDateList(params, mode) {
          var _this2 = this;

          return this.maskList.map(function(value, i) {
            var state = value.slice(0, 1);

            var index = _this2.props.maskOrder.indexOf(value);

            var placeholderChar = _this2.props.maskPlaceholder[index];
            var _this2$props = _this2.props,
              input_element = _this2$props.input_element,
              separatorRexExp = _this2$props.separatorRexExp,
              range = _this2$props.range;
            var _this2$context$transl =
                _this2.context.translation.DatePicker,
              day = _this2$context$transl.day,
              month = _this2$context$transl.month,
              year = _this2$context$transl.year;
            var rangeLabe = range
              ? ''.concat(_this2.context.translation.DatePicker[mode], ' ')
              : '';

            if (!separatorRexExp.test(value)) {
              if (!input_element) {
                params = _extends({}, params, {
                  onKeyDown: _this2.onKeyDownHandler,
                  onMouseUp: selectInput,
                  onFocus: function onFocus(e) {
                    _this2.onFocusHandler(e);

                    _this2.setState({
                      focusState: 'focus',
                      _listenForPropChanges: false,
                    });
                  },
                  onBlur: function onBlur() {
                    _this2.setState({
                      focusState: 'blur',
                      _listenForPropChanges: false,
                    });
                  },
                  placeholderChar: placeholderChar,
                });
              }

              var _Input =
                typeof input_element === 'string'
                  ? input_element
                  : InputElement;

              switch (state) {
                case 'd':
                  _this2.refList.push(_this2['_'.concat(mode, 'DayRef')]);

                  return React.createElement(
                    React.Fragment,
                    {
                      key: 'dd' + i,
                    },
                    React.createElement(
                      _Input,
                      _extends({}, params, {
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-day'),
                        key: 'di' + i,
                        className: classnames(
                          'dnb-date-picker__input dnb-date-picker__input--day',
                          params.className
                        ),
                        size: '2',
                        mask: [/[0-3]/, /[0-9]/],
                        ref: _this2['_'.concat(mode, 'DayRef')],
                        onChange: _this2['set_'.concat(mode, 'Day')],
                        value: _this2.state['_'.concat(mode, 'Day')],
                        'aria-labelledby': ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-day-label'),
                      })
                    ),
                    React.createElement(
                      'label',
                      {
                        key: 'dl' + i,
                        hidden: true,
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-day-label'),
                      },
                      rangeLabe + day
                    )
                  );

                case 'm':
                  _this2.refList.push(
                    _this2['_'.concat(mode, 'MonthRef')]
                  );

                  return React.createElement(
                    React.Fragment,
                    {
                      key: 'mm' + i,
                    },
                    React.createElement(
                      _Input,
                      _extends({}, params, {
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-month'),
                        key: 'mi' + i,
                        className: classnames(
                          'dnb-date-picker__input dnb-date-picker__input--month',
                          params.className
                        ),
                        size: '2',
                        mask: [/[0-1]/, /[0-9]/],
                        ref: _this2['_'.concat(mode, 'MonthRef')],
                        onChange: _this2['set_'.concat(mode, 'Month')],
                        value: _this2.state['_'.concat(mode, 'Month')],
                        'aria-labelledby': ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-month-label'),
                      })
                    ),
                    React.createElement(
                      'label',
                      {
                        key: 'ml' + i,
                        hidden: true,
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-month-label'),
                      },
                      rangeLabe + month
                    )
                  );

                case 'y':
                  _this2.refList.push(_this2['_'.concat(mode, 'YearRef')]);

                  return React.createElement(
                    React.Fragment,
                    {
                      key: 'yy' + i,
                    },
                    React.createElement(
                      _Input,
                      _extends({}, params, {
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-year'),
                        key: 'yi' + i,
                        className: classnames(
                          'dnb-date-picker__input dnb-date-picker__input--year',
                          params.className
                        ),
                        size: '4',
                        mask: [/[1-2]/, /[0-9]/, /[0-9]/, /[0-9]/],
                        ref: _this2['_'.concat(mode, 'YearRef')],
                        onChange: _this2['set_'.concat(mode, 'Year')],
                        value: _this2.state['_'.concat(mode, 'Year')],
                        'aria-labelledby': ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-year-label'),
                      })
                    ),
                    React.createElement(
                      'label',
                      {
                        key: 'yl' + i,
                        hidden: true,
                        id: ''
                          .concat(_this2.props.id, '-')
                          .concat(mode, '-year-label'),
                      },
                      rangeLabe + year
                    )
                  );
              }
            }

            return React.createElement(
              'span',
              {
                key: 's' + i,
                className: 'dnb-date-picker--separator',
                'aria-hidden': true,
              },
              placeholderChar
            );
          });
        },
      },
      {
        key: 'formatDate',
        value: function formatDate() {
          var open_picker_text = this.context.translation.DatePicker
            .open_picker_text;
          var selectedDateTitle = this.props.selectedDateTitle;
          return selectedDateTitle
            ? ''.concat(selectedDateTitle, ', ').concat(open_picker_text)
            : open_picker_text;
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props2 = this.props,
            id = _this$props2.id,
            title = _this$props2.title,
            submitAttributes = _this$props2.submitAttributes,
            range = _this$props2.range,
            maskOrder = _this$props2.maskOrder,
            maskPlaceholder = _this$props2.maskPlaceholder,
            separatorRexExp = _this$props2.separatorRexExp,
            date = _this$props2.date,
            endDate = _this$props2.endDate,
            startDate = _this$props2.startDate,
            minDate = _this$props2.minDate,
            maxDate = _this$props2.maxDate,
            onChange = _this$props2.onChange,
            onFocus = _this$props2.onFocus,
            onSubmit = _this$props2.onSubmit,
            onSubmitButtonFocus = _this$props2.onSubmitButtonFocus,
            selectedDateTitle = _this$props2.selectedDateTitle,
            showInput = _this$props2.showInput,
            input_element = _this$props2.input_element,
            disabled = _this$props2.disabled,
            opened = _this$props2.opened,
            status = _this$props2.status,
            status_state = _this$props2.status_state,
            attributes = _objectWithoutProperties(_this$props2, [
              'id',
              'title',
              'submitAttributes',
              'range',
              'maskOrder',
              'maskPlaceholder',
              'separatorRexExp',
              'date',
              'endDate',
              'startDate',
              'minDate',
              'maxDate',
              'onChange',
              'onFocus',
              'onSubmit',
              'onSubmitButtonFocus',
              'selectedDateTitle',
              'showInput',
              'input_element',
              'disabled',
              'opened',
              'status',
              'status_state',
            ]);

          var focusState = this.state.focusState;
          validateDOMAttributes(this.props, attributes);
          validateDOMAttributes(null, submitAttributes);
          return React.createElement(
            Input,
            _extends(
              {
                id: ''.concat(id, '__input'),
                input_state: disabled ? 'disabled' : focusState,
                input_element:
                  input_element && typeof input_element !== 'string'
                    ? typeof input_element === 'function'
                      ? input_element(this.props)
                      : input_element
                    : this.renderInputElement,
                disabled: disabled,
                status: !opened ? status : null,
                status_state: status_state,
                submit_element: React.createElement(
                  SubmitButton,
                  _extends(
                    {
                      id: id,
                      disabled: disabled,
                      className: opened ? 'dnb-button--active' : null,
                      'aria-label': this.formatDate(),
                      title: title,
                      type: 'button',
                      icon: 'calendar',
                      variant: 'secondary',
                      on_submit: onSubmit,
                      onKeyUp: this.onKeyUpHandler,
                    },
                    submitAttributes
                  )
                ),
              },
              attributes
            )
          );
        },
      },
    ],
    [
      {
        key: 'isValidDate',
        value: function isValidDate(date) {
          return (
            date &&
            isValid(date) &&
            (date instanceof Date
              ? date
              : new Date(date)
            ).getFullYear() !== 1111
          );
        },
      },
      {
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
          if (state._listenForPropChanges) {
            if (typeof props.startDate !== 'undefined') {
              state.startDate = props.startDate;
            }

            if (typeof props.endDate !== 'undefined') {
              state.endDate = props.endDate;
            }

            if (
              isDisabled(state.startDate, props.minDate, props.maxDate)
            ) {
              state.startDate = props.minDate;
            }

            if (isDisabled(state.endDate, props.minDate, props.maxDate)) {
              state.endDate = props.maxDate;
            }

            if (
              typeof props.startDate === 'undefined' &&
              state.startDate !== null
            ) {
              state.startDate = null;
              state._startDay = null;
              state._startMonth = null;
              state._startYear = null;
            }

            if (
              typeof props.endDate === 'undefined' &&
              state.endDate !== null
            ) {
              state.endDate = null;
              state._endDay = null;
              state._endMonth = null;
              state._endYear = null;
            }
          }

          state._listenForPropChanges = true;

          if (DatePickerInput.isValidDate(state.startDate)) {
            state._startDay = pad(format(state.startDate, 'dd'), 2);
            state._startMonth = pad(format(state.startDate, 'MM'), 2);
            state._startYear = format(state.startDate, 'yyyy');
          }

          if (DatePickerInput.isValidDate(state.endDate)) {
            state._endDay = pad(format(state.endDate, 'dd'), 2);
            state._endMonth = pad(format(state.endDate, 'MM'), 2);
            state._endYear = format(state.endDate, 'yyyy');
          }

          return state;
        },
      },
    ]
  );

  return DatePickerInput;
})(React.PureComponent);

DatePickerInput.defaultProps = defaultProps$e;
DatePickerInput.contextType = Context;

var selectInput = function selectInput(e) {
  e.target.focus();
  e.target.select();
};

var InputElement = React.forwardRef(function(props, innerRef) {
  return React.createElement(
    MaskedInput,
    _extends(
      {
        guide: true,
        showMask: true,
        keepCharPositions: false,
        autoComplete: 'off',
        ref: innerRef,
      },
      props
    )
  );
});

var pad = function pad(num, size) {
  return ('000000000' + num).substr(-size);
};

var wait = function wait(t) {
  return new Promise(function(r) {
    return setTimeout(r, t);
  });
};

function pad$1(hash, len) {
  while (hash.length < len) {
    hash = '0' + hash;
  }

  return hash;
}

function fold(hash, text) {
  var i;
  var chr;
  var len;

  if (text.length === 0) {
    return hash;
  }

  for (i = 0, len = text.length; i < len; i++) {
    chr = text.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0;
  }

  return hash < 0 ? hash * -2 : hash;
}

function foldObject(hash, o, seen, deep) {
  return Object.keys(o)
    .sort()
    .reduce(foldKey, hash);

  function foldKey(hash, key) {
    if (
      deep === false &&
      (_typeof(o[key]) === 'object' || typeof o[key] === 'function')
    ) {
      return hash;
    }

    return foldValue(hash, o[key], key, seen, deep);
  }
}

function foldValue(input, value, key, seen, deep) {
  var hash = fold(
    fold(fold(input, key), toString$1(value)),
    _typeof(value)
  );

  if (value === null) {
    return fold(hash, 'null');
  }

  if (value === undefined) {
    return fold(hash, 'undefined');
  }

  if (_typeof(value) === 'object' || typeof value === 'function') {
    if (seen.indexOf(value) !== -1) {
      return fold(hash, '[Circular]' + key);
    }

    seen.push(value);
    var objHash = foldObject(hash, value, seen, deep);

    if (!('valueOf' in value) || typeof value.valueOf !== 'function') {
      return objHash;
    }

    try {
      return fold(objHash, String(value.valueOf()));
    } catch (err) {
      return fold(
        objHash,
        '[valueOf exception]' + (err.stack || err.message)
      );
    }
  }

  return fold(hash, value.toString());
}

function toString$1(o) {
  return Object.prototype.toString.call(o);
}

function sum(o) {
  var deep =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : true;
  return pad$1(foldValue(0, o, '', [], deep).toString(16), 8);
}

function _createSuper$g(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$h()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$h() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$8 = {
  render_content: null,
};
var propTypes$2 = {
  id: propTypes.string,
  label: propTypes.oneOfType([
    propTypes.string,
    propTypes.func,
    propTypes.node,
  ]),
  label_direction: propTypes.oneOf(['vertical', 'horizontal']),
  label_sr_only: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  label_id: propTypes.string,
  label_class: propTypes.string,
  no_label: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  no_fieldset: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  indent: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  wrap: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  direction: propTypes.oneOf(['vertical', 'horizontal']),
  vertical: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  indent_offset: propTypes.string,
  section_style: propTypes.string,
  section_spacing: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  global_status_id: propTypes.string,
  responsive: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  disabled: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  class: propTypes.string,
  skipContentWrapperIfNested: propTypes.bool,
  className: propTypes.string,
  children: propTypes.oneOfType([
    propTypes.string,
    propTypes.func,
    propTypes.node,
  ]),
  custom_element: propTypes.object,
  custom_method: propTypes.func,
  render_content: propTypes.func,
};

var defaultProps$f = _extends(
  {
    id: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    label_id: null,
    label_class: null,
    no_label: false,
    no_fieldset: null,
    indent: null,
    wrap: null,
    direction: null,
    vertical: null,
    indent_offset: null,
    section_style: null,
    section_spacing: null,
    global_status_id: null,
    responsive: null,
    disabled: null,
    class: null,
    skipContentWrapperIfNested: false,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$8
);

var _ref$4 = React.createElement(AlignmentHelper, null);

var _ref2$3 = React.createElement('span', {
  className: 'dnb-form-label dnb-form-row__label-dummy',
  'aria-hidden': true,
});

var FormRow = (function(_React$PureComponent) {
  _inherits(FormRow, _React$PureComponent);

  var _super = _createSuper$g(FormRow);

  _createClass(FormRow, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(FormRow.tagName, FormRow, defaultProps$f);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (typeof props.render_content === 'function')
          props.render_content(props);
        var label = null;
        var children =
          typeof props.children === 'function'
            ? props.children(props)
            : props.children;

        if (Array.isArray(props.children)) {
          children = children.reduce(function(pV, cV) {
            if (cV.type && cV.type.name === 'FormLabel') {
              label = cV.props.children;
            } else {
              pV.push(cV);
            }

            return pV;
          }, []);
        }

        return {
          label: label,
          children: children,
        };
      },
    },
  ]);

  function FormRow(props) {
    var _this;

    _classCallCheck(this, FormRow);

    _this = _super.call(this, props);
    _this._id = props.id || makeUniqueId();
    return _this;
  }

  _createClass(FormRow, [
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$f,
          this.context.formRow
        );

        var label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          label_id = props.label_id,
          label_class = props.label_class,
          no_fieldset = props.no_fieldset,
          no_label = props.no_label,
          indent = props.indent,
          direction = props.direction,
          vertical = props.vertical,
          indent_offset = props.indent_offset,
          section_style = props.section_style,
          section_spacing = props.section_spacing,
          global_status_id = props.global_status_id,
          responsive = props.responsive,
          disabled = props.disabled,
          wrap = props.wrap,
          _id = props.id,
          className = props.className,
          _className = props.class,
          skipContentWrapperIfNested = props.skipContentWrapperIfNested,
          attributes = _objectWithoutProperties(props, [
            'label',
            'label_direction',
            'label_sr_only',
            'label_id',
            'label_class',
            'no_fieldset',
            'no_label',
            'indent',
            'direction',
            'vertical',
            'indent_offset',
            'section_style',
            'section_spacing',
            'global_status_id',
            'responsive',
            'disabled',
            'wrap',
            'id',
            'className',
            'class',
            'skipContentWrapperIfNested',
          ]);

        var isNested =
          this.context.formRow && this.context.formRow.itsMeAgain;

        var _FormRow$getContent = FormRow.getContent(this.props),
          nestedLabel = _FormRow$getContent.label,
          children = _FormRow$getContent.children;

        if (!label && nestedLabel) {
          label = nestedLabel;
        }

        var hasLabel =
          (typeof label === 'string' && label.length > 0) || label
            ? true
            : false;
        var id = this._id;

        var params = _extends(
          {
            className: classnames(
              'dnb-form-row',
              (isTrue(vertical) || direction) &&
                'dnb-form-row--'.concat(
                  isTrue(vertical) ? 'vertical' : direction
                ),
              (isTrue(vertical) || label_direction) &&
                'dnb-form-row--'.concat(
                  isTrue(vertical) ? 'vertical' : label_direction,
                  '-label'
                ),
              createSpacingClasses(props),
              className,
              _className,
              indent &&
                !(
                  isNested &&
                  this.context.formRow.hasLabel &&
                  this.context.formRow.indent
                ) &&
                'dnb-form-row__indent--'.concat(
                  isTrue(indent) ? 'default' : indent
                ),
              isNested && 'dnb-form-row--nested',
              section_style &&
                'dnb-section dnb-section--'.concat(section_style),
              section_spacing &&
                'dnb-section--spacing-'.concat(
                  isTrue(section_spacing) ? 'default' : section_spacing
                )
            ),
          },
          attributes
        );

        validateDOMAttributes(this.props, params);

        if (
          this._cachedContext !== sum(this.context, false) ||
          this._cachedProps !== sum(this.props, false)
        ) {
          this._cachedContext = sum(this.context, false);
          this._cachedProps = sum(this.props, false);
          var formRow = {
            useId: function useId() {
              if (_this2.isIsUsed) {
                return makeUniqueId();
              }

              _this2.isIsUsed = true;
              return id;
            },
            itsMeAgain: true,
            hasLabel: hasLabel,
            indent: indent,
            global_status_id: global_status_id,
            direction: direction,
            vertical: vertical,
            label_direction: isTrue(vertical)
              ? 'vertical'
              : label_direction,
            responsive: responsive,
            disabled: disabled,
          };
          this._contextWeUse = extend(this.context, {
            formRow: formRow,
          });
        }

        var useFieldset = !isTrue(no_fieldset) && hasLabel;
        return React.createElement(
          Context.Provider,
          {
            value: this._contextWeUse,
          },
          React.createElement(
            Fieldset,
            {
              useFieldset: useFieldset,
            },
            React.createElement(
              'div',
              params,
              _ref$4,
              label &&
                React.createElement(FormLabel, {
                  className: classnames(
                    'dnb-form-row__label',
                    label_class
                  ),
                  id: label_id ? label_id : id + '-label',
                  for_id: useFieldset ? null : id,
                  text: label,
                  element: useFieldset ? 'legend' : 'label',
                  label_direction: label_direction,
                  sr_only: label_sr_only,
                  disabled: isTrue(disabled),
                }),
              isTrue(no_label) && _ref2$3,
              isNested && skipContentWrapperIfNested
                ? children
                : React.createElement(
                    'div',
                    {
                      className: classnames(
                        'dnb-form-row__content',
                        isTrue(wrap) && 'dnb-form-row__content--wrap',
                        label &&
                          !isTrue(vertical) &&
                          direction !== 'vertical' &&
                          'dnb-form-row__content--'.concat(
                            indent_offset || 'default'
                          ),
                        responsive && 'dnb-responsive-component'
                      ),
                      ref: this._contentRef,
                    },
                    children
                  )
            )
          )
        );
      },
    },
  ]);

  return FormRow;
})(React.PureComponent);

FormRow.tagName = 'dnb-form-row';
FormRow.defaultProps = defaultProps$f;
FormRow.contextType = Context;

var Fieldset = function Fieldset(_ref3) {
  var useFieldset = _ref3.useFieldset,
    className = _ref3.className,
    children = _ref3.children,
    props = _objectWithoutProperties(_ref3, [
      'useFieldset',
      'className',
      'children',
    ]);

  if (useFieldset) {
    return React.createElement(
      'fieldset',
      _extends(
        {
          className: classnames('dnb-form-row__fieldset', className),
        },
        props
      ),
      children
    );
  }

  return React.createElement(
    'div',
    _extends(
      {
        className: classnames('dnb-form-row__fieldset', className),
      },
      props
    ),
    children
  );
};
Fieldset.defaultProps = {
  useFieldset: false,
  className: null,
};

var RadioGroupContext = React.createContext({});

function _createSuper$h(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$i()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$i() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$9 = {
  on_change: null,
};

var defaultProps$g = _extends(
  {
    label: null,
    label_direction: null,
    label_sr_only: null,
    label_position: null,
    title: null,
    no_fieldset: null,
    disabled: null,
    id: null,
    name: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    vertical: null,
    layout_direction: 'row',
    value: null,
    attributes: null,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$9
);

var RadioGroup = (function(_React$PureComponent) {
  _inherits(RadioGroup, _React$PureComponent);

  var _super = _createSuper$h(RadioGroup);

  _createClass(RadioGroup, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(RadioGroup.tagName, RadioGroup, defaultProps$g);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (typeof props.value !== 'undefined') {
            state.value = props.value;
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function RadioGroup(props) {
    var _this;

    _classCallCheck(this, RadioGroup);

    _this = _super.call(this, props);

    _this.onChangeHandler = function(_ref) {
      var value = _ref.value,
        event = _ref.event;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          value: value,
          event: event,
        }
      );
    };

    _this._refInput = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this._name = props.name || _this._id;
    _this.state = {
      _listenForPropChanges: true,
    };
    return _this;
  }

  _createClass(RadioGroup, [
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$g,
          this.context.formRow
        );

        var status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          label_position = props.label_position,
          vertical = props.vertical,
          layout_direction = props.layout_direction,
          no_fieldset = props.no_fieldset,
          disabled = props.disabled,
          className = props.className,
          _className = props.class,
          _id = props.id,
          _name = props.name,
          _value = props.value,
          attributes = props.attributes,
          children = props.children,
          on_change = props.on_change,
          custom_method = props.custom_method,
          custom_element = props.custom_element,
          rest = _objectWithoutProperties(props, [
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'label',
            'label_direction',
            'label_sr_only',
            'label_position',
            'vertical',
            'layout_direction',
            'no_fieldset',
            'disabled',
            'className',
            'class',
            'id',
            'name',
            'value',
            'attributes',
            'children',
            'on_change',
            'custom_method',
            'custom_element',
          ]);

        var value = this.state.value;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var classes = classnames(
          'dnb-radio-group dnb-radio-group--'.concat(
            layout_direction,
            ' dnb-form-component'
          ),
          createSpacingClasses(props),
          className,
          _className,
          status && 'dnb-radio-group__status--'.concat(status_state)
        );

        var params = _extends({}, rest);

        if (showStatus || suffix) {
          params['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (label) {
          params['aria-labelledby'] = id + '-label';
        }

        validateDOMAttributes(this.props, params);
        var context = {
          name: this._name,
          value: value,
          disabled: disabled,
          label_position: label_position,
          onChange: this.onChangeHandler,
        };
        var formRowParams = {
          id: id,
          label: label,
          label_id: id + '-label',
          label_direction: label_direction,
          label_sr_only: label_sr_only,
          direction: label_direction,
          vertical: vertical,
          disabled: disabled,
          no_fieldset: no_fieldset,
          skipContentWrapperIfNested: true,
        };
        return React.createElement(
          RadioGroupContext.Provider,
          {
            value: context,
          },
          React.createElement(
            'div',
            {
              className: classes,
            },
            React.createElement(
              FormRow,
              formRowParams,
              React.createElement(
                'span',
                _extends(
                  {
                    id: id,
                    className: 'dnb-radio-group__shell',
                    role: 'radiogroup',
                  },
                  params
                ),
                children,
                suffix &&
                  React.createElement(
                    'span',
                    {
                      className: 'dnb-radio-group__suffix',
                      id: id + '-suffix',
                    },
                    React.createElement(Suffix, props, suffix)
                  ),
                showStatus &&
                  React.createElement(FormStatus, {
                    id: id + '-form-status',
                    global_status_id: global_status_id,
                    text: status,
                    status: status_state,
                    text_id: id + '-status',
                    width_selector: id + ', ' + id + '-label',
                    animation: status_animation,
                  })
              )
            )
          )
        );
      },
    },
  ]);

  return RadioGroup;
})(React.PureComponent);

RadioGroup.tagName = 'dnb-radio-group';
RadioGroup.defaultProps = defaultProps$g;
RadioGroup.renderProps = renderProps$9;
RadioGroup.contextType = Context;

RadioGroup.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

function _createSuper$i(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$j()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$j() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$a = {
  on_change: null,
  on_state_update: null,
};

var defaultProps$h = _extends(
  {
    label: null,
    label_sr_only: null,
    label_position: null,
    checked: null,
    disabled: false,
    id: null,
    group: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    value: '',
    attributes: null,
    readOnly: false,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$a
);

var _ref2$4 = React.createElement(AlignmentHelper, null);

var _ref3$5 = React.createElement('span', {
  className: 'dnb-radio__button',
  'aria-hidden': true,
});

var _ref4$2 = React.createElement('span', {
  className: 'dnb-radio__focus',
  'aria-hidden': true,
});

var _ref5$1 = React.createElement('span', {
  className: 'dnb-radio__dot',
  'aria-hidden': true,
});

var Radio = (function(_React$Component) {
  _inherits(Radio, _React$Component);

  var _super = _createSuper$i(Radio);

  _createClass(Radio, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Radio.tagName, Radio, defaultProps$h);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          state.checked = Radio.parseChecked(props.checked);
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function Radio(props) {
    var _this;

    _classCallCheck(this, Radio);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(event) {
      var key = keycode(event);

      if (_this.isInNoGroup()) {
        switch (key) {
          case 'enter':
            _this.onChangeHandler(event);

            break;
        }
      } else if (_this.isContextGroupOrSingle()) {
        switch (key) {
          case 'space':
          case 'enter': {
            var value = _this.context.value;

            if (value !== null && typeof value !== 'undefined') {
              event.preventDefault();
            }

            if (key === 'enter') {
              var checked = !_this.state.checked;

              _this.setState({
                checked: checked,
                _listenForPropChanges: false,
              });
            }

            break;
          }
        }
      } else {
        switch (key) {
          case 'space': {
            event.preventDefault();
            break;
          }
        }
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_key_down',
        {
          event: event,
        }
      );
    };

    _this.onChangeHandler = function(_event) {
      var event = _event;

      if (isTrue(_this.props.readOnly)) {
        return event.preventDefault();
      }

      var value = event.target.value;
      var checked = !_this.state.checked;

      if (_this.isPlainGroup()) {
        setTimeout(function() {
          _this.setState(
            {
              checked: checked,
              _listenForPropChanges: false,
            },
            function() {
              return _this.callOnChange({
                value: value,
                checked: checked,
                event: event,
              });
            }
          );
        }, 1);
      } else {
        _this.setState({
          checked: checked,
          _listenForPropChanges: false,
        });

        _this.callOnChange({
          value: value,
          checked: checked,
          event: event,
        });
      }
    };

    _this.isContextGroupOrSingle = function() {
      return (
        typeof _this.context.value !== 'undefined' && !_this.props.group
      );
    };

    _this.isPlainGroup = function() {
      return (
        typeof _this.context.value === 'undefined' && _this.props.group
      );
    };

    _this.isInNoGroup = function() {
      return (
        typeof _this.context.value === 'undefined' && !_this.props.group
      );
    };

    _this.onClickHandler = function(event) {
      if (isTrue(_this.props.readOnly)) {
        return event.preventDefault();
      }

      if (!_this.isPlainGroup()) {
        return;
      }

      var value = event.target.value;
      var checked = event.target.checked;

      _this.callOnChange({
        value: value,
        checked: checked,
        event: event,
      });
    };

    _this.callOnChange = function(_ref) {
      var value = _ref.value,
        checked = _ref.checked,
        event = _ref.event;
      var group = _this.props.group;

      if (_this.context.onChange) {
        _this.context.onChange({
          value: value,
        });
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          group: group,
          checked: checked,
          value: value,
          event: event,
        }
      );

      if (_this._refInput.current) {
        _this._refInput.current.focus();
      }
    };

    _this.onMouseOutHandler = function(event) {
      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_mouse_out',
        {
          event: event,
        }
      );

      if (_this.props.status && _this.props.status_state === 'error') {
        return;
      }

      if (_this._refInput.current) {
        _this._refInput.current.blur();
      }
    };

    _this._refInput = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this.state = {
      _listenForPropChanges: true,
    };
    return _this;
  }

  _createClass(Radio, [
    {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (
          Radio.parseChecked(this.props.checked) !==
          Radio.parseChecked(nextProps.checked)
        ) {
          var checked = nextState.checked;
          dispatchCustomElementEvent(this, 'on_state_update', {
            checked: checked,
          });
        }

        return true;
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        return React.createElement(Context.Consumer, null, function(
          context
        ) {
          var props = extendPropsWithContext(
            _this2.props,
            defaultProps$h,
            _this2.context,
            context.formRow
          );

          var status = props.status,
            status_state = props.status_state,
            status_animation = props.status_animation,
            global_status_id = props.global_status_id,
            suffix = props.suffix,
            label = props.label,
            label_sr_only = props.label_sr_only,
            label_position = props.label_position,
            readOnly = props.readOnly,
            className = props.className,
            _className = props.class,
            _id = props.id,
            _group = props.group,
            _value = props.value,
            _checked = props.checked,
            _disabled = props.disabled,
            attributes = props.attributes,
            children = props.children,
            on_change = props.on_change,
            on_state_update = props.on_state_update,
            custom_method = props.custom_method,
            custom_element = props.custom_element,
            rest = _objectWithoutProperties(props, [
              'status',
              'status_state',
              'status_animation',
              'global_status_id',
              'suffix',
              'label',
              'label_sr_only',
              'label_position',
              'readOnly',
              'className',
              'class',
              'id',
              'group',
              'value',
              'checked',
              'disabled',
              'attributes',
              'children',
              'on_change',
              'on_state_update',
              'custom_method',
              'custom_element',
            ]);

          var checked = _this2.state.checked;
          var _this2$props = _this2.props,
            value = _this2$props.value,
            group = _this2$props.group,
            disabled = _this2$props.disabled;
          var hasContext = typeof _this2.context.value !== 'undefined';

          if (hasContext) {
            if (_this2.context.value !== null) {
              checked = _this2.context.value === value;
            }

            group = _this2.context.name;
            disabled = isTrue(_this2.context.disabled);
          }

          var id = _this2._id;
          var showStatus = status && status !== 'error';
          var mainParams = {
            className: classnames(
              'dnb-radio',
              createSpacingClasses(props),
              className,
              _className,
              status && 'dnb-radio__status--'.concat(status_state),
              label &&
                'dnb-radio--label-position-'.concat(
                  label_position || 'right'
                )
            ),
          };

          var inputParams = _extends(
            {
              role: hasContext || group ? 'radio' : null,
              type: hasContext || group ? 'radio' : 'checkbox',
            },
            rest,
            {
              onMouseOut: _this2.onMouseOutHandler,
            }
          );

          if (showStatus || suffix) {
            inputParams['aria-describedby'] = ''
              .concat(showStatus ? id + '-status' : '', ' ')
              .concat(suffix ? id + '-suffix' : '');
          }

          if (readOnly) {
            inputParams['aria-readonly'] = inputParams.readOnly = true;
          }

          if (!group) {
            inputParams.type = 'checkbox';
            inputParams.role = 'radio';
          }

          validateDOMAttributes(_this2.props, inputParams);
          var labelComp =
            label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              disabled: disabled,
              sr_only: label_sr_only,
            });
          return React.createElement(
            'span',
            mainParams,
            React.createElement(
              'span',
              {
                className: 'dnb-radio__order',
              },
              label_position === 'left' && labelComp,
              React.createElement(
                'span',
                {
                  className: 'dnb-radio__inner',
                },
                _ref2$4,
                showStatus &&
                  React.createElement(FormStatus, {
                    id: id + '-form-status',
                    global_status_id: global_status_id,
                    text_id: id + '-status',
                    width_selector: id + ', ' + id + '-label',
                    text: status,
                    status: status_state,
                    animation: status_animation,
                  }),
                React.createElement(
                  'span',
                  {
                    className: 'dnb-radio__row',
                  },
                  React.createElement(
                    'span',
                    {
                      className: 'dnb-radio__shell',
                    },
                    React.createElement(
                      'input',
                      _extends(
                        {
                          type: 'radio',
                          value: value,
                          id: id,
                          name: group,
                          className: 'dnb-radio__input',
                          checked: checked,
                          'aria-checked': checked,
                          disabled: isTrue(disabled),
                          ref: _this2._refInput,
                        },
                        inputParams,
                        {
                          onChange: _this2.onChangeHandler,
                          onClick: _this2.onClickHandler,
                          onKeyDown: _this2.onKeyDownHandler,
                        }
                      )
                    ),
                    _ref3$5,
                    _ref4$2,
                    _ref5$1
                  ),
                  label_position !== 'left' && labelComp,
                  suffix &&
                    React.createElement(
                      'span',
                      {
                        className: 'dnb-radio__suffix',
                        id: id + '-suffix',
                      },
                      React.createElement(Suffix, props, suffix)
                    )
                )
              )
            )
          );
        });
      },
    },
  ]);

  return Radio;
})(React.Component);

Radio.tagName = 'dnb-radio';
Radio.defaultProps = defaultProps$h;
Radio.renderProps = renderProps$a;
Radio.contextType = RadioGroupContext;
Radio.Group = RadioGroup;

Radio.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

var ToggleButtonGroupContext = React.createContext({});

function _createSuper$j(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$k()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$k() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$b = {
  on_change: null,
};

var defaultProps$i = _extends(
  {
    label: null,
    label_direction: null,
    label_sr_only: null,
    title: null,
    multiselect: null,
    variant: null,
    left_component: null,
    no_fieldset: null,
    disabled: null,
    id: null,
    name: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    vertical: null,
    layout_direction: 'row',
    value: undefined,
    values: undefined,
    attributes: null,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$b
);

var ToggleButtonGroup = (function(_React$PureComponent) {
  _inherits(ToggleButtonGroup, _React$PureComponent);

  var _super = _createSuper$j(ToggleButtonGroup);

  _createClass(ToggleButtonGroup, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(
          ToggleButtonGroup.tagName,
          ToggleButtonGroup,
          defaultProps$i
        );
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (typeof props.value !== 'undefined') {
            state.value = props.value;
          }

          if (typeof props.values !== 'undefined') {
            state.values = ToggleButtonGroup.getValues(props);
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
    {
      key: 'getValues',
      value: function getValues(props) {
        if (typeof props.values === 'string' && props.values[0] === '[') {
          return JSON.parse(props.values);
        }

        return props.values;
      },
    },
  ]);

  function ToggleButtonGroup(props) {
    var _this;

    _classCallCheck(this, ToggleButtonGroup);

    _this = _super.call(this, props);

    _this.onChangeHandler = function(_ref) {
      var value = _ref.value,
        event = _ref.event;
      var multiselect = _this.props.multiselect;
      var values = _this.state.values;

      if (isTrue(multiselect)) {
        if (!values.includes(value)) {
          values.push(value);
        } else {
          values.splice(values.indexOf(value), 1);
        }
      } else {
        _this.setState({
          value: value,
          values: values,
          _listenForPropChanges: false,
        });
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          value: value,
          values: values,
          event: event,
        }
      );
    };

    _this._refInput = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this._name = props.name || makeUniqueId();
    _this.state = {
      _listenForPropChanges: true,
    };
    return _this;
  }

  _createClass(ToggleButtonGroup, [
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$i,
          this.context.formRow,
          this.context.translation.ToggleButton
        );

        var status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          vertical = props.vertical,
          layout_direction = props.layout_direction,
          label = props.label,
          variant = props.variant,
          left_component = props.left_component,
          no_fieldset = props.no_fieldset,
          disabled = props.disabled,
          className = props.className,
          _className = props.class,
          multiselect = props.multiselect,
          _id = props.id,
          _name = props.name,
          _value = props.value,
          _values = props.values,
          attributes = props.attributes,
          children = props.children,
          on_change = props.on_change,
          custom_method = props.custom_method,
          custom_element = props.custom_element,
          rest = _objectWithoutProperties(props, [
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'label_direction',
            'label_sr_only',
            'vertical',
            'layout_direction',
            'label',
            'variant',
            'left_component',
            'no_fieldset',
            'disabled',
            'className',
            'class',
            'multiselect',
            'id',
            'name',
            'value',
            'values',
            'attributes',
            'children',
            'on_change',
            'custom_method',
            'custom_element',
          ]);

        var _this$state = this.state,
          value = _this$state.value,
          values = _this$state.values;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var classes = classnames(
          'dnb-toggle-button-group dnb-toggle-button-group--'.concat(
            layout_direction,
            ' dnb-form-component'
          ),
          createSpacingClasses(props),
          className,
          _className,
          status &&
            'dnb-toggle-button-group__status--'.concat(status_state),
          !label && 'dnb-toggle-button-group--no-label'
        );

        var params = _extends({}, rest);

        if (showStatus || suffix) {
          params['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (label) {
          params['aria-labelledby'] = id + '-label';
        }

        validateDOMAttributes(this.props, params);
        var context = {
          name: this._name,
          value: value,
          values: values,
          multiselect: isTrue(multiselect),
          variant: variant,
          left_component: left_component,
          disabled: disabled,
          setContext: function setContext(context) {
            if (typeof context === 'function') {
              context = context(_this2._tmp);
            }

            _this2._tmp = _extends({}, _this2._tmp, {}, context);

            _this2.setState(
              _extends({}, context, {
                _listenForPropChanges: false,
              })
            );
          },
          onChange: this.onChangeHandler,
        };
        var formRowParams = {
          id: id,
          label: label,
          label_id: id + '-label',
          label_direction: label_direction,
          label_sr_only: label_sr_only,
          direction: label_direction,
          vertical: vertical,
          disabled: disabled,
          no_fieldset: no_fieldset,
          skipContentWrapperIfNested: true,
        };
        return React.createElement(
          ToggleButtonGroupContext.Provider,
          {
            value: context,
          },
          React.createElement(
            'div',
            {
              className: classes,
            },
            React.createElement(
              FormRow,
              formRowParams,
              React.createElement(
                'span',
                _extends(
                  {
                    id: id,
                    className: 'dnb-toggle-button-group__shell',
                    role: 'group',
                  },
                  params
                ),
                showStatus &&
                  React.createElement(FormStatus, {
                    id: id + '-form-status',
                    global_status_id: global_status_id,
                    text_id: id + '-status',
                    text: status,
                    status: status_state,
                    animation: status_animation,
                  }),
                React.createElement(
                  'span',
                  {
                    className: 'dnb-toggle-button-group__children',
                  },
                  children,
                  suffix &&
                    React.createElement(
                      'span',
                      {
                        className: 'dnb-toggle-button-group__suffix',
                        id: id + '-suffix',
                      },
                      React.createElement(Suffix, props, suffix)
                    )
                )
              )
            )
          )
        );
      },
    },
  ]);

  return ToggleButtonGroup;
})(React.PureComponent);

ToggleButtonGroup.tagName = 'dnb-toggle-button-group';
ToggleButtonGroup.defaultProps = defaultProps$i;
ToggleButtonGroup.renderProps = renderProps$b;
ToggleButtonGroup.contextType = Context;

ToggleButtonGroup.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

function _createSuper$k(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$l()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$l() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$c = {
  on_change: null,
  on_state_update: null,
};

var defaultProps$j = _extends(
  {
    text: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    title: null,
    checked: null,
    variant: null,
    left_component: null,
    disabled: null,
    id: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    value: '',
    icon: null,
    icon_position: 'right',
    icon_size: null,
    attributes: null,
    readOnly: false,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$c
);

var _ref3$6 = React.createElement(AlignmentHelper, null);

var ToggleButton = (function(_React$Component) {
  _inherits(ToggleButton, _React$Component);

  var _super = _createSuper$k(ToggleButton);

  _createClass(ToggleButton, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(
          ToggleButton.tagName,
          ToggleButton,
          defaultProps$j
        );
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          state.checked = ToggleButton.parseChecked(props.checked);
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function ToggleButton(props, context) {
    var _this;

    _classCallCheck(this, ToggleButton);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(event) {
      switch (keycode(event)) {
        case 'enter':
          _this.onClickHandler(event);

          break;
      }
    };

    _this.onKeyUpHandler = function(event) {
      switch (keycode(event)) {
        case 'enter':
          _this.onClickHandler(event);

          break;
      }
    };

    _this.onClickHandler = function(_ref) {
      var event = _ref.event;

      if (isTrue(_this.props.readOnly)) {
        return event.preventDefault();
      }

      event.persist();

      if (
        !isTrue(_this.context.multiselect) &&
        _this.props.value === _this.context.value
      ) {
        return;
      }

      var checked = !_this.state.checked;

      _this.setState({
        checked: checked,
        _listenForPropChanges: false,
      });

      _this.callOnChange({
        checked: checked,
        event: event,
      });

      if (_this._refButton.current && checked) {
        try {
          _this._refButton.current._ref.current.focus();
        } catch (e) {
          console.warn(e);
        }
      }
    };

    _this.callOnChange = function(_ref2) {
      var checked = _ref2.checked,
        event = _ref2.event;
      var value = _this.props.value;

      if (_this.context.onChange) {
        _this.context.onChange({
          value: value,
          event: event,
        });
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          checked: checked,
          value: value,
          event: event,
        }
      );
    };

    _this._id = props.id || makeUniqueId();
    _this._refButton = React.createRef();
    _this.state = {
      _listenForPropChanges: true,
    };

    if (context.name && typeof props.value !== 'undefined') {
      if (typeof context.value !== 'undefined') {
        _this.state.checked = context.value === props.value;
        _this.state._listenForPropChanges = false;
      } else if (context.values && Array.isArray(context.values)) {
        _this.state.checked = context.values.includes(props.value);
        _this.state._listenForPropChanges = false;
      } else if (ToggleButton.parseChecked(props.checked)) {
        if (context.setContext) {
          if (context.multiselect) {
            context.setContext(function(tmp) {
              return {
                values:
                  tmp && Array.isArray(tmp.values)
                    ? [].concat(_toConsumableArray(tmp.values), [
                        props.value,
                      ])
                    : [props.value],
              };
            });
          } else {
            context.setContext({
              value: props.value,
            });
          }
        }
      }
    }

    return _this;
  }

  _createClass(ToggleButton, [
    {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (
          ToggleButton.parseChecked(this.props.checked) !==
          ToggleButton.parseChecked(nextProps.checked)
        ) {
          var checked = nextState.checked;
          dispatchCustomElementEvent(this, 'on_state_update', {
            checked: checked,
          });
        }

        return true;
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        return React.createElement(Context.Consumer, null, function(
          context
        ) {
          var _componentParams;

          var props = extendPropsWithContext(
            _this2.props,
            defaultProps$j,
            _this2.context,
            context.formRow,
            context.translation.ToggleButton
          );

          var status = props.status,
            status_state = props.status_state,
            status_animation = props.status_animation,
            global_status_id = props.global_status_id,
            suffix = props.suffix,
            label = props.label,
            label_direction = props.label_direction,
            label_sr_only = props.label_sr_only,
            text = props.text,
            title = props.title,
            readOnly = props.readOnly,
            className = props.className,
            _className = props.class,
            disabled = props.disabled,
            variant = props.variant,
            left_component = props.left_component,
            icon = props.icon,
            icon_size = props.icon_size,
            icon_position = props.icon_position,
            propValue = props.value,
            _id = props.id,
            _checked = props.checked,
            attributes = props.attributes,
            children = props.children,
            on_change = props.on_change,
            on_state_update = props.on_state_update,
            custom_method = props.custom_method,
            custom_element = props.custom_element,
            rest = _objectWithoutProperties(props, [
              'status',
              'status_state',
              'status_animation',
              'global_status_id',
              'suffix',
              'label',
              'label_direction',
              'label_sr_only',
              'text',
              'title',
              'readOnly',
              'className',
              'class',
              'disabled',
              'variant',
              'left_component',
              'icon',
              'icon_size',
              'icon_position',
              'value',
              'id',
              'checked',
              'attributes',
              'children',
              'on_change',
              'on_state_update',
              'custom_method',
              'custom_element',
            ]);

          var checked = _this2.state.checked;

          if (
            !isTrue(_this2.context.multiselect) &&
            typeof _this2.context.value !== 'undefined'
          ) {
            var contextValue = _this2.context.value;

            if (
              typeof propValue === 'string' ||
              typeof propValue === 'number'
            ) {
              checked = propValue === contextValue;
            } else if (typeof JSON !== 'undefined') {
              checked =
                JSON.stringify(propValue) === JSON.stringify(contextValue);
            }
          }

          var id = _this2._id;
          var showStatus = status && status !== 'error';
          var mainParams = {
            className: classnames(
              'dnb-toggle-button',
              createSpacingClasses(props),
              className,
              _className,
              status && 'dnb-toggle-button__status--'.concat(status_state),
              checked && 'dnb-toggle-button--checked',
              label_direction &&
                'dnb-toggle-button--'.concat(label_direction)
            ),
          };
          validateDOMAttributes(_this2.props, rest);

          var buttonParams = _extends(
            _defineProperty(
              {
                id: id,
                disabled: disabled,
                text: text || children,
                title: title,
                icon: icon,
                icon_size: icon_size,
                icon_position: icon_position,
              },
              'aria-pressed',
              String(checked)
            ),
            rest
          );

          var componentParams =
            ((_componentParams = {
              checked: checked,
              disabled: disabled,
            }),
            _defineProperty(_componentParams, 'aria-hidden', true),
            _defineProperty(_componentParams, 'tabIndex', '-1'),
            _componentParams);

          if (status) {
            if (status_state === 'info') {
              componentParams.status_state = 'info';
            } else {
              componentParams.status = 'error';
            }
          }

          if (showStatus || suffix) {
            buttonParams['aria-describedby'] = ''
              .concat(showStatus ? id + '-status' : '', ' ')
              .concat(suffix ? id + '-suffix' : '');
          }

          if (readOnly) {
            buttonParams['aria-readonly'] = buttonParams.readOnly = true;
          }

          var leftComponent = null;

          switch (variant) {
            case 'radio':
              leftComponent = React.createElement(
                Radio,
                _extends(
                  {
                    id: ''.concat(id, '-radio'),
                  },
                  componentParams
                )
              );
              break;

            case 'checkbox':
              leftComponent = React.createElement(
                Checkbox,
                _extends(
                  {
                    id: ''.concat(id, '-checkbox'),
                  },
                  componentParams
                )
              );
              break;

            case 'default':
            default:
              leftComponent = left_component;
              break;
          }

          return React.createElement(
            'span',
            mainParams,
            label &&
              React.createElement(FormLabel, {
                id: id + '-label',
                for_id: id,
                text: label,
                disabled: disabled,
                label_direction: label_direction,
                sr_only: label_sr_only,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-toggle-button__inner',
              },
              showStatus &&
                React.createElement(FormStatus, {
                  id: id + '-form-status',
                  global_status_id: global_status_id,
                  text_id: id + '-status',
                  text: status,
                  status: status_state,
                  animation: status_animation,
                }),
              React.createElement(
                'span',
                {
                  className: 'dnb-toggle-button__shell',
                },
                _ref3$6,
                React.createElement(
                  Button,
                  _extends(
                    {
                      variant: 'secondary',
                      className: 'dnb-toggle-button__button',
                    },
                    buttonParams,
                    {
                      ref: _this2._refButton,
                      onClick: _this2.onClickHandler,
                      onKeyDown: _this2.onKeyDownHandler,
                      onKeyUp: _this2.onKeyUpHandler,
                    }
                  ),
                  leftComponent &&
                    React.createElement(
                      'span',
                      {
                        className: 'dnb-toggle-button__component',
                      },
                      leftComponent
                    )
                ),
                suffix &&
                  React.createElement(
                    'span',
                    {
                      className: 'dnb-toggle-button__suffix',
                      id: id + '-suffix',
                    },
                    React.createElement(Suffix, props, suffix)
                  )
              )
            )
          );
        });
      },
    },
  ]);

  return ToggleButton;
})(React.Component);

ToggleButton.tagName = 'dnb-toggle-button';
ToggleButton.defaultProps = defaultProps$j;
ToggleButton.renderProps = renderProps$c;
ToggleButton.contextType = ToggleButtonGroupContext;
ToggleButton.Group = ToggleButtonGroup;

ToggleButton.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

function _createSuper$l(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$m()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$m() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$k = {
  shortcuts: null,
  renderElement: null,
  startDate: null,
  endDate: null,
  onChange: null,
};

var DatePickerAddon = (function(_React$PureComponent) {
  _inherits(DatePickerAddon, _React$PureComponent);

  var _super = _createSuper$l(DatePickerAddon);

  function DatePickerAddon() {
    var _this;

    _classCallCheck(this, DatePickerAddon);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      currentShortcut: null,
      _listenForPropChanges: true,
    };
    return _this;
  }

  _createClass(
    DatePickerAddon,
    [
      {
        key: 'setDate',
        value: function setDate(_ref) {
          var value = _ref.value,
            event = _ref.event;
          this.setState({
            currentShortcut: value,
            _listenForPropChanges: false,
          });
          var start_date = value.date || value.start_date;
          var end_date = value.end_date;
          var startDate =
            typeof start_date === 'function'
              ? start_date(this.getCurrentDates())
              : start_date
              ? convertStringToDate(start_date)
              : null;
          var endDate =
            typeof end_date === 'function'
              ? end_date(this.getCurrentDates())
              : end_date
              ? convertStringToDate(end_date)
              : null;
          this.setState({
            startDate: startDate,
            endDate: endDate || startDate,
          });
          this.callOnChange({
            startDate: startDate,
            endDate: endDate || startDate,
            event: event,
          });
        },
      },
      {
        key: 'getCurrentDates',
        value: function getCurrentDates() {
          var _this$props = this.props,
            startDate = _this$props.startDate,
            endDate = _this$props.endDate;
          return {
            date: startDate,
            start_date: startDate,
            end_date: endDate,
          };
        },
      },
      {
        key: 'callOnChange',
        value: function callOnChange() {
          var _ref2 =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {};

          var startDate = _ref2.startDate,
            endDate = _ref2.endDate,
            _ref2$event = _ref2.event,
            event = _ref2$event === void 0 ? null : _ref2$event,
            args = _objectWithoutProperties(_ref2, [
              'startDate',
              'endDate',
              'event',
            ]);

          this.props.onChange &&
            this.props.onChange(
              {
                date: startDate,
                startDate: startDate,
                endDate: endDate,
                event: event,
              },
              _extends(
                {
                  hidePicker: false,
                  callOnlyOnChangeHandler: false,
                },
                args
              )
            );
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this2 = this;

          var _this$props2 = this.props,
            shortcuts = _this$props2.shortcuts,
            renderElement = _this$props2.renderElement;
          var shortcutsArray = shortcuts
            ? typeof shortcuts === 'string'
              ? JSON.parse(shortcuts)
              : shortcuts
            : [];
          var hasShortcuts = shortcutsArray && shortcutsArray.length > 0;

          if (!hasShortcuts && !renderElement) {
            return React.createElement(React.Fragment, null);
          }

          var shortcutElements =
            hasShortcuts &&
            React.createElement(
              ToggleButton.Group,
              {
                value: this.state.currentShortcut,
                on_change: function on_change(_ref3) {
                  var value = _ref3.value,
                    event = _ref3.event;
                  return _this2.setDate({
                    value: value,
                    event: event,
                  });
                },
              },
              shortcutsArray.map(function(_ref4, i) {
                var title = _ref4.title,
                  rest = _objectWithoutProperties(_ref4, ['title']);

                return React.createElement(ToggleButton, {
                  key: i,
                  text: title,
                  value: rest,
                });
              })
            );
          return React.createElement(
            'div',
            {
              className: 'dnb-date-picker__addon',
            },
            renderElement,
            shortcutElements
          );
        },
      },
    ],
    [
      {
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
          if (state._listenForPropChanges) {
            if (
              props.startDate &&
              !isSameDay(props.startDate, state.startDate)
            ) {
              state.currentShortcut = null;
            }

            state.startDate = props.startDate;
            state.endDate = props.endDate;
          }

          state._listenForPropChanges = true;
          return state;
        },
      },
    ]
  );

  return DatePickerAddon;
})(React.PureComponent);

DatePickerAddon.defaultProps = defaultProps$k;

function _createSuper$m(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$n()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$n() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$l = {
  submit_button_text: null,
  cancel_button_text: null,
  reset_button_text: null,
  selectedDateTitle: null,
  onSubmit: null,
  onCancel: null,
  onReset: null,
};

var _ref$5 = React.createElement('span', null);

var _ref2$5 = React.createElement('span', null);

var _ref3$7 = React.createElement('span', null);

var DatePickerFooter = (function(_React$PureComponent) {
  _inherits(DatePickerFooter, _React$PureComponent);

  var _super = _createSuper$m(DatePickerFooter);

  function DatePickerFooter() {
    var _this;

    _classCallCheck(this, DatePickerFooter);

    for (
      var _len = arguments.length, _args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _this.onSubmitHandler = function(args) {
      var onSubmit = _this.props.onSubmit;

      if (onSubmit) {
        onSubmit(args);
      }
    };

    _this.onCancelHandler = function(args) {
      var onCancel = _this.props.onCancel;

      if (onCancel) {
        onCancel(args);
      }
    };

    _this.onResetHandler = function(args) {
      var onReset = _this.props.onReset;

      if (onReset) {
        onReset(args);
      }
    };

    return _this;
  }

  _createClass(DatePickerFooter, [
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          onSubmit = _this$props.onSubmit,
          onCancel = _this$props.onCancel,
          onReset = _this$props.onReset,
          selectedDateTitle = _this$props.selectedDateTitle,
          submit_button_text = _this$props.submit_button_text,
          cancel_button_text = _this$props.cancel_button_text,
          reset_button_text = _this$props.reset_button_text;

        if (!onSubmit && !onCancel) {
          return React.createElement(React.Fragment, null);
        }

        return React.createElement(
          'div',
          {
            className: 'dnb-date-picker__footer',
          },
          (onSubmit &&
            React.createElement(Button, {
              text: submit_button_text,
              'aria-label': selectedDateTitle
                ? ''
                    .concat(submit_button_text, ', ')
                    .concat(selectedDateTitle)
                : submit_button_text,
              onClick: this.onSubmitHandler,
            })) ||
            _ref$5,
          React.createElement(
            'span',
            null,
            (onReset &&
              React.createElement(Button, {
                text: reset_button_text,
                icon: 'reset',
                icon_position: 'left',
                variant: 'tertiary',
                onClick: this.onResetHandler,
              })) ||
              _ref2$5,
            (onCancel &&
              React.createElement(Button, {
                text: cancel_button_text,
                icon: 'close',
                icon_position: 'left',
                variant: 'tertiary',
                onClick: this.onCancelHandler,
              })) ||
              _ref3$7
          )
        );
      },
    },
  ]);

  return DatePickerFooter;
})(React.PureComponent);

DatePickerFooter.defaultProps = defaultProps$l;

function _createSuper$n(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$o()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$o() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$d = {
  on_change: null,
  on_show: null,
  on_hide: null,
  on_submit: null,
  on_cancel: null,
  on_reset: null,
};

var defaultProps$m = _extends(
  {
    id: null,
    title: null,
    date: undefined,
    start_date: undefined,
    end_date: undefined,
    month: undefined,
    start_month: undefined,
    end_month: undefined,
    mask_order: 'dd/mm/yyyy',
    mask_placeholder: 'dd/mm/åååå',
    date_format: 'yyyy-MM-dd',
    return_format: 'yyyy-MM-dd',
    hide_navigation: false,
    hide_navigation_buttons: false,
    hide_days: false,
    only_month: false,
    hide_last_week: false,
    disable_autofocus: false,
    enable_keyboard_nav: false,
    show_input: false,
    show_submit_button: null,
    show_cancel_button: null,
    show_reset_button: null,
    submit_button_text: 'Ok',
    cancel_button_text: 'Avbryt',
    reset_button_text: 'Tilbakestill',
    reset_date: true,
    first_day: 'monday',
    min_date: undefined,
    max_date: undefined,
    locale: locale$1,
    range: false,
    link: false,
    sync: true,
    label: null,
    label_direction: null,
    label_sr_only: null,
    input_element: null,
    addon_element: null,
    shortcuts: null,
    disabled: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    opened: false,
    no_animation: false,
    direction: 'auto',
    align_picker: null,
    class: null,
    className: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$d
);

var _ref4$3 = React.createElement(AlignmentHelper, null);

var DatePicker = (function(_React$PureComponent) {
  _inherits(DatePicker, _React$PureComponent);

  var _super = _createSuper$n(DatePicker);

  _createClass(DatePicker, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(DatePicker.tagName, DatePicker, defaultProps$m);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          var startDate = undefined;
          var date_format = props.date_format;

          if (typeof props.date !== 'undefined') {
            startDate = props.date;
          }

          if (typeof props.start_date !== 'undefined') {
            startDate = props.start_date;
          }

          if (
            typeof startDate !== 'undefined' &&
            startDate !== state.startDate
          ) {
            state.startDate =
              convertStringToDate(startDate, {
                date_format: date_format,
              }) || undefined;

            if (!isTrue(props.range)) {
              state.endDate = state.startDate;
            }
          }

          if (
            typeof props.end_date !== 'undefined' &&
            isTrue(props.range)
          ) {
            state.endDate =
              convertStringToDate(props.end_date, {
                date_format: date_format,
              }) || undefined;
          }

          if (typeof props.month !== 'undefined') {
            state.month = convertStringToDate(props.month, {
              date_format: date_format,
            });
          }

          if (typeof props.start_month !== 'undefined') {
            state.startMonth = convertStringToDate(props.start_month, {
              date_format: date_format,
            });
          }

          if (typeof props.end_month !== 'undefined') {
            state.endMonth = convertStringToDate(props.end_month, {
              date_format: date_format,
            });
          }

          if (typeof props.min_date !== 'undefined') {
            state.minDate = convertStringToDate(props.min_date, {
              date_format: date_format,
            });
          }

          if (typeof props.max_date !== 'undefined') {
            state.maxDate = convertStringToDate(props.max_date, {
              date_format: date_format,
            });
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function DatePicker(props) {
    var _this;

    _classCallCheck(this, DatePicker);

    _this = _super.call(this, props);

    _this.setTrianglePosition = function() {
      var _this$props = _this.props,
        show_input = _this$props.show_input,
        align_picker = _this$props.align_picker;

      if (
        isTrue(show_input) &&
        _this._triangleRef.current &&
        _this._innerRef.current
      ) {
        try {
          var shellWidth = _this._innerRef.current
            .querySelector('.dnb-input__shell')
            .getBoundingClientRect().width;

          var buttonWidth = _this._innerRef.current
            .querySelector('.dnb-input__submit-button__button')
            .getBoundingClientRect().width;

          if (align_picker === 'right') {
            var distance = buttonWidth / 2 - 8;
            _this._triangleRef.current.style.marginRight = ''.concat(
              distance / 16,
              'rem'
            );
          } else {
            var _distance = shellWidth - buttonWidth / 2 - 8;

            _this._triangleRef.current.style.marginLeft = ''.concat(
              _distance / 16,
              'rem'
            );
          }
        } catch (e) {
          console.warn(e);
        }
      }
    };

    _this.setOutsideClickHandler = function() {
      _this.outsideClick = detectOutsideClick(
        _this._innerRef.current,
        _this.hidePicker
      );
    };

    _this.onSubmitButtonFocus = function() {
      _this.setState({
        showInput: true,
      });
    };

    _this.onInputChange = function(args) {
      var startDate = args.startDate,
        endDate = args.endDate;

      if (!isTrue(_this.props.range)) {
        endDate = startDate;
      }

      if (typeof startDate !== 'undefined') {
        _this.setState(
          {
            startDate: startDate,
            _listenForPropChanges: false,
          },
          function() {
            return _this.callOnChangeHandler(args);
          }
        );
      }

      if (typeof endDate !== 'undefined') {
        _this.setState(
          {
            endDate: endDate,
            _listenForPropChanges: false,
          },
          function() {
            return !startDate && _this.callOnChangeHandler(args);
          }
        );
      }
    };

    _this.onPickerChange = function(_ref) {
      var _ref2 =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref2$hidePicker = _ref2.hidePicker,
        hidePicker = _ref2$hidePicker === void 0 ? true : _ref2$hidePicker,
        _ref2$callOnlyOnChang = _ref2.callOnlyOnChangeHandler,
        callOnlyOnChangeHandler =
          _ref2$callOnlyOnChang === void 0 ? false : _ref2$callOnlyOnChang;

      var startDate = _ref.startDate,
        endDate = _ref.endDate,
        args = _objectWithoutProperties(_ref, ['startDate', 'endDate']);

      if (callOnlyOnChangeHandler) {
        return _this.callOnChangeHandler(args);
      }

      if (endDate === null) {
        endDate = undefined;
      }

      _this.setState(
        {
          startDate: startDate,
          endDate: endDate,
          _listenForPropChanges: false,
        },
        function() {
          return _this.callOnChangeHandler(args);
        }
      );

      if (
        hidePicker &&
        !isTrue(_this.props.show_submit_button) &&
        !isTrue(_this.props.show_cancel_button)
      ) {
        _this.hidePicker(args);
      }
    };

    _this.onSubmitHandler = function(args) {
      _this.hidePicker(args);

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_submit',
        _this.getReturnObject(args)
      );
    };

    _this.onCancelHandler = function(args) {
      var date_format = _this.props.date_format;

      if (args && args.event) {
        args.event.persist();
      }

      _this.setState(
        {
          startDate: _this.state._startDate
            ? convertStringToDate(_this.state._startDate, {
                date_format: date_format,
              })
            : null,
          endDate: _this.state._endDate
            ? convertStringToDate(_this.state._endDate, {
                date_format: date_format,
              })
            : null,
        },
        function() {
          _this.hidePicker(args);

          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_cancel',
            _this.getReturnObject(args)
          );
        }
      );
    };

    _this.onResetHandler = function(args) {
      if (args && args.event) {
        args.event.persist();
      }

      _this.setState(
        {
          date: undefined,
          startDate: undefined,
          endDate: undefined,
          _listenForPropChanges: false,
        },
        function() {
          _this.callOnChangeHandler(args);

          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_reset',
            _this.getReturnObject(args)
          );
        }
      );
    };

    _this.showPicker = function(args) {
      if (_this._hideTimeout) {
        clearTimeout(_this._hideTimeout);
      }

      _this.setState({
        userUsesKeyboard: true,
        opened: true,
        hidden: false,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_show',
        _this.getReturnObject(args)
      );

      _this.setTrianglePosition();

      _this.setOutsideClickHandler();
    };

    _this.hidePicker = function(args) {
      _this.setState({
        opened: false,
        _listenForPropChanges: false,
      });

      _this._hideTimeout = setTimeout(
        function() {
          _this.setState({
            hidden: true,
            _listenForPropChanges: false,
          });
        },
        _this.props.no_animation ? 1 : DatePicker.blurDelay
      );

      try {
        _this._submitButtonRef.current.focus({
          preventScroll: true,
        });
      } catch (e) {
        console.warn(e);
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_hide',
        _this.getReturnObject(args)
      );

      _this.removeOutsideClickHandler();
    };

    _this.togglePicker = function(args) {
      !_this.state.opened
        ? _this.showPicker((args && args.event) || args)
        : _this.hidePicker((args && args.event) || args);
    };

    _this.callOnChangeHandler = function(args) {
      var returnObject = _this.getReturnObject(args);

      if (_this.returnObject) {
        if (isTrue(_this.props.range)) {
          if (
            _this.returnObject.start_date === returnObject.start_date &&
            _this.returnObject.end_date === returnObject.end_date
          ) {
            return;
          }
        } else {
          if (_this.returnObject.date === returnObject.date) {
            return;
          }
        }
      }

      _this.returnObject = returnObject;
      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        returnObject
      );
    };

    _this._id = props.id || makeUniqueId();
    var opened = DatePicker.parseOpened(props.opened);
    _this.state = {
      userUsesKeyboard: false,
      startDate: null,
      endDate: null,
      _startDate: props.start_date,
      _endDate: props.end_date,
      showInput: isTrue(props.show_input),
      opened: opened,
      hidden: !opened,
      direction: props.direction,
      _listenForPropChanges: true,
    };
    var separators = props.mask_order.match(/[^mdy]/g);
    _this.maskList = props.mask_order
      .split(/[^mdy]/)
      .reduce(function(acc, cur) {
        acc.push(cur);

        if (separators.length > 0) {
          acc.push(separators.shift());
        }

        return acc;
      }, []);

    if (props.end_date && !isTrue(props.range)) {
      console.warn(
        'The DatePicker got a "end_date". You have to set range={true} as well!.'
      );
    }

    _this._innerRef = React.createRef();
    _this._triangleRef = React.createRef();
    _this._submitButtonRef = React.createRef();
    return _this;
  }

  _createClass(DatePicker, [
    {
      key: 'removeOutsideClickHandler',
      value: function removeOutsideClickHandler() {
        if (this.outsideClick) {
          this.outsideClick.remove();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this._hideTimeout);
        this.removeOutsideClickHandler();
      },
    },
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (isTrue(this.props.opened)) {
          this.showPicker();
        }
      },
    },
    {
      key: 'getReturnObject',
      value: function getReturnObject() {
        var _ref3 =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {},
          _ref3$event = _ref3.event,
          event = _ref3$event === void 0 ? null : _ref3$event;

        var _this$state = this.state,
          startDate = _this$state.startDate,
          endDate = _this$state.endDate;
        var attributes = this.attributes || {};
        var return_format = correctV1Format(this.props.return_format);
        var ret = isTrue(this.props.range)
          ? {
              event: event,
              attributes: attributes,
              days_between:
                startDate && endDate
                  ? differenceInCalendarDays(endDate, startDate)
                  : null,
              start_date: startDate
                ? format(startDate, return_format)
                : null,
              end_date: endDate ? format(endDate, return_format) : null,
            }
          : {
              event: event,
              attributes: attributes,
              date:
                (startDate && format(startDate, return_format)) || null,
            };

        if (this.props.min_date || this.props.max_date) {
          ret.is_valid_start_date = !isDisabled(
            startDate,
            this.state.minDate,
            this.state.maxDate
          );
          ret.is_valid_end_date = !isDisabled(
            endDate,
            this.state.minDate,
            this.state.maxDate
          );
        }

        return ret;
      },
    },
    {
      key: 'formatSelectedDateTitle',
      value: function formatSelectedDateTitle() {
        var range = this.props.range;
        var _this$state2 = this.state,
          startDate = _this$state2.startDate,
          endDate = _this$state2.endDate;
        var _this$context$transla = this.context.translation.DatePicker,
          selected_date = _this$context$transla.selected_date,
          start = _this$context$transla.start,
          end = _this$context$transla.end;
        var currentDate = startDate ? format(startDate, 'PPPP') : null;

        if (isTrue(range) && startDate && endDate) {
          currentDate = ''
            .concat(start, ' ')
            .concat(currentDate, ' - ')
            .concat(end, ' ')
            .concat(format(endDate, 'PPPP'));
        }

        return currentDate ? selected_date.replace(/%s/, currentDate) : '';
      },
    },
    {
      key: 'render',
      value: function render() {
        var _submitParams;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$m,
          this.context.formRow,
          this.context.translation.DatePicker
        );

        if (props.locale !== locale && /en-/.test(this.context.locale)) {
          props.locale = locale;
        }

        var label = props.label,
          title = props.title,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          only_month = props.only_month,
          hide_last_week = props.hide_last_week,
          disable_autofocus = props.disable_autofocus,
          enable_keyboard_nav = props.enable_keyboard_nav,
          hide_navigation_buttons = props.hide_navigation_buttons,
          show_input = props.show_input,
          range = props.range,
          first_day = props.first_day,
          reset_date = props.reset_date,
          locale$1 = props.locale,
          link = props.link,
          sync = props.sync,
          input_element = props.input_element,
          addon_element = props.addon_element,
          shortcuts = props.shortcuts,
          disabled = props.disabled,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          mask_order = props.mask_order,
          mask_placeholder = props.mask_placeholder,
          align_picker = props.align_picker,
          _hide_navigation = props.hide_navigation,
          _return_format = props.return_format,
          _date_format = props.date_format,
          _hide_days = props.hide_days,
          _month = props.month,
          _date = props.date,
          _start_date = props.start_date,
          _end_date = props.end_date,
          _min_date = props.min_date,
          _max_date = props.max_date,
          _opened = props.opened,
          _direction = props.direction,
          _id = props.id,
          className = props.className,
          _className = props.class,
          show_submit_button = props.show_submit_button,
          show_cancel_button = props.show_cancel_button,
          show_reset_button = props.show_reset_button,
          attributes = _objectWithoutProperties(props, [
            'label',
            'title',
            'label_direction',
            'label_sr_only',
            'only_month',
            'hide_last_week',
            'disable_autofocus',
            'enable_keyboard_nav',
            'hide_navigation_buttons',
            'show_input',
            'range',
            'first_day',
            'reset_date',
            'locale',
            'link',
            'sync',
            'input_element',
            'addon_element',
            'shortcuts',
            'disabled',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'mask_order',
            'mask_placeholder',
            'align_picker',
            'hide_navigation',
            'return_format',
            'date_format',
            'hide_days',
            'month',
            'date',
            'start_date',
            'end_date',
            'min_date',
            'max_date',
            'opened',
            'direction',
            'id',
            'className',
            'class',
            'show_submit_button',
            'show_cancel_button',
            'show_reset_button',
          ]);

        var _this$props2 = this.props,
          hide_navigation = _this$props2.hide_navigation,
          hide_days = _this$props2.hide_days;

        if (isTrue(only_month)) {
          hide_days = true;
          hide_navigation = isTrue(hide_navigation_buttons) ? false : true;
        }

        var _this$state3 = this.state,
          month = _this$state3.month,
          startDate = _this$state3.startDate,
          endDate = _this$state3.endDate,
          startMonth = _this$state3.startMonth,
          endMonth = _this$state3.endMonth,
          minDate = _this$state3.minDate,
          maxDate = _this$state3.maxDate,
          opened = _this$state3.opened,
          hidden = _this$state3.hidden,
          showInput = _this$state3.showInput;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var pickerParams = {};

        if (showStatus || suffix) {
          pickerParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (label) {
          pickerParams['aria-labelledby'] = id + '-label';
        }

        var inputParams = _extends({}, attributes);

        var submitParams =
          ((_submitParams = {}),
          _defineProperty(_submitParams, 'aria-expanded', opened),
          _defineProperty(_submitParams, 'ref', this._submitButtonRef),
          _submitParams);
        var selectedDateTitle = this.formatSelectedDateTitle();
        var mainParams = {
          className: classnames(
            'dnb-date-picker dnb-form-component',
            (isTrue(range) ||
              isTrue(show_submit_button) ||
              isTrue(show_cancel_button) ||
              isTrue(show_reset_button)) &&
              'dnb-date-picker--show-footer',
            createSpacingClasses(props),
            _className,
            className,
            status && 'dnb-date-picker__status--'.concat(status_state),
            label_direction && 'dnb-date-picker--'.concat(label_direction),
            opened && 'dnb-date-picker--opened',
            hidden && 'dnb-date-picker--hidden',
            showInput && 'dnb-date-picker--show-input',
            align_picker && 'dnb-date-picker--'.concat(align_picker)
          ),
        };
        validateDOMAttributes(this.props, inputParams);
        validateDOMAttributes(null, submitParams);
        validateDOMAttributes(null, pickerParams);
        this.attributes = inputParams;
        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              label_direction: label_direction,
              sr_only: label_sr_only,
              disabled: isTrue(disabled),
            }),
          React.createElement(
            'span',
            _extends(
              {
                className: 'dnb-date-picker__inner',
                ref: this._innerRef,
              },
              pickerParams
            ),
            _ref4$3,
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text_id: id + '-status',
                width_selector: id + '-input',
                text: status,
                status: status_state,
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-date-picker__row',
              },
              React.createElement(
                'span',
                {
                  className: 'dnb-date-picker__shell',
                },
                React.createElement(
                  DatePickerInput,
                  _extends(
                    {
                      id: id,
                      title: title,
                      disabled: isTrue(disabled),
                      maskOrder: mask_order,
                      maskPlaceholder: mask_placeholder,
                      range: isTrue(range),
                      startDate: startDate,
                      endDate: endDate,
                      minDate: minDate,
                      maxDate: maxDate,
                      showInput: showInput,
                      selectedDateTitle: selectedDateTitle,
                      input_element: input_element,
                      opened: opened,
                      hidden: hidden,
                      status: status ? 'error' : null,
                      status_state: status_state,
                    },
                    inputParams,
                    {
                      submitAttributes: submitParams,
                      onChange: this.onInputChange,
                      onFocus: this.showPicker,
                      onSubmit: this.togglePicker,
                      onSubmitButtonFocus: this.onSubmitButtonFocus,
                    }
                  )
                ),
                React.createElement(
                  'span',
                  {
                    className: 'dnb-date-picker__container',
                  },
                  React.createElement('span', {
                    className: 'dnb-date-picker__triangle',
                    ref: this._triangleRef,
                  }),
                  !hidden &&
                    React.createElement(
                      React.Fragment,
                      null,
                      React.createElement(DatePickerRange, {
                        id: id,
                        range: isTrue(range),
                        firstDayOfWeek: first_day,
                        minDate: minDate,
                        maxDate: maxDate,
                        locale: locale$1,
                        resetDate: isTrue(reset_date),
                        link: isTrue(link),
                        sync: isTrue(sync),
                        hideDays: isTrue(hide_days),
                        hideNav: isTrue(hide_navigation),
                        views: isTrue(hide_navigation_buttons)
                          ? [
                              {
                                nextBtn: false,
                                prevBtn: false,
                              },
                            ]
                          : null,
                        onlyMonth: isTrue(only_month),
                        hideNextMonthWeek: isTrue(hide_last_week),
                        noAutofocus: isTrue(disable_autofocus),
                        onChange: this.onPickerChange,
                        month: month,
                        startMonth: startMonth,
                        endMonth: endMonth,
                        startDate: startDate,
                        endDate: endDate,
                        enableKeyboardNav: isTrue(enable_keyboard_nav),
                      }),
                      (addon_element || shortcuts) &&
                        React.createElement(
                          DatePickerAddon,
                          _extends({}, props, {
                            startDate: startDate,
                            endDate: endDate,
                            onChange: this.onPickerChange,
                            renderElement: addon_element,
                            shortcuts: shortcuts,
                          })
                        ),
                      React.createElement(
                        DatePickerFooter,
                        _extends({}, props, {
                          range: isTrue(range),
                          selectedDateTitle: selectedDateTitle,
                          onSubmit:
                            (isTrue(range) ||
                              isTrue(show_submit_button)) &&
                            this.onSubmitHandler,
                          onCancel:
                            (isTrue(range) ||
                              isTrue(show_cancel_button)) &&
                            this.onCancelHandler,
                          onReset:
                            isTrue(show_reset_button) &&
                            this.onResetHandler,
                        })
                      )
                    )
                )
              ),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-date-picker__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          )
        );
      },
    },
  ]);

  return DatePicker;
})(React.PureComponent);

DatePicker.tagName = 'dnb-date-picker';
DatePicker.defaultProps = defaultProps$m;
DatePicker.renderProps = renderProps$d;
DatePicker.contextType = Context;
DatePicker.blurDelay = 201;

DatePicker.parseOpened = function(state) {
  return /true|on/.test(String(state));
};

function _createSuper$o(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$p()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$p() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$e = {
  on_show: null,
  on_hide: null,
  on_change: null,
  on_select: null,
  on_state_update: null,
  trigger_component: null,
};

var defaultProps$n = _extends(
  {
    id: null,
    title: 'Option Menu',
    icon: null,
    icon_size: null,
    icon_position: null,
    triangle_position: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    scrollable: true,
    focusable: false,
    max_height: null,
    direction: 'auto',
    no_animation: false,
    no_scroll_animation: false,
    prevent_selection: false,
    more_menu: false,
    size: 'default',
    align_dropdown: null,
    trigger_component: null,
    data: null,
    default_value: null,
    value: 'initval',
    open_on_focus: false,
    prevent_close: false,
    keep_open: false,
    opened: false,
    disabled: null,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$e
);

var Dropdown = (function(_React$PureComponent) {
  _inherits(Dropdown, _React$PureComponent);

  var _super = _createSuper$o(Dropdown);

  function Dropdown() {
    _classCallCheck(this, Dropdown);

    return _super.apply(this, arguments);
  }

  _createClass(
    Dropdown,
    [
      {
        key: 'render',
        value: function render() {
          return React.createElement(
            DrawerListProvider,
            _extends({}, this.props, {
              data: this.props.data || this.props.children,
              opened: null,
              tagName: 'dnb-dropdown',
              ignore_events: false,
            }),
            React.createElement(DropdownInstance, this.props)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(Dropdown.tagName, Dropdown, defaultProps$n);
        },
      },
    ]
  );

  return Dropdown;
})(React.PureComponent);

Dropdown.tagName = 'dnb-dropdown';
Dropdown.defaultProps = defaultProps$n;
Dropdown.renderProps = renderProps$e;

var DropdownInstance = (function(_React$PureComponent2) {
  _inherits(DropdownInstance, _React$PureComponent2);

  var _super2 = _createSuper$o(DropdownInstance);

  function DropdownInstance(props) {
    var _this;

    _classCallCheck(this, DropdownInstance);

    _this = _super2.call(this, props);

    _this.setVisible = function() {
      _this.context.drawerList
        .setWrapperElement(_this._refShell.current)
        .setVisible();
    };

    _this.setHidden = function() {
      var _ref =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {},
        _ref$setFocus = _ref.setFocus,
        setFocus = _ref$setFocus === void 0 ? false : _ref$setFocus;

      _this.context.drawerList.setHidden(null, function() {
        if (setFocus) {
          setTimeout(function() {
            try {
              var elem = _this._refButton.current._ref.current;

              if (elem && typeof elem.focus === 'function') {
                elem.focus();
              }
            } catch (e) {}
          }, 1);
        }
      });
    };

    _this.onFocusHandler = function() {
      if (isTrue(_this.props.open_on_focus)) {
        _this.setVisible();
      }
    };

    _this.onBlurHandler = function() {
      if (isTrue(_this.props.open_on_focus)) {
        _this.setHidden();
      }
    };

    _this.toggleVisible = function() {
      if (
        !_this.context.drawerList.hidden &&
        _this.context.drawerList.opened
      ) {
        _this.setHidden();
      } else {
        _this.setVisible();
      }
    };

    _this.onMouseDownHandler = function() {
      if (
        !_this.context.drawerList.hidden &&
        _this.context.drawerList.opened
      ) {
        _this.setHidden();
      } else {
        _this.setVisible();
      }
    };

    _this.onTriggerKeyDownHandler = function(e) {
      switch (keycode(e)) {
        case 'enter':
        case 'space':
        case 'up':
        case 'down':
          e.preventDefault();

          _this.setVisible();

          break;

        case 'esc':
          _this.setHidden();

          break;
      }
    };

    _this.onSelectHandler = function(args) {
      if (parseFloat(args.active_item) > -1) {
        var attributes = _this.attributes || {};
        dispatchCustomElementEvent(
          _assertThisInitialized(_this),
          'on_select',
          _extends({}, args, {
            attributes: attributes,
          })
        );
      }
    };

    _this.onChangeHandler = function(args) {
      var attributes = _this.attributes || {};
      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        _extends({}, args, {
          attributes: attributes,
        })
      );
      clearTimeout(_this._selectTimeout);
      _this._selectTimeout = setTimeout(function() {
        if (!isTrue(_this.props.keep_open)) {
          _this.setHidden({
            setFocus: true,
          });
        }
      }, 1);
    };

    _this._id = props.id || makeUniqueId();
    _this.attributes = {};
    _this.state = _this.state || {};
    _this._ref = React.createRef();
    _this._refShell = React.createRef();
    _this._refButton = React.createRef();
    var dep = 'selected_item';

    if (typeof props[dep] !== 'undefined') {
      console.warn(
        'Dropdown: Please use "value" instead of "'.concat(dep, '".')
      );
    }

    return _this;
  }

  _createClass(DropdownInstance, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (isTrue(this.props.opened)) {
          this.setVisible();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.setHidden();
        clearTimeout(this._hideTimeout);
        clearTimeout(this._selectTimeout);
      },
    },
    {
      key: 'getTitle',
      value: function getTitle() {
        var title =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : null;
        var data = this.context.drawerList.data;

        if (
          (data === null || data === void 0 ? void 0 : data.length) > 0
        ) {
          var currentOptionData = getCurrentData(
            this.context.drawerList.selected_item,
            data
          );

          if (currentOptionData) {
            title =
              currentOptionData.selected_value ||
              parseContentTitle(currentOptionData);
          }
        }

        return title;
      },
    },
    {
      key: 'render',
      value: function render() {
        var _extends2;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$n,
          this.context.formRow,
          this.context.translation.Dropdown
        );

        var label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          icon_size = props.icon_size,
          size = props.size,
          align_dropdown = props.align_dropdown,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          scrollable = props.scrollable,
          focusable = props.focusable,
          keep_open = props.keep_open,
          prevent_close = props.prevent_close,
          no_animation = props.no_animation,
          no_scroll_animation = props.no_scroll_animation,
          triangle_position = props.triangle_position,
          CustomTrigger = props.trigger_component,
          more_menu = props.more_menu,
          prevent_selection = props.prevent_selection,
          max_height = props.max_height,
          default_value = props.default_value,
          className = props.className,
          _className = props.class,
          disabled = props.disabled,
          titleProp = props.title,
          _icon = props.icon,
          _icon_position = props.icon_position,
          _data = props.data,
          _children = props.children,
          _direction = props.direction,
          _id = props.id,
          _opened = props.opened,
          _value = props.value,
          attributes = _objectWithoutProperties(props, [
            'label',
            'label_direction',
            'label_sr_only',
            'icon_size',
            'size',
            'align_dropdown',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'scrollable',
            'focusable',
            'keep_open',
            'prevent_close',
            'no_animation',
            'no_scroll_animation',
            'triangle_position',
            'trigger_component',
            'more_menu',
            'prevent_selection',
            'max_height',
            'default_value',
            'className',
            'class',
            'disabled',
            'title',
            'icon',
            'icon_position',
            'data',
            'children',
            'direction',
            'id',
            'opened',
            'value',
          ]);

        var icon = props.icon,
          icon_position = props.icon_position;
        var id = this._id;
        var isPopupMenu = isTrue(more_menu) || isTrue(prevent_selection);

        if (isPopupMenu) {
          icon = icon || (isTrue(more_menu) ? 'more' : 'chevron_down');

          if (!icon_position && align_dropdown !== 'right') {
            icon_position = 'left';
          }
        }

        var _this$context$drawerL = this.context.drawerList,
          selected_item = _this$context$drawerL.selected_item,
          direction = _this$context$drawerL.direction,
          opened = _this$context$drawerL.opened;
        var showStatus = status && status !== 'error';
        var title = this.getTitle(titleProp);

        _extends(
          this.context.drawerList.attributes,
          validateDOMAttributes(null, attributes)
        );

        var mainParams = {
          className: classnames(
            'dnb-dropdown dnb-dropdown--'.concat(
              direction,
              ' dnb-form-component'
            ),
            createSpacingClasses(props),
            _className,
            className,
            isPopupMenu &&
              'dnb-dropdown--is-popup' +
                (typeof more_menu === 'string'
                  ? ' dnb-dropdown--more_menu'
                  : ''),
            opened && 'dnb-dropdown--opened',
            label_direction && 'dnb-dropdown--'.concat(label_direction),
            icon_position &&
              'dnb-dropdown--icon-position-'.concat(
                icon_position || 'right'
              ),
            size && 'dnb-dropdown--'.concat(size),
            align_dropdown && 'dnb-drawer-list--'.concat(align_dropdown),
            status && 'dnb-dropdown__status--'.concat(status_state),
            showStatus && 'dnb-dropdown__form-status'
          ),
        };

        var triggerParams = _extends(
          ((_extends2 = {
            className:
              'dnb-dropdown__trigger' +
              (opened ? ' dnb-button--active' : ''),
            id: id,
            disabled: disabled,
          }),
          _defineProperty(_extends2, 'aria-haspopup', 'listbox'),
          _defineProperty(_extends2, 'aria-expanded', opened),
          _defineProperty(
            _extends2,
            'aria-controls',
            ''.concat(id, '-drawer-list')
          ),
          _extends2),
          attributes,
          {
            onFocus: this.onFocusHandler,
            onBlur: this.onBlurHandler,
            onMouseDown: this.onMouseDownHandler,
            onKeyDown: this.onTriggerKeyDownHandler,
          }
        );

        if (typeof title === 'string') {
          triggerParams['aria-label'] = title;
        }

        if (showStatus || suffix) {
          triggerParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        validateDOMAttributes(null, mainParams);
        validateDOMAttributes(this.props, triggerParams);
        this.attributes = validateDOMAttributes(null, attributes);
        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              label_direction: label_direction,
              sr_only: label_sr_only,
              disabled: disabled,
              onMouseDown: this.toggleVisible,
            }),
          React.createElement(
            'span',
            {
              className: 'dnb-dropdown__inner',
              ref: this._ref,
            },
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text_id: id + '-status',
                text: status,
                status: status_state,
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-dropdown__row',
              },
              React.createElement(
                'span',
                {
                  className: 'dnb-dropdown__shell',
                  ref: this._refShell,
                },
                CustomTrigger
                  ? React.createElement(CustomTrigger, triggerParams)
                  : React.createElement(
                      Button,
                      _extends(
                        {
                          variant: 'secondary',
                          size: size === 'default' ? 'medium' : size,
                          ref: this._refButton,
                        },
                        triggerParams
                      ),
                      !isPopupMenu &&
                        React.createElement(
                          'span',
                          {
                            className: 'dnb-dropdown__text',
                          },
                          React.createElement(
                            'span',
                            {
                              className: 'dnb-dropdown__text__inner',
                            },
                            title
                          )
                        ),
                      React.createElement(
                        'span',
                        {
                          'aria-hidden': true,
                          className:
                            'dnb-dropdown__icon' +
                            (parseFloat(selected_item) === 0
                              ? ' dnb-dropdown__icon--first'
                              : ''),
                        },
                        icon !== false &&
                          React.createElement(IconPrimary, {
                            'aria-hidden': true,
                            icon: icon || 'chevron_down',
                            size:
                              icon_size ||
                              (size === 'large' ? 'medium' : 'default'),
                          })
                      )
                    ),
                React.createElement(DrawerList, {
                  id: id,
                  inner_class: 'dnb-dropdown__list',
                  value: selected_item,
                  default_value: default_value,
                  scrollable: scrollable,
                  focusable: focusable,
                  no_animation: no_animation,
                  no_scroll_animation: no_scroll_animation,
                  prevent_selection: prevent_selection,
                  triangle_position:
                    triangle_position || icon_position || 'right',
                  keep_open: keep_open,
                  prevent_close: prevent_close,
                  button_only: isPopupMenu,
                  align_drawer: align_dropdown,
                  disabled: disabled,
                  max_height: max_height,
                  direction: direction,
                  size: size,
                  on_change: this.onChangeHandler,
                  on_select: this.onSelectHandler,
                })
              ),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-dropdown__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          )
        );
      },
    },
  ]);

  return DropdownInstance;
})(React.PureComponent);

DropdownInstance.defaultProps = defaultProps$n;
DropdownInstance.contextType = DrawerListContext;

function _createSuper$p(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$q()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$q() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$f = {
  render_content: null,
};

var defaultProps$o = _extends(
  {
    id: null,
    element: 'form',
    no_form: false,
    prevent_submit: false,
    disabled: null,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$f
);

var FormSet = (function(_React$PureComponent) {
  _inherits(FormSet, _React$PureComponent);

  var _super = _createSuper$p(FormSet);

  _createClass(FormSet, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(FormSet.tagName, FormSet, defaultProps$o);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (typeof props.render_content === 'function')
          props.render_content(props);
        return processChildren(props);
      },
    },
  ]);

  function FormSet(props) {
    var _this;

    _classCallCheck(this, FormSet);

    _this = _super.call(this, props);

    _this.onSubmitHandler = function(event) {
      var prevent_submit = _this.props.prevent_submit;

      if (isTrue(prevent_submit)) {
        event.preventDefault();
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_submit',
        {
          event: event,
        }
      );
    };

    _this._id = props.id || makeUniqueId();
    return _this;
  }

  _createClass(FormSet, [
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          element = _this$props.element,
          no_form = _this$props.no_form,
          prevent_submit = _this$props.prevent_submit,
          disabled = _this$props.disabled,
          id = _this$props.id,
          className = _this$props.className,
          _className = _this$props.class,
          rest = _objectWithoutProperties(_this$props, [
            'element',
            'no_form',
            'prevent_submit',
            'disabled',
            'id',
            'className',
            'class',
          ]);

        var formRowProps = Object.entries(rest).reduce(function(
          acc,
          _ref
        ) {
          var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

          if (
            typeof propTypes$2[k] !== 'undefined' &&
            k !== 'id' &&
            k !== 'children' &&
            k !== 'label' &&
            k !== 'render_content'
          ) {
            acc[k] = v;
          }

          return acc;
        },
        {});
        var attributes = Object.entries(rest).reduce(function(acc, _ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
            k = _ref4[0],
            v = _ref4[1];

          if (typeof formRowProps[k] === 'undefined') {
            acc[k] = v;
          }

          return acc;
        }, {});

        var params = _extends(
          {
            className: classnames(
              'dnb-form-set',
              createSpacingClasses(this.props),
              className,
              _className
            ),
          },
          attributes
        );

        if (!isTrue(no_form)) {
          params.onSubmit = this.onSubmitHandler;
        }

        validateDOMAttributes(this.props, params);
        var content = FormSet.getContent(this.props);

        if (sum(this._cachedContext) !== sum(this.context)) {
          this._cachedContext = this.context;

          var formRow = _extends({}, formRowProps, {
            disabled: disabled,
          });

          this._contextWeUse = extend(this.context, {
            formRow: formRow,
          });
        }

        return React.createElement(
          Context.Provider,
          {
            value: this._contextWeUse,
          },
          React.createElement(
            Element$1,
            _extends(
              {
                is: isTrue(no_form) ? 'div' : element,
              },
              params
            ),
            content
          )
        );
      },
    },
  ]);

  return FormSet;
})(React.PureComponent);

FormSet.tagName = 'dnb-form-set';
FormSet.defaultProps = defaultProps$o;
FormSet.contextType = Context;

var Element$1 = function Element(_ref5) {
  var Element = _ref5.is,
    children = _ref5.children,
    rest = _objectWithoutProperties(_ref5, ['is', 'children']);

  return React.createElement(Element, rest, children);
};

var Element$2 = React.forwardRef(function(_ref, ref) {
  var className = _ref.className,
    _className = _ref.class,
    useClass = _ref.useClass,
    css = _ref.css,
    Tag = _ref.is,
    rest = _objectWithoutProperties(_ref, [
      'className',
      'class',
      'useClass',
      'css',
      'is',
    ]);

  rest.className = classnames(
    useClass ? useClass : 'dnb-'.concat(Tag),
    createSpacingClasses(rest),
    className,
    _className,
    css
  );
  validateDOMAttributes(null, rest);
  return React.createElement(
    Tag,
    _extends(
      {
        ref: ref,
      },
      rest
    )
  );
});
Element$2.defaultProps = {
  className: null,
  class: null,
  useClass: null,
  css: null,
};

var H1 = function H1(_ref) {
  var style_type = _ref.style_type,
    className = _ref.className,
    p = _objectWithoutProperties(_ref, ['style_type', 'className']);

  if (style_type) {
    className = classnames('dnb-h1--'.concat(style_type), className);
  }

  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h1',
      },
      p,
      {
        className: className,
      }
    )
  );
};

H1.tagName = 'dnb-h1';
H1.defaultProps = {
  className: null,
  style_type: null,
};

var P = function P(_ref) {
  var style_type = _ref.style_type,
    className = _ref.className,
    p = _objectWithoutProperties(_ref, ['style_type', 'className']);

  if (style_type) {
    if (/ /.test(style_type)) {
      style_type = style_type.split(/ /g).reduce(function(acc, cur) {
        return ''.concat(acc, ' dnb-p--').concat(cur);
      }, '');
      className = classnames(style_type, className);
    } else {
      className = classnames('dnb-p--'.concat(style_type), className);
    }
  }

  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'p',
      },
      p,
      {
        className: className,
      }
    )
  );
};

P.tagName = 'dnb-p';
P.defaultProps = {
  className: null,
  style_type: null,
};

function _createSuper$q(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$r()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$r() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$g = {
  render_content: null,
};

var defaultProps$p = _extends(
  {
    status: null,
    status_content: null,
    back: 'Tilbake',
    title: null,
    text: null,
    href: null,
    className: null,
    children: null,
    class: null,
  },
  renderProps$g
);

var GlobalError = (function(_React$PureComponent) {
  _inherits(GlobalError, _React$PureComponent);

  var _super = _createSuper$q(GlobalError);

  function GlobalError() {
    _classCallCheck(this, GlobalError);

    return _super.apply(this, arguments);
  }

  _createClass(
    GlobalError,
    [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            status = _this$props.status,
            back = _this$props.back,
            href = _this$props.href,
            _render_content = _this$props.render_content,
            _status_content = _this$props.status_content,
            _title = _this$props.title,
            _text = _this$props.text,
            className = _this$props.className,
            _className = _this$props.class,
            attributes = _objectWithoutProperties(_this$props, [
              'status',
              'back',
              'href',
              'render_content',
              'status_content',
              'title',
              'text',
              'className',
              'class',
            ]);

          var _this$props2 = this.props,
            status_content = _this$props2.status_content,
            useTitle = _this$props2.title,
            useText = _this$props2.text,
            useAlt = _this$props2.alt;

          if (useTitle) {
            useTitle = renderOrNot(useTitle);
          }

          if (useText) {
            useText = renderOrNot(useText);
          }

          if (
            typeof status_content === 'string' &&
            status_content[0] === '{'
          ) {
            status_content = JSON.parse(status_content);
          }

          if (status_content === null) {
            var contextContent = this.context.translation.GlobalError;
            status_content = contextContent;
          }

          if (status_content && status_content[status]) {
            var _status_content$statu = status_content[status],
              title = _status_content$statu.title,
              text = _status_content$statu.text,
              alt = _status_content$statu.alt;

            if (!useTitle && useTitle !== '') {
              useTitle = title;
            }

            if (!useText && useText !== '') {
              useText = text;
            }

            if (!useAlt && useAlt !== '') {
              useAlt = alt;
            }
          }

          var backHandler = function backHandler() {
            return (
              !href &&
              (typeof window !== 'undefined'
                ? window.history.back()
                : null)
            );
          };

          if (typeof useText === 'string' && /\[/.test(useText)) {
            try {
              var parts = useText.split(/\[(.*)\](\(\/back\))/g);

              if (parts.length > 1) {
                var backIndex = parts.findIndex(function(v) {
                  return /\/back/.test(v);
                });

                if (backIndex !== -1) {
                  parts[backIndex - 1] = React.createElement(
                    'a',
                    {
                      className: 'dnb-anchor',
                      href: ';',
                      onClick: backHandler,
                    },
                    parts[1]
                  );
                  useText = parts
                    .filter(function(v) {
                      return v && !/\/back/.test(v);
                    })
                    .map(function(c, i) {
                      return React.createElement(
                        React.Fragment,
                        {
                          key: i,
                        },
                        c
                      );
                    });
                }
              }
            } catch (e) {
              console.warn(e);
            }
          }

          var textParams = {};

          if (typeof useText === 'string') {
            textParams.dangerouslySetInnerHTML = {
              __html: useText,
            };
          } else {
            textParams.children = useText;
          }

          var additionalContent = GlobalError.getContent(this.props);

          var params = _extends(
            {
              className: classnames(
                'dnb-global-error dnb-global-error--'.concat(status),
                createSpacingClasses(this.props),
                className,
                _className
              ),
            },
            attributes
          );

          return React.createElement(
            'div',
            params,
            React.createElement(
              'div',
              {
                className: 'dnb-global-error__inner',
              },
              (typeof back === 'string' &&
                React.createElement(Button, {
                  className: 'dnb-global-error__back',
                  variant: 'tertiary',
                  icon: 'chevron_left',
                  icon_position: 'left',
                  text: back,
                  href: href,
                  on_click: backHandler,
                })) ||
                back,
              React.createElement(Svg, {
                status: this.props.status,
                title: useAlt,
                role: 'img',
                className: 'dnb-global-error__gfx',
              }),
              React.createElement(
                'div',
                {
                  className: 'dnb-global-error__inner__content',
                },
                React.createElement(
                  H1,
                  {
                    top: '4',
                    bottom: 'large',
                  },
                  useTitle
                ),
                React.createElement(
                  P,
                  _extends(
                    {
                      bottom: 'large',
                    },
                    textParams
                  )
                )
              ),
              additionalContent
            )
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            GlobalError.tagName,
            GlobalError,
            defaultProps$p
          );
        },
      },
      {
        key: 'getContent',
        value: function getContent(props) {
          if (typeof props.render_content === 'function') {
            props.render_content(props);
          }

          return processChildren(props);
        },
      },
    ]
  );

  return GlobalError;
})(React.PureComponent);

GlobalError.tagName = 'dnb-global-error';
GlobalError.defaultProps = defaultProps$p;
GlobalError.contextType = Context;

var renderOrNot = function renderOrNot(C) {
  return typeof C === 'function' ? C() : C;
};

var Svg = function Svg(_ref) {
  var status = _ref.status,
    props = _objectWithoutProperties(_ref, ['status']);

  switch (parseFloat(status)) {
    case 404:
    default:
      return React.createElement(Svg404, props);

    case 500:
      return React.createElement(Svg500, props);
  }
};

var _ref3$8 = React.createElement('path', {
  d: 'M104 96s6 16 5 21c0 6 13 4 22-8 9-11-26-14-26-14l-1 1z',
  fill: '#00313B',
});

var _ref4$4 = React.createElement('path', {
  d:
    'M235 282l-15-1-10-63-6-26-5 88-26-24s-3-69-2-90l3-26 10-2 23-27 5 9 3 5 4 5 1-1c7 8 15 18 14 42 0 15-6 60-6 60l7 51z',
  fill: '#35AD80',
});

var _ref5$2 = React.createElement('path', {
  d:
    'M257 87l-12-2V74l13 2-1 11zM111 247c-18-3-38-6-57-2-18 4-37 15-47 33-10 19-9 45 5 60 7 7 17 10 27 11 29 4 58-6 87-7 48 0 95 28 142 14 16-5 30-12 45-22 9-6 19-15 24-26 6-15-2-33-14-42s-27-11-41-12c-15-1-30-1-43-7',
  fill: '#A5E1D2',
});

var _ref6$1 = React.createElement('path', {
  d:
    'M65 288v-1c0-3-2-6-6-6-1-2-3-3-5-3-3 0-5 2-6 4l-2-1c-3 0-6 3-6 6 0 4 3 6 6 6h1c1 2 3 2 5 2s4 0 6-2h9l1-2-3-3z',
  fill: '#fff',
});

var _ref7 = React.createElement('path', {
  d: 'M181 193L59 180l53-31h1l109 11',
  fill: '#00313B',
});

var _ref8 = React.createElement('path', {
  d: 'M220 279l-41 35 2-122 42-32-2 117-1 2z',
  fill: '#12555A',
});

var _ref9 = React.createElement('path', {
  d: 'M239 189l-17-29-41 32 20 29c1 1 2 2 3 1l35-29v-4z',
  fill: '#007272',
});

var _ref10 = React.createElement('path', {
  d: 'M179 314L64 299v-1l-5-118 122 12-2 122z',
  fill: '#00313B',
});

var _ref11 = React.createElement('path', {
  d: 'M181 192l-14 35-3 2-121-15c-2 0-2-2-1-3l17-31 122 12z',
  fill: '#12555A',
});

var _ref12 = React.createElement('path', {
  d: 'M275 246l-76-11 29-18 2-1 63 8',
  fill: '#007272',
});

var _ref13 = React.createElement('path', {
  d: 'M292 290l-18 28 1-72 18-22-1 65v1z',
  fill: '#12555A',
});

var _ref14$1 = React.createElement('path', {
  d: 'M274 318l-74-11s-20 16-18 17l74 10 18-16z',
  fill: '#007272',
});

var _ref15$1 = React.createElement('path', {
  d: 'M274 318l-74-11-1-72 76 11-1 72z',
  fill: '#00313B',
});

var _ref16 = React.createElement('path', {
  d:
    'M275 245l-12 25-2 1-73-11c-1 0-2-1-1-2l12-23h1l75 10zM136 104c4-23 28-32 30-32 11-3 9 8 13 8 9 2 21 10 29 26l8 16 5 8-14 11c-5 4-12 7-20 8l-15-1v-2c1-4 1-7-2-11l-1-2-2 1c-8 4-16-1-20-7l-4-8s-9-4-7-15z',
  fill: '#007272',
});

var _ref17 = React.createElement('path', {
  d:
    'M166 72l39-8h8l35 9 1 2-1 9-1 1-24-1c-2 0-13-2-14-1l-25 8M129 126v36l-5 24 14 2 9-29h1l7-41-14-18-6 2c-6 6-6 16-6 24z',
  fill: '#007272',
});

var _ref18 = React.createElement('path', {
  d:
    'M267 84c-5 5-12 5-15 0-3-4 0-14 6-13 5 1 10-5 13-2 3 4 1 11-4 15zM163 94c3 6 3 12-3 16-4 4-11 4-15-3-4-5-5-15 0-18 6-3 11-5 18 5z',
  fill: '#A5E1D2',
});

var _ref19 = React.createElement('path', {
  d:
    'M129 71c4 1 5 4 8 6l10 3c5 2 6 8 5 13s-4 9-6 10l-6-2c-2 12-16 11-26 5-13-7-15-13-11-25 3-7 13-13 26-10z',
  fill: '#A5E1D2',
});

var _ref20 = React.createElement('path', {
  d:
    'M138 72c-3-6-9-11-19-11-19-1-29 19-23 32 0 0 0 5 4 7 3 2 7 0 10-2 2-3 4-5 7-6l4-3c5-5 8-13 10-10 7 9 12 17 16 4 1-4-7-8-9-11z',
  fill: '#00313B',
});

var _ref21 = React.createElement('path', {
  d: 'M128 74s7 15 7 20c0 6 12 5 18-7 2-4-21-22-21-22l-4 9z',
  fill: '#00313B',
});

var _ref22 = React.createElement('path', {
  d: 'M133 89c-3 2-7 0-10-3-2-4-2-8 0-10 3-1 7 0 9 4 2 3 3 8 1 9z',
  fill: '#A5E1D2',
});

var _ref23 = React.createElement('path', {
  d:
    'M312 2c-3-3-7-2-10 0l-1-1c-4-1-7 2-7 5-3 2-4 6-2 9s6 4 9 1l2 1 4-2c2-1 3-4 3-6l2-3V2zM31 133c2-3 7-2 10-1h1c3-2 6 1 7 4 3 1 5 5 3 8s-6 4-9 2h-2c-2 1-3 0-4-1-2-1-4-3-3-6l-3-2v-4zM212 351l-1-1c1-1 0-3-1-4-2-2-5-3-8-3a7 7 0 0 0-5 5h-1c-2-1-4 0-5 1h-2c-3 0-4 1-4 4 0 2 1 4 3 4h1l5 1c1 2 7 3 8 0 0 0 4 2 8 1 3-2 4-5 2-8z',
  fill: '#fff',
});

var _ref24 = React.createElement('path', {
  d:
    'M227 283l1-1 1-3c2-3 6-3 8-2 2 0 2 1 3 2l1 3 1-1 5 2h2c2 0 4 2 3 4 0 2-2 4-4 4h-5c-1 1-3 2-5 1-3-2-6-1-10-2-3 0-3-5-1-7z',
  fill: '#12555A',
});

var _ref25 = React.createElement('path', {
  d:
    'M146 304c-2-2-5-4-9-4-3 1-5 2-6 4l-3-1c-3 1-6 4-5 8 0 3 3 5 7 5h2l6 2 5-2 4 1a6 6 0 0 0-1-13z',
  fill: '#fff',
});

var _ref26 = React.createElement('path', {
  d: 'M197 90l-13 1 10-3a232 232 0 0 0 3 2z',
  fill: '#12555A',
});

var _ref27 = React.createElement('path', {
  d:
    'M326 264c-2 0-5 2-6 4-2 0-4 2-4 4 0 3 2 4 5 4h5c4 0 7-2 7-6 0-3-3-6-7-6z',
  fill: '#fff',
});

var _ref28 = React.createElement('path', {
  d: 'M200 306l22-17-20 18h-2v-1zM250 299l4-2-4-2c-2 0-3 1-3 2s1 2 3 2z',
  fill: '#12555A',
});

var _ref29 = React.createElement('path', {
  d:
    'M105 43l-5-11c-1-2-4-1-3 1l7 11c0 1 2 0 1-1zM125 39l1-13c0-2-3-3-3-1v14h2zM147 33l-6 11c-1 1 0 2 1 1l8-10c1-2-1-3-3-2z',
  fill: '#007272',
});

var _ref30 = React.createElement('path', {
  d: 'M112 101l4 9c0 2 5-2 5-2l-9-7z',
  fill: '#A5E1D2',
});

var Svg404 = function Svg404(_ref2) {
  var title = _ref2.title,
    props = _objectWithoutProperties(_ref2, ['title']);

  return React.createElement(
    'svg',
    _extends(
      {
        width: '339',
        height: '360',
        fill: 'none',
        xmlns: 'http://www.w3.org/2000/svg',
      },
      props
    ),
    React.createElement('title', null, title),
    _ref3$8,
    _ref4$4,
    _ref5$2,
    _ref6$1,
    _ref7,
    _ref8,
    _ref9,
    _ref10,
    _ref11,
    _ref12,
    _ref13,
    _ref14$1,
    _ref15$1,
    _ref16,
    _ref17,
    _ref18,
    _ref19,
    _ref20,
    _ref21,
    _ref22,
    _ref23,
    _ref24,
    _ref25,
    _ref26,
    _ref27,
    _ref28,
    _ref29,
    _ref30
  );
};

var _ref32 = React.createElement('path', {
  opacity: '.4',
  d:
    'M154.8 360c23.7 0 60-7 79.5-14.8 32.5-13 56.6-18.3 91-14.2 13.1 1.5 46.2 6.2 60.5 5.9 88.4-1.8 115.9-49 113.2-92.7-2.8-43.8-66.4-75.4-142.2-70.7-5.7.4-11.1.8-16.5 1.6-37 4.9-70.3 6.4-106.6-4.5a257 257 0 0 0-100.5-10.3C63.4 165.7-3.4 207.7.2 265.2 3.6 322.7 45.3 360 154.7 360z',
  fill: '#A3DFD0',
});

var _ref33 = React.createElement('path', {
  d:
    'M58.4 313.7c10.2 0 18.5-2.2 18.5-5 0-2.9-8.3-5.1-18.5-5.1-10.1 0-18.4 2.2-18.4 5 0 2.9 8.3 5.1 18.4 5.1zM91.5 313.7c6 0 11-2.2 11-5 0-2.9-5-5.1-11-5.1-6.2 0-11.1 2.2-11.1 5 0 2.9 5 5.1 11 5.1z',
  fill: '#A3DFD0',
});

var _ref34 = React.createElement('path', {
  d:
    'M237.2 75l.9-7.8 6.4 1 3.4.4s1.4.3 2.1-.8c.8-1.1 2.4-4.5 2.8-7.3.3-3 32.8 23 32.8 23s-38.7-1.4-42.4-3.6a34 34 0 0 1-6-5z',
  fill: '#2BB280',
});

var _ref35 = React.createElement('path', {
  d:
    'M269 97.9c-4.5 8-26.2 23.4-35.2 21.7-7.3-1.4-9.3-5.4-9.2-27.6.1-30 13.8-13.7 21.1-12.4 4.9.9 21.4 2 25.3 4.7 1.9 1.4-1.4 12.6-2 13.6z',
  fill: '#00343D',
});

var _ref36 = React.createElement('path', {
  d:
    'M210.5 27.8c6 0 8.9 3.5 14 5.3 3.4 1.1 16.4 0 16.4 0 7.1 2 10.7 9.5 12 17.1 1.2 7.9-.9 17-3.8 18.3-1 .5-10.8-1.2-10.8-1.2-3 32-9.2 24.8-36 17.5-22.5-6-28.4-13.6-26.7-32.8 1-11.7 13.6-23.8 35-24.2z',
  fill: '#A3DFD0',
});

var _ref37 = React.createElement('path', {
  d:
    'M223.9 26c-6.6-6.5-18-12-31.8-8.7-28.7 6.8-35.3 35.4-21.8 51.3 0 0 3 8.4 8.8 8.9 4 .4-.5-3.6 9.2-8 2.7-1 6.6-2 8.9-3.9a26 26 0 0 0 6.5-7.1c.4-1.1 3 0 4.3-.1 2.2-.1 6.1-.4 5.4-4.3-.2-1.3-6.8-6.2-6.5-7.3 1-6 2.5-10 10.7-6.6 12.1 5 17-2.1 17-5.7 0-2.5-4.7-2-5.5-3.1-1.2-1.6-3.2-3.3-5.2-5.4z',
  fill: '#00343D',
});

var _ref38 = React.createElement('path', {
  d:
    'M229.3 31.4S194.8 45.6 178.8 74l-5 8.8s-4.5 3-2.1-8.7c0 0-26.4-32 2.6-55 29.8-23.5 51.6 8 51.6 8s8.9-1.3 7.4 1.6c-1 1.7-4 2.6-4 2.6z',
  fill: '#017272',
});

var _ref39 = React.createElement('path', {
  d: 'M194.5 80.3s10 11.4 12 14c2 2.6 7.3-6.9 7.3-6.9l-19.3-7.1z',
  fill: '#A3DFD0',
});

var _ref40 = React.createElement('path', {
  d:
    'M180.1 19.5h-.2c-1.5 0-2.8-1.2-3.5-3a14.4 14.4 0 0 1 .8-11.5c1.2-1.8 2.6-2.8 4-2.7 1.5.1 2.7 1.3 3.5 3.1a14.4 14.4 0 0 1-.9 11.5c-.8 1.8-2.2 2.6-3.7 2.6zm1-14.5c-.4 0-1 .4-1.5 1.2-.7 1.1-1.1 2.7-1.2 4.5-.1 1.8 0 3.4.4 4.6.4.9.9 1.5 1.3 1.5.3 0 1-.5 1.5-1.2.6-1.1 1-2.7 1.2-4.5 0-1.8-.1-3.4-.7-4.6-.2-.9-.6-1.5-1-1.5z',
  fill: '#017272',
});

var _ref41 = React.createElement('path', {
  d:
    'M172 23.1h-1.2c-4.9-.4-8.4-2.9-8.2-5.6 0-1.5 1.2-2.8 3-3.5 1.7-.7 3.8-.9 5.9-.8 4.9.4 8.5 3 8.3 5.7-.1 1.5-1.3 2.7-3.1 3.5-1.3.4-2.9.7-4.6.7zm-1.6-7.4c-1.4 0-2.7.3-3.6.6-.9.4-1.5.9-1.5 1.3-.1.8 2.2 2.5 5.7 2.7 1.8 0 3.4-.1 4.6-.5.9-.4 1.5-.8 1.5-1.2.1-.8-2.2-2.5-5.7-2.7l-1-.2z',
  fill: '#017272',
});

var _ref42 = React.createElement('path', {
  d:
    'M220.4 50.7c2.4-3.7 0-9.6-5.4-13.2-5.4-3.6-11.8-3.5-14.2.3-2.5 3.7-.1 9.6 5.3 13.2 5.4 3.6 11.8 3.5 14.3-.3zM186.6 94a49 49 0 0 1 18.8 6.5c3 2 4.7 4.2 4.3 6.2-.8 5-12.3 7-26 5-13.6-2.2-24-8-23.2-12.8 1-4.9 12.6-7 26.1-4.9z',
  fill: '#A3DFD0',
});

var _ref43 = React.createElement('path', {
  d:
    'M198 104.2l-.6-.1-.7-.4c-.4-.3-.5-.3-1.5-.6-.8-.3-1.1-1-.9-1.8.3-.8 1-1.2 1.8-.9l2 .8.6.4c.6.3.8 1 .6 1.7-.2.7-.8.9-1.3.9zM167.5 101.7c-.4 0-.8-.2-1-.6-.5-.7-.2-1.5.4-1.9 3.2-2 11-2.3 19.2-1.1 1.1 0 2.2.4 3.2.6.7.1 1.2.9 1 1.6 0 .8-.8 1.3-1.6 1-1-.2-2.2-.3-3.1-.6-8.3-1.4-15-.7-17.3.8a1 1 0 0 1-.8.2z',
  fill: '#fff',
});

var _ref44 = React.createElement('path', {
  d:
    'M194.2 114.5c-3.4 0-7-.2-10.7-.8-13.2-2.2-26-8-24.8-15 1.1-7.1 15-8.6 28.3-6.5 8 1.3 15 3.8 19.8 7 4.9 3.1 5.4 6.1 5 8.2-.8 4.9-8.4 7.1-17.6 7.1zm-17.6-19.2c-8.3 0-13.5 2-13.9 4-.4 2.7 7.8 8.3 21.5 10.3 13.7 2.3 23.2-.3 23.7-3 0-1.2-1.1-2.8-3.5-4.3a50 50 0 0 0-18-6.2c-3.6-.6-7-.8-9.8-.8z',
  fill: '#00313B',
});

var _ref45 = React.createElement('path', {
  d: 'M210.1 106l-.4 3.1 9.7 1.5.5-3.2-9.8-1.4z',
  fill: '#00313B',
});

var _ref46 = React.createElement('path', {
  d:
    'M253 118.4h-.6l-33-5.5c-2-.3-3.4-2.2-3.1-4.3.3-2 2.2-3.5 4.3-3l33 5.4c2 .3 3.4 2.2 3.1 4.3a3.7 3.7 0 0 1-3.7 3z',
  fill: '#017272',
});

var _ref47 = React.createElement('path', {
  d:
    'M249.2 111.8c.5-5.7-5-10.8-12.1-11.3-7.2-.6-13.3 3.6-13.8 9.3-.4 5.7 5 10.7 12.2 11.3 7.1.6 13.3-3.6 13.7-9.3z',
  fill: '#A3DFD0',
});

var _ref48 = React.createElement('path', {
  d:
    'M283.3 178.1l-5.5 8.4 20 8.8 6.6-11.2-21-6zM418.2 169.2l8.3 10.2s12.2-3.4 15.3-9l-6.4-10',
  fill: '#2BB280',
});

var _ref49 = React.createElement('path', {
  d:
    'M323.5 89L295 122.9c-.7.8-1.2 1.6-1.4 2.5L279 171.1a8 8 0 0 0 2 7.9c4.7 4.3 13.8 11 23.6 9.5a7.6 7.6 0 0 0 5.7-4.5l17.6-40.4c.4-.9 1-1.6 1.6-2.4l22.7-22.2c3-3 7.9-2.9 10.7.3l48.2 52a7.6 7.6 0 0 0 6.5 2.3c4.2-.5 11.4-2.3 18-7.7 3-2.6 3.7-6.8 1.6-10L404 104.4a7.9 7.9 0 0 1-.3-8l4.6-8a7.5 7.5 0 0 0-7.5-11.2l-73.1 9.2c-1.4.2-3 1-4.3 2.6z',
  fill: '#00343D',
});

var _ref50 = React.createElement('path', {
  d:
    'M235 29.8s12-28 41.2-29.5c29.2-1.6 42.4 4.7 81 1.8 36.2-3 43.6 9.6 50.4 22.6 5.8 10.7 11.2 43.3 14.5 54a8 8 0 0 1-1 6.8l-43.8 63a4 4 0 0 1-6.4.5l-48.2-57.8 6.1-11.7s-16.3 2.3-40.6 4.8c-3.2.4-6.8-3.3-9.9-4',
  fill: '#017272',
});

var _ref51 = React.createElement('path', {
  d:
    'M233.7 35c-.4-2.1-2.4-2.7-2.4-2.7 1.5-1.5 3.4-4.7 5.4-6.8 1.4-1.4 6.6-1.5 11-2.3 1.1 0 2 0 2.2 1 1.5 7.3 10 29 10.8 28 1-.8 3-3.5 6.4-7.2 1.5-1.4 3-.3 3 .8.9 6.5 8.7 28.7 23.8 37.7.9.5-5 1.2-6 1-15-4-42.6-25.3-57-43.8.2-.3 3.3-2.4 2.8-5.6z',
  fill: '#12555A',
});

var _ref52 = React.createElement('path', {
  d:
    'M276.4 85.8s-19.5 2.4-26 2c-11.1-1-15.8-2.4-15.8-2.4a40 40 0 0 0 2.6-11v-.1s5.3 3.2 13.9 5.3c3.8 1 15 2.2 19 2.3l12.2.8 6.5.4s3-1.1 3.8-.6c1.5 1 3.9 1.2 3.9 1.2l-20.1 2.1z',
  fill: '#12555A',
});

var _ref53 = React.createElement('path', {
  d:
    'M332.4 109c1-6.5-4.3-12.7-11.8-13.7-7.5-1.1-14.3 3.3-15.2 9.9-1 6.5 4.3 12.6 11.8 13.7 7.5 1 14.3-3.3 15.2-9.9z',
  fill: '#A3DFD0',
});

var _ref54 = React.createElement('path', {
  d:
    'M333 17.8l25.4 10-22.5 73.3s-5 3-13.6 1.5c-10.9-1.9-11.4-7.3-11.4-7.3l12.9-45-32.2-12.9',
  fill: '#017272',
});

var _ref55 = React.createElement('path', {
  d:
    'M312.8 68.7c.6-10-5-15-13.4-20.8l-4-2.9-6.5-4.6 33.4 9.1c.8.4 1.4 1.5 1 2.3L315 81.3l-4.2.5 2-13zM331.8 102.4c2.7-.7 4-1.4 4-1.4l19.4-62.7c1.9-5.9-1.5-12.7-7.3-15.3-3-1.2-12.1-5.4-12.1-5.4s7.3 2.1 12.5 3.4c7.3 2 12.6 10.1 9.7 18l-20.6 69.5-5.6-6.1z',
  fill: '#12555A',
});

var _ref56 = React.createElement('path', {
  d:
    'M277.5 182.2c.4-.8 1.2-1.3 2-1 1.6.6 3.4 1.5 3.5 3 .3 1.6-.8 2.4-.8 2.4 3.5 3.7 7.5 6.2 16.2 6 .6 0 1 .4 1.2.8.6 3.4 1.6 14.5-8.7 19.5l-21.4-9.5s-10 .8-18.4-4.3c-12.6-7.6-14.9-13.4-15-15 0-.8.4-2.8 1.2-3.5 2.3-2 3.8-3.2 11.6-.7 2.5.8 8.3 3.1 8.8 3.2 6.2 1 9.2 1.1 13 .8 3.4.1 6.1-.5 6.8-1.7z',
  fill: '#017272',
});

var _ref57 = React.createElement('path', {
  d: 'M289 216.7l-21-9.3 1.6-3.8 21.4 9.5-1.5 3.4c0 .2-.3.2-.4.2z',
  fill: '#12555A',
});

var _ref58 = React.createElement('path', {
  d:
    'M236.2 183.8s1.5 10.2 28.8 19c1 .3 3.5.6 4.6.8l-6.2 1.5c-3.8-.8-26.5-8.4-27.2-21.3z',
  fill: '#12555A',
});

var _ref59 = React.createElement('path', {
  d:
    'M419.8 179.9c-.4-.8-.3-1.9.5-2.5 1.5-1 3.1-2 4.5-1.3 1.5.8 1.5 2.2 1.5 2.2 5-.8 11.4-3.1 13.7-9.5.3-.7.8-1 1.4-.8 3.4 1 13.6 5 12.3 18L433.2 199c0 .3-3.5 9.7-13 10.2-20 .9-21.4-.8-22.2-1.8a2 2 0 0 1-.5-1.3c-.1-1-1.4-5.4 5.8-9.6 3.2-2 8.3-2 8.3-2 4.9-5.1 4.9-5.4 6.8-8.5 1.6-2.6 2-4.8 1.4-6z',
  fill: '#017272',
});

var _ref60 = React.createElement('path', {
  d: 'M455.2 190.1l-19.1 12.4-2.8-3.6 20.5-12.7 1.8 3c.1.2 0 .7-.4 1z',
  fill: '#12555A',
});

var _ref61 = React.createElement('path', {
  d:
    'M397.9 207s6.4 5 28.3-.4c1.1-.3 4.9-4.3 7.2-7.9 0 0-3.6 9.5-5.8 10.3a51.1 51.1 0 0 1-21.8 1.7c-2.8-.2-5.5-1-7.4-3.2-.3-.1-.5-.3-.5-.5z',
  fill: '#12555A',
});

var _ref62 = React.createElement('path', {
  d:
    'M300.8 79.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM347.6 111.6a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zM362 127a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z',
  fill: '#00343D',
});

var _ref63 = React.createElement('path', {
  d:
    'M232 305.4h-3c-4.2-.3-5.8-2.8-5.4-6 .4-3.6 3.8-5.7 7.1-5.7l-3-35.8c-.4-4.2 12.4-6 16.4-5.1 4 .8 6.9 4.9 5.7 8.7-10.2 35.2-10.2 38.1-11.5 40.8-1.4 3-3.3 3-6.3 3zM111.7 307.1h-1.2c-4-.2-4.6-2.2-4.6-5.6 0-3 4.2-5 7.7-5.6 1.7-6.2-.9-23.8.3-36 .4-4.1 8-6 12.2-5 4 .8 6.6 4.7 5.7 8.7-7.7 37.1-9.3 38.7-11 40.5-2.6 2.5-6.5 3-9.1 3z',
  fill: '#12555A',
});

var _ref64 = React.createElement('path', {
  d:
    'M149.5 249.8c0 12.6-8.5 25.2-21 25.2-12.7 0-27-11.1-27-23.7s12.3-24.5 25.1-24.5a22.8 22.8 0 0 1 22.9 23z',
  fill: '#017272',
});

var _ref65 = React.createElement('path', {
  d:
    'M127.7 227a65.4 65.4 0 0 0 20 3.4 158 158 0 0 0 57.7 2.6c15.8-2.2 29.6-6.5 41.8-6.2 12.1.3-11.5 40.7-11.5 40.7S194 288 130.5 271.3c-51.6-13.3-2.8-44.4-2.8-44.4z',
  fill: '#017272',
});

var _ref66 = React.createElement('path', {
  d:
    'M106.9 265.3c0 7.3-3.6 13.8-9.2 17.9-3.5 2.5-7.7 7.7-16.2 18.4-5.4 6.8-14.5.8-14.1-1.1 4.9-22.7-3.9-21.5-3.9-34.4 0-11.9 9.7-22.5 21.8-22.5 12 0 21.6 9.7 21.6 21.7z',
  fill: '#017272',
});

var _ref67 = React.createElement('path', {
  d:
    'M75.2 304.6V302a5 5 0 0 0-3.9-3.8 5.5 5.5 0 0 0-6.8 5.3c0 .8.2 1.6.4 2.3.1.3.3.5.7.7h7c1 0 2.2-.7 2.6-1.9z',
  fill: '#00343D',
});

var _ref68 = React.createElement('path', {
  d:
    'M101 258.6a13.3 13.3 0 0 0-26.2-2.9c-.8 4.2.3 8.3 2.7 11.2 1.6 2 2.3 4.6 2.3 7.2a10.3 10.3 0 0 0 9.1 10 10.3 10.3 0 0 0 11-13c-.7-2.5-.7-5 .3-7.5.6-1.4.9-3.1.9-5z',
  fill: '#12555A',
});

var _ref69 = React.createElement('path', {
  d:
    'M81.3 244s13.4.3 33.8-14l2.5 33.7-12.1 6.5-1.6-7.5c0 .1.2-19.7-22.6-18.7z',
  fill: '#017272',
});

var _ref70 = React.createElement('path', {
  d:
    'M262.3 232.8s17.5 16.5 38.1 7.7c.7-.3 1 .4.7.8-8 6.5-29.8 21.2-43.3-3.8',
  fill: '#12555A',
});

var _ref71 = React.createElement('path', {
  d:
    'M270 249.8c0 12.6-7 28.6-15.7 28.6-12.6 0-30.1-16-30.1-28.6a22.9 22.9 0 0 1 22.8-22.9c12.8-.2 23 10 23 22.9zM134.4 310.3h-3.3c-4.2-.3-5.3-2.1-5.4-5.6-.1-3.5 4-5.5 6.4-5.8-1.8-7-9.9-20.6-15.2-32.7-1.6-3.7 3.8-8 7.7-9.3 3.8-1.2 18.3-2.9 19.4 1.2 2 6.4-2.7 19.8-2.7 25.8 0 14.5 1.9 17.7 1.9 19.4-.3 5-2.8 7-8.8 7z',
  fill: '#017272',
});

var _ref72 = React.createElement('path', {
  d:
    'M248.7 311c-1.5 0-2.2 0-3.5-.4-4-1.1-5-4.2-4-8 1-3 4.3-4.4 7.3-4.7-.4-5.2-1.8-10.6-3.4-18.2-.8-4 1.6-.7-9.7-12.7-2.7-3 17-10.5 21-10.3 4.2.3 8.8 4.3 8.3 8.3-5 37.7-5.4 41-6.5 42.9-2.5 3.3-6 3.1-9.5 3.1z',
  fill: '#017272',
});

var _ref73 = React.createElement('path', {
  d:
    'M185.8 234.5c-.9 1.8-1.4 4.2-1.2 6 .8 8.3 11.8 13.9 24.7 12.7 12.9-1.3 22.6-9 21.7-17.2-.3-2.7-1.5-5-3.5-6.8-7.7 1.5-16 3.2-24.7 4.5-5.6.6-11.2.6-17 .8zM149.5 253.3a7.9 7.9 0 1 0 0-15.8 7.9 7.9 0 0 0 0 15.8z',
  fill: '#12555A',
});

var _ref74 = React.createElement('path', {
  d:
    'M114.8 270.3s-.1.3-.3 0l-6.5-1h-.5v-.7c5.4-18.7-8.8-27.1-9.5-27.5l-1-.6s-.4-.1-.4-.5c0-.3.5-.5.5-.5l7-3c0-.2.2-.2.3 0 .5.3.7.4 1.3 1a30.3 30.3 0 0 1 9 32.8z',
  fill: '#00343D',
});

var _ref75 = React.createElement('path', {
  d:
    'M162.6 210c10.1 0 18.4-2.3 18.4-5 0-2.9-8.3-5.2-18.4-5.2-10.2 0-18.5 2.3-18.5 5.1s8.3 5 18.5 5zM195.6 210c6.1 0 11-2.3 11-5 0-2.9-4.9-5.2-11-5.2-6.2 0-11.1 2.3-11.1 5.1s5 5 11 5zM331.3 261.2c10.2 0 18.4-2.3 18.4-5.1s-8.2-5.1-18.4-5.1-18.5 2.3-18.5 5c0 2.9 8.3 5.2 18.5 5.2zM364.3 261.2c6.1 0 11-2.3 11-5.1s-4.9-5.1-11-5.1-11.1 2.3-11.1 5c0 2.9 5 5.2 11 5.2z',
  fill: '#A3DFD0',
});

var _ref76 = React.createElement('path', {
  d:
    'M201.7 48.2L185.5 31c-1.9-2-1.5-5.3.9-6.8l2.2-1.3c1.5-.8 3.5-.7 4.9.3l17 12.3s-6-2.7-10 2.4c-2.7 3.6.4 8 1.7 10l-.5.3z',
  fill: '#12555A',
});

var _ref77 = React.createElement('path', {
  d:
    'M196.9 37.1a3.6 3.6 0 1 0 0-7.1 3.6 3.6 0 0 0 0 7.1zM112.6 257.5a3.1 3.1 0 1 0 0-6.2 3.1 3.1 0 0 0 0 6.2z',
  fill: '#017272',
});

var _ref78 = React.createElement('path', {
  d:
    'M113 256.2c-1 0-1.7-.8-1.8-1.8 0-1 .8-1.9 1.8-2 141.8-9.7 194.8-144.3 195.3-145.6.4-1 1.5-1.5 2.4-1.1 1 .4 1.5 1.5 1.1 2.3-.5 1.5-54.3 138.3-198.6 148l-.1.2z',
  fill: '#2BB280',
});

var _ref79 = React.createElement('path', {
  d:
    'M215.2 81c-1.9 1.6-3 5.3-1.5 7.8 1.6 2.7 6.2 2.3 6.8-.4 1.5-8.4 7.1-5.7 6.6-11.4-.3-2.3-.8 1-4.5 1.2-2.9.4-5.5 1.2-7.4 2.9z',
  fill: '#00343D',
});

var Svg500 = function Svg500(_ref31) {
  var title = _ref31.title,
    props = _objectWithoutProperties(_ref31, ['title']);

  return React.createElement(
    'svg',
    _extends(
      {
        width: '500',
        height: '360',
        fill: 'none',
        xmlns: 'http://www.w3.org/2000/svg',
      },
      props
    ),
    React.createElement('title', null, title),
    _ref32,
    _ref33,
    _ref34,
    _ref35,
    _ref36,
    _ref37,
    _ref38,
    _ref39,
    _ref40,
    _ref41,
    _ref42,
    _ref43,
    _ref44,
    _ref45,
    _ref46,
    _ref47,
    _ref48,
    _ref49,
    _ref50,
    _ref51,
    _ref52,
    _ref53,
    _ref54,
    _ref55,
    _ref56,
    _ref57,
    _ref58,
    _ref59,
    _ref60,
    _ref61,
    _ref62,
    _ref63,
    _ref64,
    _ref65,
    _ref66,
    _ref67,
    _ref68,
    _ref69,
    _ref70,
    _ref71,
    _ref72,
    _ref73,
    _ref74,
    _ref75,
    _ref76,
    _ref77,
    _ref78,
    _ref79
  );
};

function _createSuper$r(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$s()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$s() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}

var GlobalStatusController = (function(_React$PureComponent) {
  _inherits(GlobalStatusController, _React$PureComponent);

  var _super = _createSuper$r(GlobalStatusController);

  function GlobalStatusController(props) {
    var _this;

    _classCallCheck(this, GlobalStatusController);

    _this = _super.call(this, props);
    var GSP = null;

    try {
      GSP = GlobalStatusProvider;
    } catch (e) {}

    if (!GSP && typeof window !== 'undefined') {
      GSP = window.GlobalStatusProvider;
    }

    _this.provider = GSP.init(props.id, function(provider) {
      var _provider$add = provider.add(props),
        status_id = _provider$add.status_id;

      _this.internal_status_id = props.status_id || status_id;
    });
    return _possibleConstructorReturn(
      _this,
      _assertThisInitialized(_this)
    );
  }

  _createClass(GlobalStatusController, [
    {
      key: 'remove',
      value: function remove(props) {
        this.provider.remove(this.internal_status_id, props);
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (this.provider && isTrue(this.props.remove_on_unmount)) {
          this.provider.remove(this.internal_status_id);
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        return React.createElement(React.Fragment, null);
      },
    },
  ]);

  return GlobalStatusController;
})(React.PureComponent);

GlobalStatusController.defaultProps = {
  id: 'main',
  status_id: null,
  remove_on_unmount: false,
};

var GlobalStatusRemove = (function(_React$PureComponent2) {
  _inherits(GlobalStatusRemove, _React$PureComponent2);

  var _super2 = _createSuper$r(GlobalStatusRemove);

  function GlobalStatusRemove(props) {
    var _this2;

    _classCallCheck(this, GlobalStatusRemove);

    _this2 = _super2.call(this, props);
    var GSP = null;

    try {
      GSP = GlobalStatusProvider;
    } catch (e) {}

    if (!GSP && typeof window !== 'undefined') {
      GSP = window.GlobalStatusProvider;
    }

    _this2.provider = GSP.init(props.id, function(provider) {
      if (props.status_id) {
        provider.remove(props.status_id, {
          buffer_delay: props.buffer_delay,
        });
      }
    });
    return _this2;
  }

  _createClass(GlobalStatusRemove, [
    {
      key: 'render',
      value: function render() {
        return React.createElement(React.Fragment, null);
      },
    },
  ]);

  return GlobalStatusRemove;
})(React.PureComponent);

GlobalStatusRemove.defaultProps = {
  id: 'main',
  status_id: null,
  buffer_delay: null,
};
GlobalStatusController.Remove = GlobalStatusRemove;

function _createSuper$s(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$t()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$t() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$h = {
  render_content: null,
};

var defaultProps$q = _extends(
  {
    style_type: null,
    element: 'section',
    class: null,
    className: null,
    children: null,
  },
  renderProps$h
);

var Section = (function(_React$PureComponent) {
  _inherits(Section, _React$PureComponent);

  var _super = _createSuper$s(Section);

  _createClass(Section, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Section.tagName, Section, defaultProps$q);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (props.text) return props.text;
        if (typeof props.render_content === 'function')
          props.render_content(props);
        return processChildren(props);
      },
    },
  ]);

  function Section(props) {
    var _this;

    _classCallCheck(this, Section);

    _this = _super.call(this, props);
    _this._ref = React.createRef();
    return _this;
  }

  _createClass(Section, [
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$q,
          this.context.formRow
        );

        var element = props.element,
          style_type = props.style_type,
          spacing = props.spacing,
          className = props.className,
          _className = props.class,
          attributes = _objectWithoutProperties(props, [
            'element',
            'style_type',
            'spacing',
            'className',
            'class',
          ]);

        var content = Section.getContent(this.props);

        var params = _extends(
          {
            className: classnames(
              'dnb-section dnb-section--'.concat(
                style_type || 'mint-green-12'
              ),
              (isTrue(spacing) || spacing) &&
                'dnb-section--spacing'.concat(
                  !/true|false/.test(String(spacing)) ? '-' + spacing : ''
                ),
              createSpacingClasses(props),
              className,
              _className
            ),
          },
          attributes
        );

        validateDOMAttributes(this.props, params);
        return React.createElement(
          Element$3,
          _extends(
            {
              is: element || 'section',
            },
            params,
            {
              ref: this._ref,
            }
          ),
          content
        );
      },
    },
  ]);

  return Section;
})(React.PureComponent);

Section.tagName = 'dnb-section';
Section.defaultProps = defaultProps$q;
Section.contextType = Context;
var Element$3 = React.forwardRef(function(_ref, ref) {
  var Element = _ref.is,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, ['is', 'children']);

  return React.createElement(
    Element,
    _extends({}, rest, {
      ref: ref,
    }),
    children
  );
});
Element$3.propTypes = {
  is: propTypes.string.isRequired,
  children: propTypes.node.isRequired,
};

var Animation = (function() {
  function Animation() {
    _classCallCheck(this, Animation);

    this.stack = [];
    this.events = [];
  }

  _createClass(Animation, [
    {
      key: 'add',
      value: function add(animation) {
        if (!animation.type) {
          console.warn('You should define an animation type.');
        }

        var isInProgress = this.isInProgress(animation);

        if (isInProgress) {
          if (typeof animation.onPartial === 'function') {
            animation.onPartial(isInProgress);
          }

          return animation;
        }

        this.stack.push(animation);
        return this.runNext();
      },
    },
    {
      key: 'unbind',
      value: function unbind() {
        var _this = this;

        this.stack.forEach(function(animation) {
          animation.onReset = null;

          _this.reset(animation);
        });
        this.stack = [];
        this.events = [];
      },
    },
    {
      key: 'reset',
      value: function reset(animation) {
        if (!animation) {
          return;
        }

        clearTimeout(animation._durationId);
        clearTimeout(animation._delayId);

        if (typeof animation.onReset === 'function') {
          animation.onReset(animation);
        }

        this.stack = this.stack.filter(function(a) {
          return a !== animation;
        });
      },
    },
    {
      key: 'isInProgress',
      value: function isInProgress(animation) {
        return (
          this.stack.length > 0 &&
          this.stack[0].running &&
          animation.type === this.stack[0].type &&
          this.stack[0]
        );
      },
    },
    {
      key: 'runNext',
      value: function runNext() {
        var _this2 = this;

        var animation = this.stack[0];

        if (!animation || animation.running) {
          return null;
        }

        animation.running = true;

        var run = function run() {
          if (typeof animation.onStart === 'function') {
            animation.onStart(animation);
          }

          _this2.runGlobalEvents(animation, 'onStart');

          var next = function next() {
            animation.running = false;

            if (typeof animation.onComplete === 'function') {
              animation.onComplete(animation);
            }

            _this2.runGlobalEvents(animation, 'onComplete');

            _this2.stack = _this2.stack.filter(function(a) {
              return a !== animation;
            });

            _this2.runNext();
          };

          clearTimeout(animation._durationId);

          if (animation.duration > 0) {
            animation._durationId = setTimeout(next, animation.duration);
          } else {
            next();
          }
        };

        clearTimeout(animation._delayId);

        if (animation.delay > 0) {
          animation._delayId = setTimeout(run, animation.delay);
        } else {
          run();
        }

        return animation;
      },
    },
    {
      key: 'onStart',
      value: function onStart(callback) {
        this.events.push({
          callback: callback,
          type: 'onStart',
        });
      },
    },
    {
      key: 'onComplete',
      value: function onComplete(callback) {
        this.events.push({
          callback: callback,
          type: 'onComplete',
        });
      },
    },
    {
      key: 'runGlobalEvents',
      value: function runGlobalEvents(animation, type) {
        this.events.forEach(function(event) {
          if (
            type === event.type &&
            typeof event.callback === 'function'
          ) {
            event.callback(animation);
          }
        });
        this.events = [];
      },
    },
  ]);

  return Animation;
})();

function _createSuper$t(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$u()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$u() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$i = {
  on_open: null,
  on_show: null,
  on_close: null,
  on_hide: null,
  render_content: null,
};

var defaultProps$r = _extends(
  {
    id: 'main',
    status_id: 'status-main',
    title: null,
    default_title: null,
    text: null,
    items: [],
    icon: 'error',
    icon_size: 'large',
    state: 'error',
    show: null,
    autoscroll: true,
    autoclose: true,
    no_animation: false,
    close_text: 'Lukk',
    hide_close_button: false,
    delay: 10,
    duration: 1e3,
    status_anchor_text: null,
    class: null,
    demo: false,
    className: null,
    children: null,
  },
  renderProps$i
);

var GlobalStatus = (function(_React$PureComponent) {
  _inherits(GlobalStatus, _React$PureComponent);

  var _super = _createSuper$t(GlobalStatus);

  _createClass(GlobalStatus, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(
          GlobalStatus.tagName,
          GlobalStatus,
          defaultProps$r
        );
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (props.text) return props.text;
        if (typeof props.render_content === 'function')
          props.render_content(props);
        return processChildren(props);
      },
    },
    {
      key: 'getIcon',
      value: function getIcon(_ref) {
        var state = _ref.state,
          icon = _ref.icon,
          icon_size = _ref.icon_size;

        if (typeof icon === 'string') {
          var IconToLoad = icon;

          switch (state) {
            case 'info':
            case 'information':
              IconToLoad = InfoIcon;
              break;

            case 'error':
            default:
              IconToLoad = ErrorIcon;
          }

          icon = React.createElement(Icon, {
            icon: React.createElement(IconToLoad, {
              title: null,
            }),
            size: icon_size,
            'aria-hidden': true,
          });
        }

        return icon;
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (isTrue(props.show)) {
            state.makeMeVisible = true;
          } else if (props.show !== null && !isTrue(props.show)) {
            state.makeMeHidden = true;
          }

          state.globalStatus = GlobalStatusProvider.combineMessages([
            state.globalStatus,
            props,
          ]);
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function GlobalStatus(props) {
    var _this;

    _classCallCheck(this, GlobalStatus);

    _this = _super.call(this, props);
    _this.state = {
      globalStatus: null,
      isActive: false,
      isVisible: false,
      makeMeVisible: false,
      makeMeHidden: false,
      _listenForPropChanges: false,
    };

    _this.setVisible = function() {
      var _ref2 =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {},
        _ref2$delay = _ref2.delay,
        delay =
          _ref2$delay === void 0
            ? parseFloat(_this.props.delay)
            : _ref2$delay,
        _ref2$duration = _ref2.duration,
        duration =
          _ref2$duration === void 0
            ? parseFloat(_this.props.duration)
            : _ref2$duration;

      var _this$props = _this.props,
        isDemo = _this$props.demo,
        no_animation = _this$props.no_animation;
      var noAnimation = isTrue(no_animation);

      if (noAnimation) {
        _this.setState({
          isActive: true,
          isVisible: true,
          _listenForPropChanges: false,
        });

        dispatchCustomElementEvent(
          _this._globalStatus,
          'on_show',
          _this._globalStatus
        );
        dispatchCustomElementEvent(
          _this._globalStatus,
          'on_open',
          _this._globalStatus
        );

        _this.setFocus();

        return;
      }

      var onStart = function onStart() {
        _this.setState(
          {
            isActive: true,
            makeMeVisible: true,
            makeMeHidden: false,
            _listenForPropChanges: false,
          },
          function() {
            _this.setFocus();

            if (isTrue(_this.state.globalStatus.autoscroll) && !isDemo) {
              setTimeout(function() {
                _this.scrollToStatus(function() {
                  _this.setHeight('full');
                });
              }, 1);
            } else {
              _this.setHeight('full');
            }
          }
        );
      };

      var wasVisibleFromBefore = _this.state.isVisible;

      var onComplete = function onComplete() {
        _this._setVisibleId = null;

        _this.setState({
          makeMeVisible: false,
          isVisible: true,
          _listenForPropChanges: false,
        });

        dispatchCustomElementEvent(
          _this._globalStatus,
          'on_show',
          _this._globalStatus
        );

        if (!wasVisibleFromBefore) {
          dispatchCustomElementEvent(
            _this._globalStatus,
            'on_open',
            _this._globalStatus
          );
        }

        if (isDemo) {
          _this._isDemoHiddenId = setTimeout(_this.setHidden, 800);
        }
      };

      _this._visibility.add({
        type: 'show',
        onStart: onStart,
        onComplete: onComplete,
        onPartial: function onPartial() {
          return _this.state.makeMeVisible && _this.setHeight('full');
        },
        duration: duration,
        delay: delay,
      });
    };

    _this.setHidden = function() {
      var _ref3 =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {},
        _ref3$delay = _ref3.delay,
        delay =
          _ref3$delay === void 0
            ? parseFloat(_this.props.delay)
            : _ref3$delay,
        _ref3$duration = _ref3.duration,
        duration =
          _ref3$duration === void 0
            ? parseFloat(_this.props.duration)
            : _ref3$duration;

      var _this$props2 = _this.props,
        isDemo = _this$props2.demo,
        no_animation = _this$props2.no_animation;
      var noAnimation = isTrue(no_animation);

      if (noAnimation) {
        _this.setState({
          isActive: false,
          isVisible: false,
          _listenForPropChanges: false,
        });

        dispatchCustomElementEvent(
          _this._globalStatus,
          'on_close',
          _this._globalStatus
        );
        return;
      }

      var onStart = function onStart() {
        _this.setState(
          {
            makeMeVisible: false,
            makeMeHidden: true,
            _listenForPropChanges: false,
          },
          function() {
            return _this.setHeight('zero');
          }
        );
      };

      var onComplete = function onComplete() {
        _this._setHiddenId = null;

        _this.setState(
          {
            isActive: false,
            isVisible: false,
            makeMeHidden: false,
            _listenForPropChanges: false,
          },
          function() {
            if (_this._globalStatus) {
              dispatchCustomElementEvent(
                _this._globalStatus,
                'on_close',
                _this._globalStatus
              );
            }

            if (isDemo) {
              _this._isDemoHiddenId = setTimeout(_this.setVisible, 800);
            }
          }
        );
      };

      _this._visibility.add({
        type: 'hide',
        onStart: onStart,
        onComplete: onComplete,
        duration: duration,
        delay: delay,
      });
    };

    _this.onKeyDownHandler = function(e) {
      switch (keycode(e)) {
        case 'esc':
          e.preventDefault();

          _this.closeHandler();

          break;
      }
    };

    _this.setHeight = function() {
      var mode =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : 'full';

      var _mainRef;

      var onStart = function onStart() {
        _mainRef =
          _this._mainRef.current && _this._mainRef.current._ref.current;
      };

      var setHeight = function setHeight() {
        try {
          if (_mainRef) {
            switch (mode) {
              case 'full':
                {
                  var elem = _this._fakeRef.current;
                  var height = elem ? parseFloat(elem.scrollHeight) : 0;

                  if (height > 0) {
                    var currentHeight = parseFloat(_mainRef.style.height);

                    if (!(currentHeight > 0)) {
                      _mainRef.style.height = 0;
                      _mainRef.style.transition = 'height '.concat(
                        height * 3,
                        'ms ease-in-out'
                      );
                    } else {
                      var diff = Math.abs(currentHeight - height);
                      var speed = height * 3 - diff;
                      _mainRef.style.transition = 'height '.concat(
                        speed,
                        'ms ease-in-out'
                      );
                    }

                    _mainRef.style.height = ''.concat(height, 'px');
                  }
                }
                break;

              case 'zero': {
                _mainRef.style.transition = 'height 800ms ease-in-out';
                _mainRef.style.height = '0';
              }
            }
          }
        } catch (e) {
          console.warn('GlobalStatus: Could not set height!', e);
        }
      };

      _this._height.add({
        type: mode,
        onStart: onStart,
        onComplete: setHeight,
        delay: 20,
      });
    };

    _this.closeHandler = function() {
      _this.setHidden({
        delay: 0,
      });

      if (_this.initialActiveElement) {
        try {
          _this.initialActiveElement.focus();

          _this.initialActiveElement = null;
        } catch (e) {
          console.warn(e);
        }
      }

      dispatchCustomElementEvent(
        _this._globalStatus,
        'on_hide',
        _this._globalStatus
      );
    };

    _this.gotoItem = function(event, item) {
      var keyCode = keycode(event);

      if (
        (item.status_id &&
          typeof document !== 'undefined' &&
          keyCode === 'space') ||
        keyCode === 'enter' ||
        typeof keyCode === 'undefined'
      ) {
        event.preventDefault();

        try {
          var element = document.getElementById(item.status_id);

          if (!element) {
            return;
          }

          isElementVisible(element, function(elem) {
            try {
              elem.addEventListener('blur', function(e) {
                if (e.target.classList) {
                  e.target.removeAttribute('tabindex');
                }
              });
              elem.classList.add('dnb-no-focus');
              elem.setAttribute('tabindex', '-1');
              elem.focus({
                preventScroll: true,
              });
            } catch (e) {
              console.warn(e);
            }
          });

          if (isIE11) {
            window.scrollTop = element.offsetTop;
          } else {
            element.scrollIntoView({
              block: 'center',
              behavior: 'smooth',
            });
          }
        } catch (e) {
          console.warn(e);
        }
      }
    };

    _this._mainRef = React.createRef();
    _this._shellRef = React.createRef();
    _this._fakeRef = React.createRef();
    _this._visibility = new Animation();
    _this._height = new Animation();
    _this.provider = GlobalStatusProvider.create(props.id);
    _this.state.globalStatus = _this._globalStatus = _this.provider.init(
      props
    );

    if (isTrue(props.show)) {
      if (isTrue(props.no_animation)) {
        _this.state.isActive = true;
      } else {
        _this.state.makeMeVisible = true;
      }
    }

    _this.provider.onUpdate(function(globalStatus, props, _ref4) {
      var _ref4$isEmpty = _ref4.isEmpty,
        isEmpty = _ref4$isEmpty === void 0 ? false : _ref4$isEmpty;

      if (globalStatus.on_close) {
        _this._globalStatus = globalStatus;
      }

      _this.setState({
        globalStatus: globalStatus,
        _listenForPropChanges: false,
      });

      var isActive = isTrue(globalStatus.show);

      if (isActive) {
        _this.setState({
          isActive: isActive,
          _listenForPropChanges: false,
        });
      }

      if (isEmpty && isTrue(globalStatus.autoclose)) {
        _this.setHidden({
          delay: 0,
        });
      } else if (isTrue(globalStatus.show)) {
        _this.setVisible({
          delay: 0,
        });
      }
    });

    _this.initialActiveElement = null;
    return _this;
  }

  _createClass(GlobalStatus, [
    {
      key: 'correctStatus',
      value: function correctStatus(state) {
        switch (state) {
          case 'information':
            state = 'info';
            break;
        }

        return state;
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._visibility.unbind();

        this._height.unbind();

        clearTimeout(this._scrollToStatusId);
        clearTimeout(this._isDemoHiddenId);
        this.provider.empty();
      },
    },
    {
      key: 'setFocus',
      value: function setFocus() {
        if (this._shellRef.current) {
          if (document.activeElement !== this._shellRef.current) {
            this.initialActiveElement = document.activeElement;
          }

          this._shellRef.current.focus({
            preventScroll: true,
          });
        }
      },
    },
    {
      key: 'scrollToStatus',
      value: function scrollToStatus() {
        var isDone =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : null;

        try {
          var element = this._shellRef.current;
          this._scrollToStatusId = isElementVisible(element, isDone);

          if (element && !isIE11) {
            element.scrollIntoView({
              block: 'center',
              behavior: 'smooth',
            });
          } else if (typeof window !== 'undefined') {
            var top = element.offsetTop;

            if (window.scrollTo) {
              window.scrollTo({
                top: top,
                behavior: 'smooth',
              });
            } else {
              window.scrollTop = top;
            }
          }
        } catch (e) {
          console.warn('GlobalStatus: Could not scroll into view!', e);
        }
      },
    },
    {
      key: 'isReadyToBeVisible',
      value: function isReadyToBeVisible() {
        var show = this.props.show;
        var _this$state = this.state,
          isActive = _this$state.isActive,
          makeMeVisible = _this$state.makeMeVisible,
          isVisible = _this$state.isVisible;
        return makeMeVisible && !isActive && !isVisible && isTrue(show);
      },
    },
    {
      key: 'isReadyToBeHidden',
      value: function isReadyToBeHidden() {
        var show = this.props.show;
        var _this$state2 = this.state,
          isActive = _this$state2.isActive,
          makeMeHidden = _this$state2.makeMeHidden,
          isVisible = _this$state2.isVisible;
        return makeMeHidden && isActive && isVisible && !isTrue(show);
      },
    },
    {
      key: 'showingHasStarted',
      value: function showingHasStarted() {
        var _this$state3 = this.state,
          isActive = _this$state3.isActive,
          makeMeVisible = _this$state3.makeMeVisible,
          isVisible = _this$state3.isVisible;
        return isActive && makeMeVisible && !isVisible;
      },
    },
    {
      key: 'hidingHasStarted',
      value: function hidingHasStarted() {
        var _this$state4 = this.state,
          isActive = _this$state4.isActive,
          makeMeHidden = _this$state4.makeMeHidden,
          isVisible = _this$state4.isVisible;
        return isActive && makeMeHidden && isVisible;
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        if (!this._setVisibleId && this.isReadyToBeVisible()) {
          clearTimeout(this._setVisibleId);
          this._setVisibleId = setTimeout(function() {
            return _this2.setVisible();
          }, 1);
        } else if (!this._setHiddenId && this.isReadyToBeHidden()) {
          clearTimeout(this._setHiddenId);
          this._setHiddenId = setTimeout(function() {
            return _this2.setHidden();
          }, 1);
        }

        var _this$state5 = this.state,
          isActive = _this$state5.isActive,
          makeMeVisible = _this$state5.makeMeVisible,
          makeMeHidden = _this$state5.makeMeHidden,
          isVisible = _this$state5.isVisible;
        var stateProps = extendPropsWithContext(
          this.state.globalStatus,
          defaultProps$r,
          this.context.translation.GlobalStatus
        );
        var props = this.context.globalStatus
          ? GlobalStatusProvider.combineMessages([
              this.context.globalStatus,
              stateProps,
            ])
          : stateProps;
        var lang = this.context.locale;

        var title = props.title,
          default_title = props.default_title,
          rawState = props.state,
          className = props.className,
          no_animation = props.no_animation,
          hide_close_button = props.hide_close_button,
          close_text = props.close_text,
          _className = props.class,
          status_anchor_text = props.status_anchor_text,
          id = props.id,
          demo = props.demo,
          item = props.item,
          items = props.items,
          autoclose = props.autoclose,
          show = props.show,
          delay = props.delay,
          duration = props.duration,
          autoscroll = props.autoscroll,
          text = props.text,
          icon = props.icon,
          icon_size = props.icon_size,
          children = props.children,
          attributes = _objectWithoutProperties(props, [
            'title',
            'default_title',
            'state',
            'className',
            'no_animation',
            'hide_close_button',
            'close_text',
            'class',
            'status_anchor_text',
            'id',
            'demo',
            'item',
            'items',
            'autoclose',
            'show',
            'delay',
            'duration',
            'autoscroll',
            'text',
            'icon',
            'icon_size',
            'children',
          ]);

        var wrapperParams = {
          key: 'global-status',
          className: classnames(
            'dnb-global-status__wrapper dnb-no-focus',
            createSpacingClasses(props),
            className,
            _className
          ),
          'aria-live': this.hidingHasStarted() ? 'off' : 'assertive',
          onKeyDown: this.onKeyDownHandler,
          tabIndex: '-1',
        };

        if (!isActive) {
          return React.createElement('div', wrapperParams);
        }

        var state = this.correctStatus(rawState);
        var iconToRender = GlobalStatus.getIcon({
          state: state,
          icon: icon,
          icon_size: icon_size,
        });
        var noAnimation = isTrue(no_animation);
        var itemsToRender = props.items || [];
        var contentToRender = GlobalStatus.getContent(props);
        var style = state === 'info' ? null : 'fire-red';

        var params = _extends(
          {
            element: 'div',
            className: classnames(
              'dnb-global-status dnb-global-status--'.concat(state),
              this.showingHasStarted() && 'dnb-global-status--fade-in',
              this.hidingHasStarted() && 'dnb-global-status--fade-out',
              noAnimation && 'dnb-global-status--no-animation'
            ),
          },
          attributes
        );

        validateDOMAttributes(this.props, params);
        var renderedItems =
          itemsToRender.length > 0 &&
          React.createElement(
            'ul',
            {
              className: 'dnb-ul',
            },
            itemsToRender.map(function(item, i) {
              var id = item.id || makeUniqueId();
              var text = (item && item.text) || item;
              var link = status_anchor_text || item.status_anchor_text;
              var useAutolink =
                item.status_id && isTrue(item.status_anchor_url);
              return React.createElement(
                'li',
                {
                  key: i,
                },
                React.createElement(
                  'p',
                  {
                    id: id,
                    className: 'dnb-p',
                  },
                  text
                ),
                item &&
                  (useAutolink || item.status_anchor_url) &&
                  React.createElement(
                    'a',
                    {
                      className: 'dnb-anchor',
                      'aria-describedby': id,
                      lang: lang,
                      href: useAutolink
                        ? '#'.concat(item.status_id)
                        : item.status_anchor_url,
                      onClick: function onClick(e) {
                        return _this2.gotoItem(e, item);
                      },
                      onKeyDown: function onKeyDown(e) {
                        return _this2.gotoItem(e, item);
                      },
                    },
                    link
                  )
              );
            })
          );
        var renderedContent = React.createElement(
          'div',
          {
            className: 'dnb-global-status__shell',
          },
          React.createElement(
            'div',
            {
              className: 'dnb-global-status__content',
            },
            title !== false &&
              React.createElement(
                'p',
                {
                  className: 'dnb-p dnb-global-status__title',
                  lang: lang,
                },
                React.createElement(
                  'span',
                  {
                    className: 'dnb-global-status__icon',
                  },
                  iconToRender
                ),
                title || default_title,
                !isTrue(hide_close_button) &&
                  React.createElement(CloseButton, {
                    on_click: this.closeHandler,
                    text: close_text,
                    title: close_text,
                  })
              ),
            React.createElement(
              Section,
              {
                element: 'div',
                style_type: 'white',
                className: 'dnb-global-status__message',
              },
              typeof contentToRender === 'string'
                ? React.createElement(
                    'p',
                    {
                      className: 'dnb-p',
                    },
                    contentToRender
                  )
                : contentToRender,
              renderedItems
            )
          )
        );
        return React.createElement(
          'div',
          _extends({}, wrapperParams, {
            ref: this._shellRef,
          }),
          React.createElement(
            Section,
            _extends(
              {
                style_type: style,
              },
              params,
              {
                ref: this._mainRef,
              }
            ),
            (makeMeVisible || makeMeHidden || isVisible || noAnimation) &&
              renderedContent
          ),
          !noAnimation &&
            React.createElement(
              'div',
              {
                className: 'dnb-global-status dnb-global-status__fake',
                'aria-hidden': 'true',
                ref: this._fakeRef,
              },
              renderedContent
            )
        );
      },
    },
  ]);

  return GlobalStatus;
})(React.PureComponent);

GlobalStatus.tagName = 'dnb-global-status';
GlobalStatus.defaultProps = defaultProps$r;
GlobalStatus.contextType = Context;

var CloseButton = function CloseButton(_ref5) {
  var on_click = _ref5.on_click,
    text = _ref5.text,
    _ref5$className = _ref5.className,
    className = _ref5$className === void 0 ? null : _ref5$className;
  return React.createElement(Button, {
    type: 'button',
    variant: 'tertiary',
    size: 'medium',
    className: classnames('dnb-global-status__close-button', className),
    icon: 'close',
    icon_size: 'medium',
    icon_position: 'left',
    'aria-label': text,
    text: text,
    on_click: on_click,
  });
};
CloseButton.defaultProps = {
  className: null,
  text: defaultProps$r.close_text,
};

GlobalStatus.Set = function() {
  for (
    var _len = arguments.length, args = new Array(_len), _key = 0;
    _key < _len;
    _key++
  ) {
    args[_key] = arguments[_key];
  }

  return _construct(GlobalStatusController, args);
};

GlobalStatus.AddStatus = GlobalStatus.Set;
GlobalStatus.Update = GlobalStatusController;
GlobalStatus.Add = GlobalStatusController;
GlobalStatus.Remove = GlobalStatusController.Remove;

var isElementVisible = function isElementVisible(elem, callback) {
  var delayFallback =
    arguments.length > 2 && arguments[2] !== undefined
      ? arguments[2]
      : 1e3;

  if (typeof IntersectionObserver !== 'undefined') {
    var intersectionObserver = new IntersectionObserver(function(entries) {
      var _entries = _slicedToArray(entries, 1),
        entry = _entries[0];

      if (entry.isIntersecting) {
        intersectionObserver.unobserve(elem);

        if (typeof callback === 'function') {
          callback(elem);
        }
      }
    });
    intersectionObserver.observe(elem);
  } else {
    if (typeof callback === 'function') {
      return setTimeout(function() {
        return callback(elem);
      }, delayFallback);
    }
  }

  return null;
};

var emptyString = '';
function createNumberMask() {
  var _ref =
      arguments.length > 0 && arguments[0] !== undefined
        ? arguments[0]
        : {},
    _ref$prefix = _ref.prefix,
    prefix = _ref$prefix === void 0 ? emptyString : _ref$prefix,
    _ref$suffix = _ref.suffix,
    suffix = _ref$suffix === void 0 ? emptyString : _ref$suffix,
    _ref$includeThousands = _ref.includeThousandsSeparator,
    includeThousandsSeparator =
      _ref$includeThousands === void 0 ? true : _ref$includeThousands,
    _ref$thousandsSeparat = _ref.thousandsSeparatorSymbol,
    thousandsSeparatorSymbol =
      _ref$thousandsSeparat === void 0 ? ' ' : _ref$thousandsSeparat,
    _ref$allowDecimal = _ref.allowDecimal,
    allowDecimal =
      _ref$allowDecimal === void 0 ? false : _ref$allowDecimal,
    _ref$decimalSymbol = _ref.decimalSymbol,
    decimalSymbol =
      _ref$decimalSymbol === void 0 ? ',' : _ref$decimalSymbol,
    _ref$decimalLimit = _ref.decimalLimit,
    decimalLimit = _ref$decimalLimit === void 0 ? 2 : _ref$decimalLimit,
    _ref$requireDecimal = _ref.requireDecimal,
    requireDecimal =
      _ref$requireDecimal === void 0 ? false : _ref$requireDecimal,
    _ref$allowNegative = _ref.allowNegative,
    allowNegative =
      _ref$allowNegative === void 0 ? true : _ref$allowNegative,
    _ref$allowLeadingZero = _ref.allowLeadingZeroes,
    allowLeadingZeroes =
      _ref$allowLeadingZero === void 0 ? false : _ref$allowLeadingZero,
    _ref$integerLimit = _ref.integerLimit,
    integerLimit = _ref$integerLimit === void 0 ? null : _ref$integerLimit;

  var minus = '-';
  var minusRegExp = /-/;
  var nonDigitsRegExp = /\D+/g;
  var number = 'number';
  var caretTrap = '[]';
  var digitRegExp = /\d/;

  function convertToMask(strNumber) {
    return strNumber.split(emptyString).map(function(char) {
      return digitRegExp.test(char) ? digitRegExp : char;
    });
  }

  function addThousandsSeparator(n, thousandsSeparatorSymbol) {
    return n.replace(/\B(?=(\d{3})+(?!\d))/g, thousandsSeparatorSymbol);
  }

  var prefixLength = (prefix && prefix.length) || 0;
  var suffixLength = (suffix && suffix.length) || 0;
  var thousandsSeparatorSymbolLength =
    (thousandsSeparatorSymbol && thousandsSeparatorSymbol.length) || 0;

  function numberMask() {
    var rawValue =
      arguments.length > 0 && arguments[0] !== undefined
        ? arguments[0]
        : emptyString;
    var rawValueLength = rawValue.length;

    if (
      rawValue === emptyString ||
      (rawValue[0] === prefix[0] && rawValueLength === 1)
    ) {
      return prefix
        .split(emptyString)
        .concat([digitRegExp])
        .concat(suffix.split(emptyString));
    } else if (rawValue === decimalSymbol && allowDecimal) {
      return prefix
        .split(emptyString)
        .concat(['0', decimalSymbol, digitRegExp])
        .concat(suffix.split(emptyString));
    }

    var isNegative = rawValue[0] === minus && allowNegative;

    if (isNegative) {
      rawValue = rawValue.toString().substr(1);
    }

    var indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol);
    var hasDecimal = indexOfLastDecimal !== -1;
    var integer;
    var fraction;
    var mask;

    if (rawValue.slice(suffixLength * -1) === suffix) {
      rawValue = rawValue.slice(0, suffixLength * -1);
    }

    if (hasDecimal && (allowDecimal || requireDecimal)) {
      integer = rawValue.slice(
        rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0,
        indexOfLastDecimal
      );
      fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength);
      fraction = convertToMask(
        fraction.replace(nonDigitsRegExp, emptyString)
      );
    } else {
      if (rawValue.slice(0, prefixLength) === prefix) {
        integer = rawValue.slice(prefixLength);
      } else {
        integer = rawValue;
      }
    }

    if (integerLimit && _typeof(integerLimit) === number) {
      var thousandsSeparatorRegex =
        thousandsSeparatorSymbol === '.'
          ? '[.]'
          : ''.concat(thousandsSeparatorSymbol);
      var numberOfThousandSeparators = (
        integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []
      ).length;
      integer = integer.slice(
        0,
        integerLimit +
          numberOfThousandSeparators * thousandsSeparatorSymbolLength
      );
    }

    integer = integer.replace(nonDigitsRegExp, emptyString);

    if (!allowLeadingZeroes) {
      integer = integer.replace(/^0+(0$|[^0])/, '$1');
    }

    integer = includeThousandsSeparator
      ? addThousandsSeparator(integer, thousandsSeparatorSymbol)
      : integer;
    mask = convertToMask(integer);

    if ((hasDecimal && allowDecimal) || requireDecimal === true) {
      if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {
        mask.push(caretTrap);
      }

      mask.push(decimalSymbol, caretTrap);

      if (fraction) {
        if (_typeof(decimalLimit) === number) {
          fraction = fraction.slice(0, decimalLimit);
        }

        mask = mask.concat(fraction);
      }

      if (
        requireDecimal === true &&
        rawValue[indexOfLastDecimal - 1] === decimalSymbol
      ) {
        mask.push(digitRegExp);
      }
    }

    if (prefixLength > 0) {
      mask = prefix.split(emptyString).concat(mask);
    }

    if (isNegative) {
      if (mask.length === prefixLength) {
        mask.push(digitRegExp);
      }

      mask = [minusRegExp].concat(mask);
    }

    if (suffix.length > 0) {
      mask = mask.concat(suffix.split(emptyString));
    }

    return mask;
  }

  numberMask.instanceOf = 'createNumberMask';
  return numberMask;
}

function _createSuper$u(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$v()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$v() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$j = {
  on_change: null,
  on_submit: null,
  on_focus: null,
  on_blur: null,
  on_submit_focus: null,
  on_submit_blur: null,
};

var defaultProps$s = _extends(
  {
    mask: [],
    number_mask: null,
    currency_mask: null,
    show_mask: false,
    show_guide: true,
    pipe: null,
    keep_char_positions: false,
    placeholder_char: '_',
  },
  renderProps$j
);

var InputMasked = (function(_React$PureComponent) {
  _inherits(InputMasked, _React$PureComponent);

  var _super = _createSuper$u(InputMasked);

  function InputMasked() {
    _classCallCheck(this, InputMasked);

    return _super.apply(this, arguments);
  }

  _createClass(
    InputMasked,
    [
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          clearTimeout(this._selectionTimeout);
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this = this;

          var _this$props = this.props,
            mask = _this$props.mask,
            number_mask = _this$props.number_mask,
            currency_mask = _this$props.currency_mask,
            show_mask = _this$props.show_mask,
            show_guide = _this$props.show_guide,
            pipe = _this$props.pipe,
            keep_char_positions = _this$props.keep_char_positions,
            placeholderChar = _this$props.placeholder_char,
            props = _objectWithoutProperties(_this$props, [
              'mask',
              'number_mask',
              'currency_mask',
              'show_mask',
              'show_guide',
              'pipe',
              'keep_char_positions',
              'placeholder_char',
            ]);

          if (number_mask) {
            if (isTrue(number_mask)) {
              number_mask = {};
            } else {
              if (
                typeof number_mask === 'string' &&
                number_mask[0] === '{'
              ) {
                number_mask = JSON.parse(number_mask);
              }
            }

            mask = createNumberMask(number_mask);
          } else if (currency_mask) {
            if (isTrue(currency_mask)) {
              currency_mask = {};
            } else {
              if (
                typeof number_mask === 'string' &&
                number_mask[0] === '{'
              ) {
                number_mask = JSON.parse(number_mask);
              }
            }

            show_mask = true;
            placeholderChar = null;
            props.align = props.align || 'right';

            var maskParams = _extends(
              {
                allowDecimal: true,
              },
              currency_mask
            );

            var fix =
              typeof currency_mask === 'string'
                ? currency_mask
                : typeof currency_mask.currency === 'string'
                ? currency_mask.currency
                : 'kr';

            if (props.align === 'left') {
              maskParams.prefix = ''.concat(fix, ' ');
            } else {
              maskParams.suffix = ' '.concat(fix);
            }

            mask = createNumberMask(maskParams);
          }

          if (!props.input_element) {
            if (placeholderChar === '' || placeholderChar === null) {
              placeholderChar = '\u200B';
            }

            if (mask.instanceOf === 'createNumberMask') {
              var clean = function clean(v) {
                return String(v).replace(new RegExp('[^\\d,.-]', 'g'), '');
              };

              var fixPositionIssue = function fixPositionIssue(elem) {
                clearTimeout(_this._selectionTimeout);
                _this._selectionTimeout = setTimeout(function() {
                  var cleaned_value = clean(elem.value);

                  if (cleaned_value.length > 0) {
                    return;
                  }

                  try {
                    var end = elem.selectionEnd;

                    if (
                      elem.selectionStart === end &&
                      end === elem.value.length
                    ) {
                      var pos = 0;

                      if (props.align === 'left') {
                        pos = end - 1;
                      }

                      elem.setSelectionRange(pos, pos);
                    }
                  } catch (e) {}
                }, 1);
              };

              var callEvent = function callEvent(_ref, name) {
                var event = _ref.event,
                  value = _ref.value;
                value = value || event.target.value;
                var cleaned_value = clean(value);
                return dispatchCustomElementEvent(_this, name, {
                  event: event,
                  value: value,
                  cleaned_value: cleaned_value,
                });
              };

              props.onMouseUp = function(event) {
                fixPositionIssue(event.target);
                callEvent(
                  {
                    event: event,
                  },
                  'on_mouse_up'
                );
              };

              props.onTouchEnd = function(event) {
                fixPositionIssue(event.target);
                callEvent(
                  {
                    event: event,
                  },
                  'on_touch_end'
                );
              };

              props.on_focus = function(params) {
                fixPositionIssue(params.event.target);
                callEvent(params, 'on_focus');
              };

              props.on_key_down = function(params) {
                return callEvent(params, 'on_key_down');
              };

              props.on_submit = function(params) {
                return callEvent(params, 'on_submit');
              };

              props.on_blur = function(params) {
                return callEvent(params, 'on_blur');
              };

              props.on_change = function(params) {
                return callEvent(params, 'on_change');
              };
            }

            props.input_element = function(params, innerRef) {
              params = _extends({}, params, {
                pipe: pipe,
                mask: mask,
                showMask: isTrue(show_mask),
                guide: isTrue(show_guide),
                keepCharPositions: isTrue(keep_char_positions),
                placeholderChar: placeholderChar,
              });
              return React.createElement(
                MaskedInput,
                _extends(
                  {
                    ref: innerRef,
                  },
                  params
                )
              );
            };
          }

          props.className = classnames(
            'dnb-input-masked',
            props.className,
            show_mask &&
              show_guide &&
              placeholderChar === '_' &&
              'dnb-input-masked--guide'
          );
          return React.createElement(Input, props);
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            InputMasked.tagName,
            InputMasked,
            defaultProps$s
          );
        },
      },
    ]
  );

  return InputMasked;
})(React.PureComponent);

InputMasked.tagName = 'dnb-input-masked';
InputMasked.defaultProps = defaultProps$s;
InputMasked.renderProps = renderProps$j;

function _createSuper$v(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$w()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$w() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$k = {
  render_content: null,
};

var defaultProps$t = _extends(
  {
    content: null,
    modifier: null,
    tag: 'h2',
    class: null,
    className: null,
    children: null,
  },
  renderProps$k
);

var _ref$6 = React.createElement('span', {
  className: 'dnb-line-title__mask',
  'aria-hidden': 'true',
});

var _ref2$6 = React.createElement('span', {
  className: 'dnb-line-title__line',
  'aria-hidden': 'true',
});

var LineTitle = (function(_React$PureComponent) {
  _inherits(LineTitle, _React$PureComponent);

  var _super = _createSuper$v(LineTitle);

  function LineTitle() {
    _classCallCheck(this, LineTitle);

    return _super.apply(this, arguments);
  }

  _createClass(
    LineTitle,
    [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            tag = _this$props.tag,
            modifier = _this$props.modifier,
            className = _this$props.className,
            _className = _this$props.class;
          var content = LineTitle.getContent(this.props);
          var params = {
            className: classnames(
              'dnb-line-title',
              className,
              _className,
              modifier && 'dnb-line-title--'.concat(modifier)
            ),
          };
          validateDOMAttributes(this.props, params);
          var Tag = ''.concat(tag);
          return React.createElement(
            Tag,
            params,
            React.createElement(
              'span',
              {
                className: 'dnb-line-title__title dnb-typo-light',
              },
              _ref$6,
              React.createElement(
                'span',
                {
                  className: 'dnb-line-title__text',
                },
                content
              )
            ),
            _ref2$6
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(LineTitle.tagName, LineTitle, defaultProps$t);
        },
      },
      {
        key: 'getContent',
        value: function getContent(props) {
          if (typeof props.content === 'string') {
            return props.content;
          } else if (typeof props.render_content === 'function') {
            return props.render_content(props);
          }

          return processChildren(props);
        },
      },
    ]
  );

  return LineTitle;
})(React.PureComponent);

LineTitle.tagName = 'dnb-line-title';
LineTitle.defaultProps = defaultProps$t;

function _createSuper$w(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$x()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$x() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$l = {};

var defaultProps$u = _extends(
  {
    size: null,
    ratio: 1.453690625,
    width: null,
    height: null,
    alt: 'DNB Logo',
    color: null,
    class: null,
    className: null,
  },
  renderProps$l
);

var _ref$7 = React.createElement('title', null, 'DNB Logo');

var _ref2$7 = React.createElement('path', {
  d:
    'M89.668 31.9442a10.6487 10.6487 0 0 0-1.8465-1.2184l-.178-.0887.1554-.1337a8.7063 8.7063 0 0 0 2.7652-6.848c-.006-3.3331-1.1437-5.82-3.413-7.3936-1.9135-1.3528-4.5588-2.0142-8.092-2.0079l-10.1326.0182a1.081 1.081 0 0 0-1.0645 1.0685l.0597 33.2203a1.0667 1.0667 0 0 0 1.0685 1.0646l11.577-.0208c3.644-.0065 6.5758-.7897 8.684-2.3266a8.6558 8.6558 0 0 0 2.7937-3.4054 11.2675 11.2675 0 0 0 .9913-4.868 8.967 8.967 0 0 0-3.3681-7.0605zM71.1547 17.5795l7.9106-.0142q4.1997-.0076 6.202 1.3885c.8454.5985 2.003 1.752 2.0083 4.7074.0095 5.2883-4.1672 5.7179-5.4338 5.7201l-10.6659.0192zm9.4066 28.7366l-9.355.0168-.0244-13.6438 10.6659-.0191c4.6219-.0083 7.8707 2.6072 7.8774 6.3407.0033 1.8.0131 7.289-9.1639 7.3054z',
});

var _ref3$9 = React.createElement('path', {
  d:
    'M22.4948 19.6221a14.0642 14.0642 0 0 0-5.5848-4.101 16.8443 16.8443 0 0 0-6.2238-1.1443l-9.6215.0173A1.086 1.086 0 0 0 0 15.4853L.0597 48.683a1.0668 1.0668 0 0 0 1.0686 1.0646l9.6214-.0173a16.3939 16.3939 0 0 0 6.2197-1.1667 13.8015 13.8015 0 0 0 5.57-4.0994c3.3924-4.1833 3.894-9.4508 3.889-12.2284-.0043-2.3544-.3927-8.2876-3.9336-12.6136zm-2.5144 22.758a11.615 11.615 0 0 1-9.2366 4.0615l-7.3773.0133-.0516-28.7535 7.3772-.0132a11.5412 11.5412 0 0 1 9.2512 4.0271c2.9396 3.5948 3.1714 8.9716 3.1742 10.5264.0042 2.3338-.3878 6.7559-3.137 10.1384z',
});

var _ref4$5 = React.createElement('path', {
  d:
    'M59.9016 0l.0877 48.7976a.9801.9801 0 0 1-.6872.956.7852.7852 0 0 1-.311.0678 1.011 1.011 0 0 1-.8229-.4217L36.3643 21.7303l.076 42.2638L33.1294 64l-.0879-48.9083a.9989.9989 0 0 1 .7094-.956.706.706 0 0 1 .311-.045 1.0218 1.0218 0 0 1 .8229.3978l21.8038 27.6922L56.6128.0059z',
});

var Logo = (function(_React$PureComponent) {
  _inherits(Logo, _React$PureComponent);

  var _super = _createSuper$w(Logo);

  function Logo() {
    _classCallCheck(this, Logo);

    return _super.apply(this, arguments);
  }

  _createClass(
    Logo,
    [
      {
        key: 'render',
        value: function render() {
          var _extends2;

          var props = extendPropsWithContext(
            this.props,
            defaultProps$u,
            this.context.formRow,
            this.context.translation.Logo
          );

          var ratio = props.ratio,
            size = props.size,
            width = props.width,
            height = props.height,
            color = props.color,
            alt = props.alt,
            className = props.className,
            _className = props.class,
            rest = _objectWithoutProperties(props, [
              'ratio',
              'size',
              'width',
              'height',
              'color',
              'alt',
              'className',
              'class',
            ]);

          if (parseFloat(size) > -1 && width === null && height === null) {
            width = size * ratio;
            height = width / ratio;
          } else if (parseFloat(width) > -1 && height === null) {
            height = width / ratio;
          } else if (parseFloat(height) > -1 && width === null) {
            width = height * ratio;
          }

          var rootParams = _extends(
            ((_extends2 = {
              className: classnames(
                'dnb-logo',
                className,
                _className,
                createSpacingClasses(props),
                (width > 0 || height > 0) && 'dnb-logo--has-size',
                size === 'inherit' && 'dnb-logo--inherit-size'
              ),
              role: 'img',
              alt: alt,
            }),
            _defineProperty(_extends2, 'data-ratio', ratio),
            _defineProperty(_extends2, 'aria-hidden', true),
            _extends2),
            rest
          );

          var svgParams = {
            viewBox: '0 0 93.0362 64',
          };
          if (parseFloat(width) > -1) svgParams['width'] = width;
          if (parseFloat(height) > -1) svgParams['height'] = height;
          if (color) svgParams['color'] = color;
          validateDOMAttributes(this.props, rootParams);
          validateDOMAttributes(null, svgParams);
          return React.createElement(
            'span',
            rootParams,
            React.createElement(
              'svg',
              svgParams,
              _ref$7,
              _ref2$7,
              _ref3$9,
              _ref4$5
            )
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(Logo.tagName, Logo, defaultProps$u);
        },
      },
    ]
  );

  return Logo;
})(React.PureComponent);

Logo.tagName = 'dnb-logo';
Logo.defaultProps = defaultProps$u;
Logo.contextType = Context;

var hasPassiveEvents = false;

if (typeof window !== 'undefined') {
  var passiveTestOptions = {
    get passive() {
      hasPassiveEvents = true;
      return undefined;
    },
  };
  window.addEventListener('testPassive', null, passiveTestOptions);
  window.removeEventListener('testPassive', null, passiveTestOptions);
}

var isIosDevice =
  typeof window !== 'undefined' &&
  window.navigator &&
  window.navigator.platform &&
  /iP(ad|hone|od)/.test(window.navigator.platform);
var locks = [];
var documentListenerAdded = false;
var initialClientY = -1;
var prevBodyOverflow;
var prevBodyHeight;
var prevRootOverflow;
var prevRootHeight;
var prevBodyMarginLeft;

var allowTouchMove = function allowTouchMove(el) {
  return locks.some(function(lock) {
    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {
      return true;
    }

    return false;
  });
};

var preventDefault = function preventDefault(rawEvent) {
  var e = rawEvent || window.event;

  if (allowTouchMove(e.target)) {
    return true;
  }

  if (e.touches.length > 1) return true;
  if (e.preventDefault) e.preventDefault();
  return false;
};

var setOverflowHidden = function setOverflowHidden() {
  try {
    var scrollBarGap =
      window.innerWidth - document.documentElement.clientWidth;

    if (scrollBarGap > 0) {
      scrollBarGap =
        scrollBarGap -
        (parseFloat(window.getComputedStyle(document.body).marginLeft) ||
          0);
    }

    if (prevBodyHeight === undefined) {
      prevBodyHeight = document.body.style.height;
      document.body.style.height = 'auto';
    }

    if (prevRootHeight === undefined) {
      prevRootHeight = document.documentElement.style.height;
      document.documentElement.style.height = 'auto';
    }

    if (prevBodyOverflow === undefined) {
      prevBodyOverflow = document.body.style.overflow;
      document.body.style.overflow = 'hidden';
    }

    if (prevRootOverflow === undefined) {
      prevRootOverflow = document.documentElement.style.overflow;
      document.documentElement.style.overflow = 'hidden';
    }

    if (prevBodyMarginLeft === undefined && scrollBarGap > 0) {
      prevBodyMarginLeft = document.body.style.marginLeft;
      document.body.style.marginLeft = '-'.concat(scrollBarGap / 2, 'px');
    }
  } catch (e) {
    console.error(e);
  }
};

var restoreOverflowSetting = function restoreOverflowSetting() {
  try {
    if (prevBodyMarginLeft !== undefined) {
      document.body.style.marginLeft = prevBodyMarginLeft;
      prevBodyMarginLeft = undefined;
    }

    if (prevBodyOverflow !== undefined) {
      document.body.style.overflow = prevBodyOverflow;
      prevBodyOverflow = undefined;
    }

    if (prevRootOverflow !== undefined) {
      document.documentElement.style.overflow = prevRootOverflow;
      prevRootOverflow = undefined;
    }

    if (prevBodyHeight !== undefined) {
      document.body.style.height = prevBodyHeight;
      prevBodyHeight = undefined;
    }

    if (prevRootHeight !== undefined) {
      document.documentElement.style.height = prevRootHeight;
      prevRootHeight = undefined;
    }
  } catch (e) {
    console.error(e);
  }
};

var isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(
  targetElement
) {
  return targetElement
    ? targetElement.scrollHeight - targetElement.scrollTop <=
        targetElement.clientHeight
    : false;
};

var handleScroll = function handleScroll(event, targetElement) {
  var clientY = event.targetTouches[0].clientY - initialClientY;

  if (allowTouchMove(event.target)) {
    return false;
  }

  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {
    return preventDefault(event);
  }

  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {
    return preventDefault(event);
  }

  event.stopPropagation();
  return true;
};

var disableBodyScroll = function disableBodyScroll(targetElement) {
  var options =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (isIosDevice) {
    if (!targetElement) {
      console.error(
        'disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.'
      );
      return;
    }

    if (
      targetElement &&
      !locks.some(function(lock) {
        return lock.targetElement === targetElement;
      })
    ) {
      var lock = {
        targetElement: targetElement,
        options: options,
      };
      locks = [].concat(_toConsumableArray(locks), [lock]);

      targetElement.ontouchstart = function(event) {
        if (event.targetTouches.length === 1) {
          initialClientY = event.targetTouches[0].clientY;
        }
      };

      targetElement.ontouchmove = function(event) {
        if (event.targetTouches.length === 1) {
          handleScroll(event, targetElement);
        }
      };

      if (!documentListenerAdded) {
        document.addEventListener(
          'touchmove',
          preventDefault,
          hasPassiveEvents
            ? {
                passive: false,
              }
            : undefined
        );
        documentListenerAdded = true;
      }
    }
  } else {
    setOverflowHidden();
    var _lock = {
      targetElement: targetElement,
      options: options,
    };
    locks = [].concat(_toConsumableArray(locks), [_lock]);
  }
};
var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {
  if (isIosDevice) {
    locks.forEach(function(lock) {
      lock.targetElement.ontouchstart = null;
      lock.targetElement.ontouchmove = null;
    });

    if (documentListenerAdded) {
      document.removeEventListener(
        'touchmove',
        preventDefault,
        hasPassiveEvents
          ? {
              passive: false,
            }
          : undefined
      );
      documentListenerAdded = false;
    }

    locks = [];
    initialClientY = -1;
  } else {
    restoreOverflowSetting();
    locks = [];
  }
};
var enableBodyScroll = function enableBodyScroll(targetElement) {
  if (isIosDevice) {
    if (!targetElement) {
      console.error(
        'enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.'
      );
      return;
    }

    targetElement.ontouchstart = null;
    targetElement.ontouchmove = null;
    locks = locks.filter(function(lock) {
      return lock.targetElement !== targetElement;
    });

    if (documentListenerAdded && locks.length === 0) {
      document.removeEventListener(
        'touchmove',
        preventDefault,
        hasPassiveEvents
          ? {
              passive: false,
            }
          : undefined
      );
      documentListenerAdded = false;
    }
  } else {
    locks = locks.filter(function(lock) {
      return lock.targetElement !== targetElement;
    });

    if (!locks.length) {
      restoreOverflowSetting();
    }
  }
};

function _createSuper$x(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$y()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$y() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}

var ModalContent = (function(_React$PureComponent) {
  _inherits(ModalContent, _React$PureComponent);

  var _super = _createSuper$x(ModalContent);

  function ModalContent(props) {
    var _this;

    _classCallCheck(this, ModalContent);

    _this = _super.call(this, props);

    _this.preventClick = function(e) {
      if (e) {
        e.stopPropagation();
      }
    };

    _this.onKeyDownHandler = function(e) {
      switch (keycode(e)) {
        case 'esc':
          e.preventDefault();

          _this.props.closeModal(e);

          break;
      }
    };

    _this._contentRef = React.createRef();
    _this._id = props.content_id || makeUniqueId();
    return _this;
  }

  _createClass(ModalContent, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.removeScrollPossibility();
        this.preventScreenReaderPossibility();
        this.removeFocusPossibility();
        this.setFocus();
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this._focusTimeout);
        this.revertScrollPossibility();
        this.revertScreenReaderPossibility();
        this.revertFocusPossibility();
      },
    },
    {
      key: 'setFocus',
      value: function setFocus() {
        var _this2 = this;

        if (this._contentRef.current) {
          clearTimeout(this._focusTimeout);
          this._focusTimeout = setTimeout(function() {
            try {
              _this2._contentRef.current.focus();

              var focusElement = _this2._contentRef.current.querySelector(
                '.dnb-h1:first-of-type, .dnb-h2:first-of-type, .dnb-modal__close-button'
              );

              if (focusElement) {
                focusElement.focus();
              }
            } catch (e) {
              console.warn(e);
            }
          }, 300);
        }
      },
    },
    {
      key: 'preventScreenReaderPossibility',
      value: function preventScreenReaderPossibility() {
        this.nonScreenReaderNodes = Array.from(
          document.querySelectorAll('body > div:not(#dnb-modal-root)')
        );
        this.nonScreenReaderNodes.forEach(function(node) {
          node.setAttribute('aria-hidden', true);
        });
      },
    },
    {
      key: 'revertScreenReaderPossibility',
      value: function revertScreenReaderPossibility() {
        if (this.nonScreenReaderNodes) {
          this.nonScreenReaderNodes.forEach(function(node) {
            node.removeAttribute('aria-hidden');
          });
        }
      },
    },
    {
      key: 'removeScrollPossibility',
      value: function removeScrollPossibility() {
        if (this._contentRef.current) {
          disableBodyScroll(this._contentRef.current);
        }
      },
    },
    {
      key: 'revertScrollPossibility',
      value: function revertScrollPossibility() {
        enableBodyScroll(this._contentRef.current);
        clearAllBodyScrollLocks();
      },
    },
    {
      key: 'removeFocusPossibility',
      value: function removeFocusPossibility() {
        if (typeof document === 'undefined' || isTouchDevice()) {
          return;
        }

        var modalNodes = Array.from(
          document.querySelectorAll('.dnb-modal__content *')
        );
        this.nonModalNodes = Array.from(
          document.querySelectorAll(
            'body *:not(.dnb-modal__content):not([tabindex="-1"]):not(script)'
          )
        ).filter(function(node) {
          return !modalNodes.includes(node);
        });
        this.nonModalNodes.forEach(function(node) {
          try {
            node._prevTabindex = node.getAttribute('tabindex');
            node.setAttribute('tabindex', -1);
            node.style.outline = 'none';
          } catch (e) {
            console.warn(e);
          }
        });
      },
    },
    {
      key: 'revertFocusPossibility',
      value: function revertFocusPossibility() {
        if (!this.nonModalNodes || isTouchDevice()) {
          return;
        }

        this.nonModalNodes.forEach(function(node) {
          try {
            if (node && node._prevTabindex) {
              node.setAttribute('tabindex', node._prevTabindex);
              node._prevTabindex = null;
              delete node._prevTabindex;
            } else {
              node.removeAttribute('tabindex');
            }

            node.style.outline = null;
          } catch (e) {
            console.warn(e);
          }
        });
        this.nonModalNodes = null;
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          mode = _this$props.mode,
          hide = _this$props.hide,
          title = _this$props.title,
          labelled_by = _this$props.labelled_by,
          modal_content = _this$props.modal_content,
          close_title = _this$props.close_title,
          hide_close_button = _this$props.hide_close_button,
          prevent_close = _this$props.prevent_close,
          open_delay = _this$props.open_delay,
          prevent_core_style = _this$props.prevent_core_style,
          no_animation = _this$props.no_animation,
          minWidth = _this$props.min_width,
          maxWidth = _this$props.max_width,
          fullscreen = _this$props.fullscreen,
          align_content = _this$props.align_content,
          container_placement = _this$props.container_placement,
          closeModal = _this$props.closeModal,
          className = _this$props.className,
          _className = _this$props.class,
          content_id = _this$props.content_id,
          toggleOpenClose = _this$props.toggleOpenClose,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, [
            'mode',
            'hide',
            'title',
            'labelled_by',
            'modal_content',
            'close_title',
            'hide_close_button',
            'prevent_close',
            'open_delay',
            'prevent_core_style',
            'no_animation',
            'min_width',
            'max_width',
            'fullscreen',
            'align_content',
            'container_placement',
            'closeModal',
            'className',
            'class',
            'content_id',
            'toggleOpenClose',
            'children',
          ]);

        var id = this._id;
        var contentParams = {
          role: 'dialog',
          'aria-modal': 'true',
          className: classnames(
            'dnb-modal__content',
            (fullscreen || mode === 'drawer') &&
              'dnb-modal__content--fullscreen',
            mode && 'dnb-modal__content--'.concat(mode),
            hide && 'dnb-modal__content--hide',
            align_content &&
              'dnb-modal__content__align--'.concat(align_content),
            container_placement &&
              'dnb-modal__content--'.concat(container_placement),
            isTrue(no_animation) && 'dnb-modal__content--no-animation'
          ),
          onClick: closeModal,
        };

        var innerParams = _extends(
          {
            id: id,
            tabIndex: -1,
            className: classnames(
              'dnb-modal__content__inner dnb-no-focus',
              className,
              _className,
              !isTrue(prevent_core_style) && 'dnb-core-style'
            ),
            style: (minWidth || maxWidth) && {
              minWidth: minWidth,
              maxWidth: maxWidth,
            },
            onClick: this.preventClick,
            onTouchStart: this.preventClick,
            onKeyDown: this.onKeyDownHandler,
          },
          rest
        );

        if (labelled_by) {
          contentParams['aria-labelledby'] = labelled_by;
          contentParams['aria-describedby'] = labelled_by;
        }

        var overlayParams = {
          className: classnames(
            'dnb-modal__overlay',
            hide && 'dnb-modal__overlay--hide',
            mode && 'dnb-modal__overlay--'.concat(mode)
          ),
        };
        validateDOMAttributes(this.props, innerParams);
        return React.createElement(
          React.Fragment,
          null,
          React.createElement(
            'div',
            contentParams,
            React.createElement(
              'div',
              _extends({}, innerParams, {
                ref: this._contentRef,
              }),
              title &&
                React.createElement(
                  'h1',
                  {
                    className: 'dnb-modal__title dnb-h2',
                  },
                  title
                ),
              isTrue(hide_close_button) !== true &&
                React.createElement(CloseButton$1, {
                  on_click: closeModal,
                  title: close_title,
                }),
              React.createElement(
                'div',
                {
                  className: 'dnb-modal__wrapper',
                },
                modal_content
              )
            )
          ),
          React.createElement(
            'span',
            _extends({}, overlayParams, {
              'aria-hidden': 'true',
            })
          )
        );
      },
    },
  ]);

  return ModalContent;
})(React.PureComponent);

ModalContent.defaultProps = {
  mode: null,
  hide: false,
  labelled_by: null,
  content_id: null,
  title: 'Lukk',
  close_title: 'Lukk',
  hide_close_button: false,
  prevent_close: null,
  prevent_core_style: null,
  no_animation: null,
  min_width: null,
  max_width: null,
  fullscreen: null,
  align_content: null,
  container_placement: null,
  class: null,
  closeModal: null,
  className: null,
  children: null,
};
var CloseButton$1 = function CloseButton(_ref) {
  var on_click = _ref.on_click,
    title = _ref.title,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? null : _ref$className;
  return React.createElement(Button, {
    type: 'button',
    variant: 'secondary',
    size: 'medium',
    className: classnames('dnb-modal__close-button', className),
    icon: 'close',
    icon_size: 'medium',
    'aria-label': title,
    on_click: on_click,
  });
};
CloseButton$1.defaultProps = {
  className: null,
  title: 'Lukk',
};

function _createSuper$y(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$z()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$z() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$m = {
  on_open: null,
  on_close: null,
  on_close_prevent: null,
  open_modal: null,
  close_modal: null,
  modal_content: null,
};

var defaultProps$v = _extends(
  {
    id: null,
    mode: 'modal',
    labelled_by: null,
    title: null,
    disabled: null,
    trigger_hidden: false,
    trigger_disabled: null,
    trigger_variant: 'secondary',
    trigger_text: null,
    trigger_title: null,
    trigger_icon: 'question',
    trigger_icon_position: 'left',
    trigger_class: null,
    open_delay: null,
    content_id: null,
    close_title: 'Lukk',
    hide_close_button: false,
    prevent_close: false,
    prevent_core_style: false,
    no_animation: false,
    fullscreen: false,
    align_content: 'left',
    container_placement: 'right',
    open_state: null,
    direct_dom_return: false,
    class: null,
    className: null,
    children: null,
    preventSetTriggerRef: false,
  },
  renderProps$m
);

var Modal = (function(_React$PureComponent) {
  _inherits(Modal, _React$PureComponent);

  var _super = _createSuper$y(Modal);

  _createClass(Modal, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Modal.tagName, Modal, defaultProps$v);
      },
    },
    {
      key: 'getContent',
      value: function getContent(props) {
        if (typeof props.modal_content === 'string') {
          return props.modal_content;
        } else if (typeof props.modal_content === 'function') {
          return props.modal_content(props);
        }

        return processChildren(props);
      },
    },
    {
      key: 'insertModalRoot',
      value: function insertModalRoot() {
        if (typeof window === 'undefined') {
          return false;
        }

        try {
          window.modalRoot = document.getElementById('dnb-modal-root');

          if (!window.modalRoot) {
            window.modalRoot = document.createElement('div');
            window.modalRoot.setAttribute('id', 'dnb-modal-root');
            document.body.insertBefore(
              window.modalRoot,
              document.body.firstChild
            );
          }
        } catch (e) {
          console.warn('Modal: Could not insert dnb-modal-root', e);
        }

        return window.modalRoot;
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          switch (props.open_state) {
            case 'opened':
              state.modalActive = true;
              break;

            case 'closed':
              state.modalActive = false;
              break;
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function Modal(props) {
    var _this;

    _classCallCheck(this, Modal);

    _this = _super.call(this, props);
    _this.state = {
      hide: false,
      _listenForPropChanges: true,
      currentActiveState: false,
      modalActive: false,
    };

    _this.toggleOpenClose = function() {
      var event =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : null;
      var showModal =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      if (event && event.preventDefault) {
        event.preventDefault();
      }

      var toggleNow = function toggleNow() {
        var doItNow = function doItNow() {
          _this.setState({
            hide: false,
            modalActive: modalActive,
            _listenForPropChanges: false,
          });
        };

        var modalActive =
          showModal !== null ? showModal : !_this.state.modalActive;

        if (!isTrue(_this.props.no_animation) && modalActive === false) {
          _this.setState({
            hide: true,
            _listenForPropChanges: false,
          });

          clearTimeout(_this._closeTimeout);
          _this._closeTimeout = setTimeout(doItNow, 300);
        } else {
          doItNow();
        }
      };

      var delay = parseFloat(_this.props.open_delay);

      if (delay > 0) {
        clearTimeout(_this._openTimeout);
        _this._openTimeout = setTimeout(toggleNow, delay);
      } else {
        toggleNow();
      }
    };

    _this.handleSideEffects = function() {
      if (!isTrue(_this.props.direct_dom_return)) {
        Modal.insertModalRoot();
      }

      var modalActive = _this.state.modalActive;
      var currentActiveState = modalActive;

      var runSideEffect = function runSideEffect() {
        if (typeof document !== 'undefined') {
          try {
            document.body.setAttribute(
              'data-dnb-modal-active',
              modalActive ? 'true' : 'false'
            );
          } catch (e) {
            console.warn(
              'Modal: Error on set "data-dnb-modal-active" by using element.setAttribute()',
              e
            );
          }
        }

        if (modalActive) {
          if (typeof _this.props.close_modal === 'function') {
            var fn = _this.props.close_modal(function() {
              _this.isClosing = false;

              _this.toggleOpenClose(null, false);
            }, _assertThisInitialized(_this));

            if (fn) {
              _this._onUnmount.push(fn);
            }
          }
        }

        var id = _this._id;

        if (modalActive) {
          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_open',
            {
              id: id,
            }
          );
        } else if (_this.wasActive) {
          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_close',
            {
              id: id,
            }
          );
        }

        _this.wasActive = modalActive;

        if (modalActive === false) {
          if (_this._triggerRef && _this._triggerRef.current) {
            _this._triggerRef.current.focus();
          }

          if (_this.props.open_state === 'opened' && _this.activeElement) {
            try {
              _this.activeElement.focus();

              _this.activeElement = null;
            } catch (e) {}
          }
        }
      };

      _this.setState(
        {
          currentActiveState: currentActiveState,
          _listenForPropChanges: false,
        },
        runSideEffect
      );
    };

    _this.open = function(e) {
      _this.toggleOpenClose(e, true);
    };

    _this.close = function(e) {
      var prevent_close = _this.props.prevent_close;

      if (isTrue(prevent_close)) {
        if (!_this.isClosing) {
          var id = _this._id;
          _this.isClosing = true;
          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_close_prevent',
            {
              id: id,
              close: function close(e) {
                _this.isClosing = false;

                _this.toggleOpenClose(e, false);
              },
            }
          );
        }
      } else {
        _this.toggleOpenClose(e, false);
      }
    };

    _this._id = props.id || makeUniqueId();

    if (!props.preventSetTriggerRef) {
      _this._triggerRef = React.createRef();
    }

    _this._onUnmount = [];
    return _this;
  }

  _createClass(Modal, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        var open_modal = this.props.open_modal;

        if (typeof open_modal === 'function') {
          var fn = open_modal(function() {
            _this2.toggleOpenClose(null, true);
          }, this);

          if (fn) {
            this._onUnmount.push(fn);
          }
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._onUnmount.forEach(function(fn) {
          if (typeof fn === 'function') {
            fn();
          }
        });

        clearTimeout(this._openTimeout);
        clearTimeout(this._closeTimeout);
        clearTimeout(this._sideEffectsTimeout);
        this.toggleOpenClose(null, false);
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this3 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$v,
          this.context.formRow,
          this.context.translation.Modal
        );

        var id = props.id,
          open_state = props.open_state,
          open_delay = props.open_delay,
          preventSetTriggerRef = props.preventSetTriggerRef,
          disabled = props.disabled,
          labelled_by = props.labelled_by,
          trigger_hidden = props.trigger_hidden,
          trigger_disabled = props.trigger_disabled,
          trigger_variant = props.trigger_variant,
          trigger_text = props.trigger_text,
          trigger_title = props.trigger_title,
          trigger_icon = props.trigger_icon,
          trigger_icon_position = props.trigger_icon_position,
          trigger_class = props.trigger_class,
          rest = _objectWithoutProperties(props, [
            'id',
            'open_state',
            'open_delay',
            'preventSetTriggerRef',
            'disabled',
            'labelled_by',
            'trigger_hidden',
            'trigger_disabled',
            'trigger_variant',
            'trigger_text',
            'trigger_title',
            'trigger_icon',
            'trigger_icon_position',
            'trigger_class',
          ]);

        var _this$state = this.state,
          modalActive = _this$state.modalActive,
          currentActiveState = _this$state.currentActiveState;
        var modal_content = Modal.getContent(this.props);

        if (modalActive !== currentActiveState) {
          if (!this.activeElement && typeof document !== 'undefined') {
            this.activeElement = document.activeElement;
          }

          clearTimeout(this._sideEffectsTimeout);
          this._sideEffectsTimeout = setTimeout(this.handleSideEffects, 1);
        }

        return React.createElement(SuffixContext.Consumer, null, function(
          suffixProps
        ) {
          var additional = {};
          var icon =
            trigger_icon !== 'question'
              ? trigger_icon
              : (!trigger_text || trigger_variant === 'tertiary') &&
                trigger_icon;

          if (!rest.title && icon === 'question' && suffixProps) {
            additional.title = _this3.context.translation.Modal.more_info;
          }

          return React.createElement(
            'div',
            {
              className: 'dnb-modal',
            },
            !isTrue(trigger_hidden) &&
              React.createElement(Button, {
                id: _this3._id,
                type: 'button',
                variant: trigger_variant,
                text: trigger_text,
                'aria-label':
                  props['aria-label'] ||
                  trigger_title ||
                  props.title ||
                  additional.title,
                disabled: isTrue(disabled) || isTrue(trigger_disabled),
                icon: icon,
                icon_position: trigger_icon_position,
                on_click: _this3.toggleOpenClose,
                className: classnames(
                  'dnb-modal__trigger',
                  createSpacingClasses(props),
                  trigger_class
                ),
                innerRef: _this3._triggerRef,
              }),
            modalActive &&
              modal_content &&
              React.createElement(
                ModalRoot,
                _extends(
                  {},
                  rest,
                  {
                    labelled_by: labelled_by || _this3._id,
                    modal_content: modal_content,
                    closeModal: _this3.close,
                    hide: _this3.state.hide,
                    toggleOpenClose: _this3.toggleOpenClose,
                  },
                  additional
                )
              )
          );
        });
      },
    },
  ]);

  return Modal;
})(React.PureComponent);

Modal.tagName = 'dnb-modal';
Modal.defaultProps = defaultProps$v;
Modal.contextType = Context;
Modal.modalRoot = null;

var ModalRoot = (function(_React$PureComponent2) {
  _inherits(ModalRoot, _React$PureComponent2);

  var _super2 = _createSuper$y(ModalRoot);

  function ModalRoot() {
    var _this4;

    _classCallCheck(this, ModalRoot);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this4 = _super2.call.apply(_super2, [this].concat(args));
    _this4.state = {
      isMonted: false,
    };
    return _this4;
  }

  _createClass(ModalRoot, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (!isTrue(this.props.direct_dom_return)) {
          Modal.insertModalRoot();

          try {
            if (!this.node) {
              this.node = document.createElement('div');
              this.node.className = 'dnb-modal-root__inner';
            }

            if (window.modalRoot && this.node) {
              window.modalRoot.appendChild(this.node);
            }
          } catch (e) {
            console.warn(e);
          }

          this.setState({
            isMonted: true,
          });
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (window.modalRoot && this.node) {
          this.setState({
            isMonted: false,
          });
          window.modalRoot.removeChild(this.node);
          this.node = null;
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          children = _this$props.children,
          direct_dom_return = _this$props.direct_dom_return,
          props = _objectWithoutProperties(_this$props, [
            'children',
            'direct_dom_return',
          ]);

        if (isTrue(direct_dom_return)) {
          return React.createElement(ModalContent, props, children);
        }

        if (this.state.isMonted && window.modalRoot && this.node) {
          return ReactDOM.createPortal(
            React.createElement(ModalContent, props, children),
            this.node
          );
        }

        return null;
      },
    },
  ]);

  return ModalRoot;
})(React.PureComponent);

ModalRoot.defaultProps = {
  direct_dom_return: false,
  children: null,
};

function _createSuper$z(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$A()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$A() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$n = {};

var defaultProps$w = _extends(
  {
    notification_amount: 0,
    title_text: null,
    class: null,
    className: null,
    children: null,
  },
  renderProps$n
);

var _ref$8 = React.createElement(
  'span',
  {
    className: 'dnb-notification__icon',
  },
  React.createElement(IconPrimary, {
    className: 'dnb-notification__icon',
    icon: 'bell',
  })
);

var Notification = (function(_React$PureComponent) {
  _inherits(Notification, _React$PureComponent);

  var _super = _createSuper$z(Notification);

  function Notification() {
    _classCallCheck(this, Notification);

    return _super.apply(this, arguments);
  }

  _createClass(
    Notification,
    [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            notification_amount = _this$props.notification_amount,
            title_text = _this$props.title_text,
            className = _this$props.className,
            _className = _this$props.class;
          var params = {
            className: classnames(
              'dnb-notification',
              className,
              _className,
              notification_amount > 0 &&
                'dnb-notification--has-notification'
            ),
          };
          var buttonParams = {
            title: title_text.replace(/{amount}/, notification_amount),
          };
          validateDOMAttributes(this.props, params);
          return React.createElement(
            'div',
            params,
            React.createElement(
              'button',
              _extends(
                {
                  type: 'button',
                  className: 'dnb-notification__button',
                },
                buttonParams
              ),
              React.createElement(
                'span',
                {
                  className: 'dnb-notification__inner',
                },
                _ref$8,
                notification_amount > 0 &&
                  React.createElement(
                    'span',
                    {
                      className: 'dnb-notification__amount',
                    },
                    React.createElement(
                      'span',
                      {
                        className: 'dnb-notification__amount__inner',
                      },
                      notification_amount
                    )
                  )
              )
            )
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            Notification.tagName,
            Notification,
            defaultProps$w
          );
        },
      },
    ]
  );

  return Notification;
})(React.PureComponent);

Notification.tagName = 'dnb-notification';
Notification.defaultProps = defaultProps$w;

function _createSuper$A(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$B()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$B() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var isMac$1 = null;
var isWin$1 = null;
var renderProps$o = {};

var defaultProps$x = _extends(
  {
    value: null,
    locale: null,
    currency: null,
    currency_display: null,
    ban: null,
    nin: null,
    phone: null,
    link: null,
    options: null,
    selectable: null,
    element: 'span',
    class: null,
    className: null,
    children: null,
  },
  renderProps$o
);

var Number$1 = (function(_React$PureComponent) {
  _inherits(Number, _React$PureComponent);

  var _super = _createSuper$A(Number);

  function Number() {
    _classCallCheck(this, Number);

    return _super.apply(this, arguments);
  }

  _createClass(
    Number,
    [
      {
        key: 'render',
        value: function render() {
          var _this = this;

          if (isMac$1 === null) {
            isMac$1 = isMac();
          }

          if (isWin$1 === null) {
            isWin$1 = isWin();
          }

          var _this$props = this.props,
            _value = _this$props.value,
            children = _this$props.children,
            currency = _this$props.currency,
            currency_display = _this$props.currency_display,
            ban = _this$props.ban,
            nin = _this$props.nin,
            phone = _this$props.phone,
            _link = _this$props.link,
            options = _this$props.options,
            locale = _this$props.locale,
            selectable = _this$props.selectable,
            element = _this$props.element,
            _className = _this$props.class,
            className = _this$props.className,
            rest = _objectWithoutProperties(_this$props, [
              'value',
              'children',
              'currency',
              'currency_display',
              'ban',
              'nin',
              'phone',
              'link',
              'options',
              'locale',
              'selectable',
              'element',
              'class',
              'className',
            ]);

          var link = _link;
          var value = _value;

          if (children !== null) {
            value = children;
          }

          var formatOptions = {
            locale: locale,
            currency: currency,
            currency_display: currency_display,
            ban: ban,
            nin: nin,
            phone: phone,
            options: options,
            returnAria: true,
          };

          if (this.context) {
            var useContext = extend(
              true,
              {
                locale: null,
                currency: null,
              },
              this.context,
              this.context.translation.Number
            );

            if (useContext) {
              if (useContext.locale && !locale) {
                formatOptions.locale = useContext.locale;
              }

              if (useContext.currency && isTrue(currency)) {
                formatOptions.options = formatOptions.options
                  ? _extends({}, formatOptions.options)
                  : {};
                formatOptions.options.currency = useContext.currency;
              }
            }
          }

          var _format = format$1(value, formatOptions),
            display = _format.number,
            aria = _format.aria,
            lang = _format.locale;

          var attributes = _extends(
            {},
            {
              className: classnames(
                'dnb-number',
                className,
                _className,
                createSpacingClasses(this.props),
                isTrue(selectable) && 'dnb-number--selectable',
                link && 'dnb-anchor'
              ),
            },
            {},
            rest
          );

          if (isMac$1) {
            attributes['role'] = 'text';
          } else {
            attributes['role'] = 'textbox';
            attributes['aria-readonly'] = true;
          }

          var additionalAttr = {};

          if (aria !== display) {
            additionalAttr['aria-label'] = aria;
          }

          validateDOMAttributes(this.props, attributes);

          if (link) {
            if (isTrue(link)) {
              link = 'tel';
            }

            return React.createElement(
              'a',
              _extends(
                {
                  href: ''.concat(link, ':').concat(display),
                },
                attributes
              ),
              display
            );
          }

          var OldEdgeFriendly = function OldEdgeFriendly() {
            if (!_this._id) {
              _this._id = makeUniqueId();
            }

            return React.createElement(
              React.Fragment,
              null,
              React.createElement(
                Element$4,
                _extends(
                  {
                    is: element,
                    'aria-describedby': _this._id,
                    'aria-hidden': true,
                  },
                  attributes
                ),
                display
              ),
              React.createElement(
                'span',
                {
                  id: _this._id,
                  lang: lang,
                  className: 'dnb-sr-only--inline',
                },
                aria
              )
            );
          };

          return isWin$1
            ? React.createElement(OldEdgeFriendly, null)
            : React.createElement(
                Element$4,
                _extends(
                  {
                    is: element,
                    lang: lang,
                  },
                  additionalAttr,
                  attributes
                ),
                display
              );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(Number.tagName, Number, defaultProps$x);
        },
      },
    ]
  );

  return Number;
})(React.PureComponent);

Number$1.tagName = 'dnb-number';
Number$1.defaultProps = defaultProps$x;
Number$1.contextType = Context;
var Element$4 = React.forwardRef(function(_ref, ref) {
  var Element = _ref.is,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, ['is', 'children']);

  return React.createElement(
    Element,
    _extends({}, rest, {
      ref: ref,
    }),
    children
  );
});
Element$4.propTypes = {
  is: propTypes.string.isRequired,
  children: propTypes.node,
};
Element$4.defaultProps = {
  children: null,
};
var format$1 = function format(value) {
  var _ref2 =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {},
    _ref2$locale = _ref2.locale,
    locale = _ref2$locale === void 0 ? null : _ref2$locale,
    _ref2$phone = _ref2.phone,
    phone = _ref2$phone === void 0 ? null : _ref2$phone,
    _ref2$ban = _ref2.ban,
    ban = _ref2$ban === void 0 ? null : _ref2$ban,
    _ref2$nin = _ref2.nin,
    nin = _ref2$nin === void 0 ? null : _ref2$nin,
    _ref2$currency = _ref2.currency,
    currency = _ref2$currency === void 0 ? null : _ref2$currency,
    _ref2$currency_displa = _ref2.currency_display,
    currency_display =
      _ref2$currency_displa === void 0
        ? CURRENCY_DISPLAY
        : _ref2$currency_displa,
    _ref2$options = _ref2.options,
    options = _ref2$options === void 0 ? null : _ref2$options,
    _ref2$returnAria = _ref2.returnAria,
    returnAria = _ref2$returnAria === void 0 ? false : _ref2$returnAria;

  var display = value;
  var aria = null;

  if (!locale) {
    locale = LOCALE;
  } else if (locale === 'auto') {
    try {
      locale = window.navigator.language;
    } catch (e) {
      console.warn(e);
    }
  }

  var opts =
    (typeof options === 'string' && options[0] === '{'
      ? JSON.parse(options)
      : options) || {};

  if (isTrue(phone)) {
    var _formatPhone = formatPhone(value, locale),
      _number = _formatPhone.number,
      _aria = _formatPhone.aria;

    display = _number;
    aria = _aria;
  } else if (isTrue(ban)) {
    var _formatBAN = formatBAN(value, locale),
      _number2 = _formatBAN.number,
      _aria2 = _formatBAN.aria;

    display = _number2;
    aria = _aria2;
  } else if (isTrue(nin)) {
    var _formatNIN = formatNIN(value, locale),
      _number3 = _formatNIN.number,
      _aria3 = _formatNIN.aria;

    display = _number3;
    aria = _aria3;
  } else if (isTrue(currency) || typeof currency === 'string') {
    var cleanedNumber = String(value).replace(/[\s,]/g, '');
    cleanedNumber = parseFloat(
      /(,)(\d\d)$/.test(String(value))
        ? String(value).replace(/(,)(\d\d)$/, '.$2')
        : cleanedNumber
    );
    opts.currency =
      opts.currency || (isTrue(currency) ? CURRENCY : currency);
    opts.style = 'currency';
    opts.currencyDisplay =
      opts.currencyDisplay || currency_display || CURRENCY_DISPLAY;

    if (String(value).indexOf('.') === -1 && cleanedNumber % 1 === 0) {
      opts.minimumFractionDigits = 0;
    }

    display = formatNumber(cleanedNumber, locale, opts);
    display = cleanupMinus(display);
    aria = formatNumber(
      cleanedNumber,
      locale,
      _extends({}, opts, {
        minimumFractionDigits: 2,
        currencyDisplay: 'name',
      })
    );
    aria = enhanceSR(cleanedNumber, aria);
  } else {
    display = formatNumber(value, locale, opts);
    display = cleanupMinus(display);
    aria = formatNumber(
      value,
      locale,
      _extends({}, opts, {
        minimumFractionDigits: 1,
      })
    );
    aria = enhanceSR(value, aria);
  }

  if (aria === null) {
    aria = display;
  }

  return returnAria
    ? {
        number: display,
        aria: aria,
        locale: locale,
      }
    : display;
};

var cleanupMinus = function cleanupMinus(display) {
  var reg = '^(-|−|‐|‒|–|—|―)';
  var first = display[0];
  var second = display[1];

  if (new RegExp(reg).test(first)) {
    if (parseFloat(second) > 0) {
      display = display.replace(new RegExp(reg + '(.*)'), '-$2');
    } else {
      display = display.replace(
        new RegExp(reg + '([^\\d]+)(.*)'),
        '$2-$3'
      );
    }
  }

  return display;
};

var enhanceSR = function enhanceSR(value, aria) {
  if (isMac$1 && Math.abs(parseFloat(value)) <= 99999) {
    aria = String(aria).replace(/\s([0-9])/g, '$1');
  }

  aria = cleanupMinus(aria);
  return aria;
};

var formatNumber = function formatNumber(number, locale) {
  var options =
    arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  try {
    if (
      typeof Number$1 !== 'undefined' &&
      typeof Number$1.toLocaleString === 'function'
    ) {
      return parseFloat(number).toLocaleString(locale, options);
    } else if (
      typeof Intl !== 'undefined' &&
      typeof Intl.NumberFormat === 'function'
    ) {
      return Intl.NumberFormat(locale, options).format(number);
    }
  } catch (e) {
    console.warn(
      'Number could not be formatted: '.concat(
        JSON.stringify([number, locale, options])
      ),
      e
    );
  }

  return number;
};
var formatPhone = function formatPhone(number) {
  var locale =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  var display = number;
  var aria = null;

  switch (locale) {
    default: {
      number = String(number).replace(/[^+0-9]/g, '');
      var code = '';

      if (number.length > 8 && number.substr(0, 2) !== '00') {
        number = '+' + number;
        number = number.replace(/^\+{2,}/, '+');
      }

      if (number[0] === '+') {
        code = number.substr(0, 3) + ' ';
        number = number.substr(3);
      } else if (number.substr(0, 2) === '00') {
        code = number.substr(0, 4) + ' ';
        number = number.substr(4);
      }

      code = code.replace('+', '00');
      var length = number.length;

      if (length === 8 && number[0] === '8') {
        display =
          code +
          number
            .split(/(\d{3})(\d{2})/)
            .filter(function(s) {
              return s;
            })
            .join(' ');
      } else {
        if (length < 6) {
          display = code + number;
        } else {
          display =
            code +
            number
              .split(
                length === 6 ? /^(\+\d{2})|(\d{3})/ : /^(\+\d{2})|(\d{2})/
              )
              .filter(function(s) {
                return s;
              })
              .join(' ');
        }
      }

      aria =
        code +
        number
          .split(/(\d{2})/)
          .filter(function(s) {
            return s;
          })
          .join(' ');
    }
  }

  if (aria === null) {
    aria = display;
  }

  return {
    number: display,
    aria: aria,
  };
};
var formatBAN = function formatBAN(number) {
  var locale =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  number = String(number).replace(/[^0-9]/g, '');
  var display = number;
  var aria = null;

  switch (locale) {
    default: {
      display = number
        .split(/(\d{4})(\d{2})(\d{1,})/)
        .filter(function(s) {
          return s;
        })
        .join(' ');
      aria = number
        .split(/(\d{2})/)
        .filter(function(s) {
          return s;
        })
        .join(' ');
    }
  }

  if (aria === null) {
    aria = display;
  }

  return {
    number: display,
    aria: aria,
  };
};
var formatNIN = function formatNIN(number) {
  var locale =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : null;
  number = String(number).replace(/[^0-9]/g, '');
  var display = number;
  var aria = null;

  switch (locale) {
    default: {
      display = number
        .split(/(\d{6})/)
        .filter(function(s) {
          return s;
        })
        .join(' ');
      aria = display
        .split(/(\d{2})(\d{2})(\d{2}) (\d{1})(\d{1})(\d{1})(\d{1})(\d{1})/)
        .filter(function(s) {
          return s;
        })
        .join(isWin$1 ? '. ' : ' ');
    }
  }

  if (aria === null) {
    aria = display;
  }

  return {
    number: display,
    aria: aria,
  };
};

var Context$1 = React.createContext({
  pagination: {},
});

function _createSuper$B(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$C()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$C() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}

var _ref$9 = React.createElement(ProgressIndicator, null);

var PaginationIndicator = (function(_React$PureComponent) {
  _inherits(PaginationIndicator, _React$PureComponent);

  var _super = _createSuper$B(PaginationIndicator);

  function PaginationIndicator() {
    _classCallCheck(this, PaginationIndicator);

    return _super.apply(this, arguments);
  }

  _createClass(PaginationIndicator, [
    {
      key: 'render',
      value: function render() {
        var indicator_element = this.props.indicator_element;
        var Element = preparePageElement(indicator_element);
        var ElementChild = isTrElement(Element) ? 'td' : 'div';
        return React.createElement(
          Element,
          null,
          React.createElement(
            ElementChild,
            {
              className: 'dnb-pagination__indicator',
            },
            React.createElement(
              'div',
              {
                className: 'dnb-pagination__indicator__inner',
              },
              _ref$9,
              this.context.translation.Pagination.is_loading_text
            )
          )
        );
      },
    },
  ]);

  return PaginationIndicator;
})(React.PureComponent);
PaginationIndicator.contextType = Context;
PaginationIndicator.defaultProps = {
  indicator_element: 'div',
};
var ContentObject = (function() {
  function ContentObject(_ref2) {
    var pageNo = _ref2.pageNo,
      props = _objectWithoutProperties(_ref2, ['pageNo']);

    _classCallCheck(this, ContentObject);

    this.content = null;
    this.pageNo = pageNo;
    this.hasContent = false;

    for (var k in props) {
      this[k] = props[k];
    }
  }

  _createClass(ContentObject, [
    {
      key: 'insert',
      value: function insert(content) {
        this.hasContent = true;
        this.content = content;

        if (typeof this.onInsert === 'function') {
          this.onInsert(this);
        }

        return this;
      },
    },
    {
      key: 'update',
      value: function update(content) {
        this.hasContent = true;
        this.content = content;

        if (typeof this.onUpdate === 'function') {
          this.onUpdate(this);
        }

        return this;
      },
    },
  ]);

  return ContentObject;
})();
function isTrElement(Element) {
  var isTr = false;

  if (Element === 'tr') {
    isTr = true;
  } else if (
    Element &&
    (_typeof(Element) === 'object' || React.isValidElement(Element))
  ) {
    if ((Element.__emotion_base || Element.target) === 'tr') {
      isTr = true;
    }
  }

  return isTr;
}
function preparePageElement(Element) {
  var includeClassName =
    arguments.length > 1 && arguments[1] !== undefined
      ? arguments[1]
      : 'dnb-pagination__page';

  if (String(Element) === 'Symbol(react.fragment)') {
    return Element;
  }

  if (includeClassName) {
    var isTr = isTrElement(Element);
    return React.forwardRef(function(_ref3, ref) {
      var className = _ref3.className,
        children = _ref3.children,
        props = _objectWithoutProperties(_ref3, ['className', 'children']);

      var params = _extends({}, props, {
        className: classnames(includeClassName, className),
        ref: ref,
      });

      return isTr
        ? React.createElement(
            'td',
            null,
            React.createElement('div', params, children)
          )
        : React.createElement(Element, params, children);
    });
  }

  return Element;
}

function _createSuper$C(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$D()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$D() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$y = {
  startup_page: null,
  current_page: null,
  page_count: null,
  set_content_handler: null,
  reset_content_handler: null,
  reset_pagination_handler: null,
  end_infinity_handler: null,
  rerender: null,
  store: null,
  useMarkerOnly: null,
  children: null,
};

var PaginationProvider = (function(_React$PureComponent) {
  _inherits(PaginationProvider, _React$PureComponent);

  var _super = _createSuper$C(PaginationProvider);

  _createClass(PaginationProvider, null, [
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (props.page_count !== null) {
            state.pageCount = parseFloat(props.page_count) || 1;
          }

          if (props.current_page !== null) {
            state.currentPage = parseFloat(props.current_page) || 1;
          }

          if (typeof state.startupPage === 'undefined') {
            state.startupPage =
              parseFloat(props.startup_page) ||
              parseFloat(props.current_page) ||
              1;
          }

          state.parallelLoadCount =
            parseFloat(props.parallel_load_count) || 1;
          state.minTime = parseFloat(props.min_wait_time) || 0;
          state.placeMakerBeforeContent = isTrue(
            props.place_maker_before_content
          );

          if (props.useMarkerOnly) {
            if (!state.lowerPage) {
              state.lowerPage = state.upperPage = state.startupPage;
            }
          }

          if (
            props.reset_pagination_handler !== null &&
            isTrue(props.reset_pagination_handler)
          ) {
            if (props.useMarkerOnly) {
              state.lowerPage = state.upperPage = state.startupPage;
            }
          }

          if (
            props.reset_content_handler !== null &&
            isTrue(props.reset_content_handler)
          ) {
            state.items = [];
            state.pageCount = parseFloat(props.page_count) || 1;
          }

          if (typeof props.items === 'string' && props.items[0] === '[') {
            state.items = JSON.parse(props.items);
          } else if (Array.isArray(props.items)) {
            state.items = props.items;
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function PaginationProvider(_props) {
    var _this;

    _classCallCheck(this, PaginationProvider);

    _this = _super.call(this, _props);

    _this.setContent = function(newContent) {
      var content =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;
      var position =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : null;

      if (!Array.isArray(newContent) && content) {
        newContent = [newContent, content];
      }

      var pageNo = parseFloat(newContent[0]);
      newContent = newContent[1];

      if (typeof newContent === 'function') {
        content = newContent();
      } else if (React.isValidElement(newContent)) {
        content = newContent;
      }

      if (content) {
        var itemToPrepare = _this.state.items.find(function(_ref) {
          var p = _ref.pageNo;
          return p === pageNo;
        });

        var items = null;

        if (!itemToPrepare) {
          items = _this.prefillItems(pageNo, {
            position: position,
            skipObserver: true,
          });
          itemToPrepare = items.find(function(_ref2) {
            var p = _ref2.pageNo;
            return p === pageNo;
          });
        }

        if (itemToPrepare.content) {
          itemToPrepare.update(content);
        } else {
          itemToPrepare.insert(content);
        }

        _this.setState(
          {
            items: _toConsumableArray(items || _this.state.items),
            currentPage: pageNo,
            _listenForPropChanges: false,
          },
          _this.callOnPageUpdate
        );
      }
    };

    _this.resetContent = function() {
      var currentPage = _this.state.startupPage;
      clearTimeout(_this.resetTimeout);
      _this.resetTimeout = setTimeout(function() {
        _this.setState({
          items: [],
          currentPage: currentPage,
          _listenForPropChanges: false,
        });

        _this.startInfinity();
      }, 10);
    };

    _this.resetPagination = function() {
      var startupPage = _this.state.startupPage;
      var lowerPage = startupPage;
      var upperPage = startupPage;
      var currentPage = startupPage;
      clearTimeout(_this.resetTimeout);
      _this.resetTimeout = setTimeout(function() {
        _this.setState({
          lowerPage: lowerPage,
          upperPage: upperPage,
          currentPage: currentPage,
          _listenForPropChanges: false,
        });

        _this.startInfinity();
      }, 10);
    };

    _this.startInfinity = function() {
      _this._hasEndedInfinity = false;

      _this.setState({
        hasEndedInfinity: false,
        _listenForPropChanges: false,
      });
    };

    _this.endInfinity = function() {
      _this._hasEndedInfinity = true;

      _this.setState(
        {
          hasEndedInfinity: true,
          _listenForPropChanges: false,
        },
        function() {
          var pageNo = _this.state.currentPage + 1;
          dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_end',
            _extends(
              {
                page: pageNo,
                pageNo: pageNo,
              },
              _assertThisInitialized(_this)
            )
          );
        }
      );
    };

    _this.setItems = function(items, cb) {
      _this.setState(
        {
          items: items,
          _listenForPropChanges: false,
        },
        cb
      );
    };

    _this.prefillItems = function(pageNo) {
      var props =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : {};
      var items =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : _this.state.items;
      var position =
        props.position ||
        (pageNo < _this.state.currentPage ? 'before' : 'after');

      var obj = _extends(
        {
          pageNo: pageNo,
          position: position,
          skipObserver: false,
        },
        props
      );

      switch (position) {
        case 'before':
          return [new ContentObject(obj)].concat(
            _toConsumableArray(items)
          );

        case 'after':
          return [].concat(_toConsumableArray(items), [
            new ContentObject(obj),
          ]);
      }
    };

    _this.setStateHandler = function(state, cb) {
      _this.setState(
        _extends({}, state, {
          _listenForPropChanges: false,
        }),
        cb
      );
    };

    _this.callOnPageUpdate = function() {
      if (Array.isArray(_this._updateStack)) {
        _this._updateStack.forEach(function(cb) {
          if (typeof cb === 'function') {
            cb();
          }
        });

        _this._updateStack = [];
      }
    };

    _this.onPageUpdate = function(fn) {
      _this._updateStack = _this._updateStack || [];

      _this._updateStack.push(fn);
    };

    _this.state = {
      items: [],
      isLoading: false,
      _listenForPropChanges: true,
    };

    if (_props.rerender) {
      _this.rerender = function(_ref3) {
        var store = _ref3.current;

        if (store && store.pageNo > 0) {
          clearTimeout(_this.rerenderTimeout);
          _this.rerenderTimeout = setTimeout(function() {
            return _this.setContent(store.pageNo, store.content);
          }, 1);
        }
      };

      _props.rerender.current = _this.rerender;
    }

    return _this;
  }

  _createClass(PaginationProvider, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this$props = this.props,
          set_content_handler = _this$props.set_content_handler,
          reset_content_handler = _this$props.reset_content_handler,
          reset_pagination_handler = _this$props.reset_pagination_handler,
          end_infinity_handler = _this$props.end_infinity_handler;

        if (typeof set_content_handler === 'function') {
          set_content_handler(this.setContent);
        }

        if (typeof reset_content_handler === 'function') {
          reset_content_handler(this.resetContent);
        }

        if (typeof reset_pagination_handler === 'function') {
          reset_pagination_handler(this.resetPagination);
        }

        if (typeof end_infinity_handler === 'function') {
          end_infinity_handler(this.endInfinity);
        }

        if (this.props.store && this.props.store.current) {
          var store = this.props.store.current;
          this.setContent(store.pageNo, store.content);
        }

        this._isMounted = true;
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this.rerenderTimeout);
        clearTimeout(this.resetTimeout);
        clearTimeout(this.callOnPageUpdateTimeout);
        this._isMounted = false;
      },
    },
    {
      key: 'render',
      value: function render() {
        var children = this.props.children;

        if (this.props.useMarkerOnly) {
          clearTimeout(this.callOnPageUpdateTimeout);
          this.callOnPageUpdateTimeout = setTimeout(
            this.callOnPageUpdate,
            1
          );
        }

        return React.createElement(
          Context$1.Provider,
          {
            value: _extends({}, this.context, {
              pagination: _extends(
                {
                  setContent: this.setContent,
                  resetContent: this.resetContent,
                  resetPagination: this.resetPagination,
                  endInfinity: this.endInfinity,
                  setItems: this.setItems,
                  prefillItems: this.prefillItems,
                  setState: this.setStateHandler,
                  onPageUpdate: this.onPageUpdate,
                  _hasEndedInfinity: this._hasEndedInfinity,
                },
                this.props,
                {},
                this.state
              ),
            }),
          },
          children
        );
      },
    },
  ]);

  return PaginationProvider;
})(React.PureComponent);

PaginationProvider.defaultProps = defaultProps$y;
PaginationProvider.contextType = Context;

function _createSuper$D(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$E()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$E() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$z = {
  children: null,
};

var InfinityScroller = (function(_React$PureComponent) {
  _inherits(InfinityScroller, _React$PureComponent);

  var _super = _createSuper$D(InfinityScroller);

  function InfinityScroller(_props, context) {
    var _this;

    _classCallCheck(this, InfinityScroller);

    _this = _super.call(this, _props);

    _this.startup = function() {
      var _this$context$paginat = _this.context.pagination,
        startupPage = _this$context$paginat.startupPage,
        startup_count = _this$context$paginat.startup_count;
      var startupCount = parseFloat(startup_count);

      for (var i = 0, newPageNo; i < startupCount; ++i) {
        newPageNo = startupPage + i;

        _this.getNewContent(
          newPageNo,
          {
            position: 'after',
            skipObserver: newPageNo < startupCount,
          },
          {
            isStartup: i === 0,
          }
        );
      }
    };

    _this.getNewContent = function(newPageNo) {
      var props =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : {};

      var _ref =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : {},
        _ref$isStartup = _ref.isStartup,
        isStartup = _ref$isStartup === void 0 ? false : _ref$isStartup;

      var _this$context$paginat2 = _this.context.pagination,
        pageCount = _this$context$paginat2.pageCount,
        endInfinity = _this$context$paginat2.endInfinity;

      if (newPageNo > pageCount) {
        return endInfinity();
      }

      var exists =
        _this.context.pagination.items.findIndex(function(obj) {
          return obj.pageNo === newPageNo;
        }) > -1;

      if (exists) {
        return;
      }

      var items = _this.context.pagination.prefillItems(newPageNo, props);

      _this.context.pagination.setItems(items, function() {
        return _this.callEventHandler(newPageNo, {
          isStartup: isStartup,
        });
      });
    };

    _this.hideIndicator = isTrue(
      context.pagination.hide_progress_indicator
    );
    _this.useLoadButton = isTrue(context.pagination.use_load_button);
    _this.lastElement = React.createRef();
    return _this;
  }

  _createClass(InfinityScroller, [
    {
      key: 'waitForReachedTime',
      value: function waitForReachedTime(fn) {
        this.callbackBuffer = this.callbackBuffer || [];

        for (
          var _len = arguments.length,
            props = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          props[_key - 1] = arguments[_key];
        }

        this.callbackBuffer.push({
          fn: fn,
          props: props,
        });
        this.callBuffer();
      },
    },
    {
      key: 'callBuffer',
      value: function callBuffer() {
        var _this2 = this;

        var minTime = this.context.pagination.minTime;
        var diff =
          this._lastCall > 0 ? new Date().getTime() - this._lastCall : 0;
        var waitTime = diff < minTime ? minTime : 0;
        clearTimeout(this._bufferTimeout);
        this._bufferTimeout = setTimeout(function() {
          if (_this2.callbackBuffer.length > 0) {
            _this2._lastCall = new Date().getTime();

            var _this2$callbackBuffer = _this2.callbackBuffer.shift(),
              fn = _this2$callbackBuffer.fn,
              props = _this2$callbackBuffer.props;

            fn.apply(void 0, _toConsumableArray(props));

            _this2.callBuffer();
          }
        }, waitTime);
      },
    },
    {
      key: 'callEventHandler',
      value: function callEventHandler(pageNo) {
        var _this3 = this;

        var _ref2 =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {},
          _ref2$isStartup = _ref2.isStartup,
          isStartup = _ref2$isStartup === void 0 ? false : _ref2$isStartup,
          _ref2$callOnEnd = _ref2.callOnEnd,
          callOnEnd = _ref2$callOnEnd === void 0 ? false : _ref2$callOnEnd,
          _ref2$onDispatch = _ref2.onDispatch,
          onDispatch =
            _ref2$onDispatch === void 0 ? null : _ref2$onDispatch;

        this.waitForReachedTime(
          function(_ref3) {
            var pageNo = _ref3.pageNo,
              isStartup = _ref3.isStartup;
            var context = _this3.context.pagination;

            var createEvent = function createEvent(eventName) {
              dispatchCustomElementEvent(
                context,
                eventName,
                _extends(
                  {
                    page: pageNo,
                    pageNo: pageNo,
                  },
                  context
                )
              );

              if (typeof onDispatch === 'function') {
                onDispatch();
              }
            };

            if (callOnEnd) {
              createEvent('on_end');
            } else {
              if (isStartup) {
                createEvent('on_startup');
              } else {
                createEvent('on_change');
              }

              createEvent('on_load');
            }
          },
          {
            pageNo: pageNo,
            isStartup: isStartup,
          }
        );
      },
    },
    {
      key: 'handleInfinityMarker',
      value: function handleInfinityMarker() {
        var _this4 = this;

        var children = this.props.children;
        var _this$context$paginat3 = this.context.pagination,
          lowerPage = _this$context$paginat3.lowerPage,
          upperPage = _this$context$paginat3.upperPage,
          pageCount = _this$context$paginat3.pageCount,
          hasEndedInfinity = _this$context$paginat3.hasEndedInfinity,
          parallelLoadCount = _this$context$paginat3.parallelLoadCount,
          fallback_element = _this$context$paginat3.fallback_element,
          marker_element = _this$context$paginat3.marker_element,
          indicator_element = _this$context$paginat3.indicator_element;

        var Marker = function Marker() {
          return React.createElement(InteractionMarker, {
            pageNo: upperPage,
            markerElement: marker_element || fallback_element,
            onVisible: function onVisible(pageNo) {
              var _loop = function _loop(i, _newPageNo) {
                _newPageNo = pageNo + 1 + i;

                _this4.context.pagination.onPageUpdate(function() {
                  _this4.context.pagination.setState({
                    upperPage: _newPageNo,
                    skipObserver: i + 1 < parallelLoadCount,
                  });
                });

                _this4.callEventHandler(_newPageNo);

                newPageNo = _newPageNo;
              };

              for (var i = 0, newPageNo; i < parallelLoadCount; ++i) {
                _loop(i, newPageNo);
              }
            },
          });
        };

        var LoadButton = function LoadButton() {
          return React.createElement(InfinityLoadButton, {
            icon: 'arrow_up',
            element: fallback_element,
            pressed_element: React.createElement(PaginationIndicator, {
              indicator_element: indicator_element || fallback_element,
            }),
            on_click: function on_click() {
              var newPageNo = lowerPage - 1;

              _this4.context.pagination.onPageUpdate(function() {
                _this4.context.pagination.setState({
                  lowerPage: newPageNo,
                });
              });

              _this4.callEventHandler(newPageNo);
            },
          });
        };

        return React.createElement(
          React.Fragment,
          null,
          lowerPage > 1 && React.createElement(LoadButton, null),
          children,
          !hasEndedInfinity &&
            (typeof pageCount === 'undefined' || upperPage < pageCount) &&
            React.createElement(Marker, null),
          !hasEndedInfinity &&
            !this.hideIndicator &&
            (typeof pageCount === 'undefined' || upperPage < pageCount) &&
            React.createElement(PaginationIndicator, {
              indicator_element: indicator_element || fallback_element,
            })
        );
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this5 = this;

        var _this$context$paginat4 = this.context.pagination,
          items = _this$context$paginat4.items,
          pageCount = _this$context$paginat4.pageCount,
          startupPage = _this$context$paginat4.startupPage,
          hasEndedInfinity = _this$context$paginat4.hasEndedInfinity,
          parallelLoadCount = _this$context$paginat4.parallelLoadCount,
          placeMakerBeforeContent =
            _this$context$paginat4.placeMakerBeforeContent,
          page_element = _this$context$paginat4.page_element,
          fallback_element = _this$context$paginat4.fallback_element,
          marker_element = _this$context$paginat4.marker_element,
          indicator_element = _this$context$paginat4.indicator_element;

        if (this.context.pagination.useMarkerOnly) {
          return this.handleInfinityMarker();
        }

        if (!(items && items.length > 0)) {
          clearTimeout(this._startupTimeout);
          this._startupTimeout = setTimeout(this.startup, 1);
          return null;
        }

        var Element = preparePageElement(page_element || React.Fragment);
        return items.map(function(_ref4, idx) {
          var pageNo = _ref4.pageNo,
            hasContent = _ref4.hasContent,
            content = _ref4.content,
            ref = _ref4.ref,
            skipObserver = _ref4.skipObserver,
            ScrollElement = _ref4.ScrollElement;
          var isLastItem = idx === items.length - 1;
          var Elem = (hasContent && ScrollElement) || Element;
          var marker =
            hasContent &&
            !_this5.useLoadButton &&
            !skipObserver &&
            !hasEndedInfinity &&
            (typeof pageCount === 'undefined' || pageNo <= pageCount) &&
            React.createElement(InteractionMarker, {
              pageNo: pageNo,
              markerElement: marker_element || fallback_element,
              onVisible: function onVisible(pageNo) {
                for (var i = 0, _newPageNo2; i < parallelLoadCount; ++i) {
                  _newPageNo2 = pageNo + 1 + i;

                  _this5.getNewContent(_newPageNo2, {
                    position: 'after',
                    skipObserver: i + 1 < parallelLoadCount,
                  });
                }
              },
            });
          return React.createElement(
            Elem,
            {
              key: pageNo,
              ref: ref,
            },
            hasContent &&
              startupPage > 1 &&
              pageNo > 1 &&
              pageNo <= startupPage &&
              React.createElement(InfinityLoadButton, {
                element: fallback_element,
                icon: 'arrow_up',
                on_click: function on_click(event) {
                  return _this5.getNewContent(pageNo - 1, {
                    position: 'before',
                    skipObserver: true,
                    event: event,
                  });
                },
              }),
            placeMakerBeforeContent && marker,
            content,
            !placeMakerBeforeContent && marker,
            (parallelLoadCount > 1 && idx > 0 ? isLastItem : true) &&
              !hasContent &&
              !_this5.hideIndicator &&
              React.createElement(PaginationIndicator, {
                indicator_element: indicator_element || fallback_element,
              }),
            hasContent &&
              _this5.useLoadButton &&
              isLastItem &&
              (typeof pageCount === 'undefined' || pageNo < pageCount) &&
              React.createElement(InfinityLoadButton, {
                element: fallback_element,
                icon: 'arrow_down',
                on_click: function on_click(event) {
                  return _this5.getNewContent(pageNo + 1, {
                    position: 'after',
                    skipObserver: true,
                    ScrollElement: function ScrollElement(props) {
                      return (
                        hasContent &&
                        React.createElement(
                          ScrollToElement,
                          _extends(
                            {
                              page_element: page_element,
                            },
                            props
                          )
                        )
                      );
                    },
                    event: event,
                  });
                },
              })
          );
        });
      },
    },
  ]);

  return InfinityScroller;
})(React.PureComponent);

InfinityScroller.contextType = Context$1;
InfinityScroller.defaultProps = defaultProps$z;

var InteractionMarker = (function(_React$PureComponent2) {
  _inherits(InteractionMarker, _React$PureComponent2);

  var _super2 = _createSuper$D(InteractionMarker);

  function InteractionMarker(props) {
    var _this6;

    _classCallCheck(this, InteractionMarker);

    _this6 = _super2.call(this, props);
    _this6.state = {
      isConnected: false,
    };

    _this6.callReady = function() {
      var _this6$intersectionOb;

      (_this6$intersectionOb = _this6.intersectionObserver) === null ||
      _this6$intersectionOb === void 0
        ? void 0
        : _this6$intersectionOb.disconnect();
      _this6.intersectionObserver = null;
      _this6._readyTimeout = setTimeout(function() {
        if (_this6._isMounted) {
          _this6.setState({
            isConnected: true,
          });
        }

        _this6.props.onVisible(_this6.props.pageNo);
      }, 1);
    };

    if (typeof props.markerElement === 'function') {
      console.warn(
        'Pagination: Please use a string or React element e.g. marker_element="tr"'
      );
    }

    _this6._ref = React.createRef();

    if (typeof IntersectionObserver !== 'undefined') {
      _this6.intersectionObserver = new IntersectionObserver(function(
        entries
      ) {
        var _entries = _slicedToArray(entries, 1),
          isIntersecting = _entries[0].isIntersecting;

        if (isIntersecting) {
          _this6.callReady();
        }
      });
    } else {
      console.warn(
        'Pagination is missing IntersectionObserver supported!'
      );
    }

    return _this6;
  }

  _createClass(InteractionMarker, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this._ref.current) {
          var _this$intersectionObs;

          this._isMounted = true;
          (_this$intersectionObs = this.intersectionObserver) === null ||
          _this$intersectionObs === void 0
            ? void 0
            : _this$intersectionObs.observe(this._ref.current);
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        var _this$intersectionObs2;

        this._isMounted = false;
        clearTimeout(this._startupTimeout);
        clearTimeout(this._readyTimeout);
        clearTimeout(this._bufferTimeout);
        (_this$intersectionObs2 = this.intersectionObserver) === null ||
        _this$intersectionObs2 === void 0
          ? void 0
          : _this$intersectionObs2.disconnect();
      },
    },
    {
      key: 'render',
      value: function render() {
        var markerElement = this.props.markerElement;

        if (this.state.isConnected || !this.intersectionObserver) {
          return null;
        }

        var Element =
          markerElement && isTrElement(markerElement) ? 'tr' : 'div';
        var ElementChild =
          markerElement && isTrElement(markerElement) ? 'td' : 'div';
        return React.createElement(
          Element,
          {
            className: 'dnb-pagination__marker dnb-table--ignore',
          },
          React.createElement(ElementChild, {
            className: 'dnb-pagination__marker__inner',
            ref: this._ref,
          })
        );
      },
    },
  ]);

  return InteractionMarker;
})(React.PureComponent);

InteractionMarker.defaultProps = {
  markerElement: null,
};
var InfinityLoadButton = (function(_React$PureComponent3) {
  _inherits(InfinityLoadButton, _React$PureComponent3);

  var _super3 = _createSuper$D(InfinityLoadButton);

  function InfinityLoadButton() {
    var _this7;

    _classCallCheck(this, InfinityLoadButton);

    for (
      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2] = arguments[_key2];
    }

    _this7 = _super3.call.apply(_super3, [this].concat(args));
    _this7.state = {
      isPressed: false,
    };

    _this7.onClickHandler = function(e) {
      _this7.setState({
        isPressed: true,
      });

      if (typeof _this7.props.on_click === 'function') {
        _this7.props.on_click(e);
      }
    };

    return _this7;
  }

  _createClass(InfinityLoadButton, [
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          element = _this$props.element,
          icon = _this$props.icon;
        var Element = element;
        var ElementChild = isTrElement(Element) ? 'td' : 'div';
        return this.state.isPressed
          ? this.props.pressed_element
          : React.createElement(
              Element,
              null,
              React.createElement(
                ElementChild,
                {
                  className: 'dnb-pagination__loadbar',
                },
                React.createElement(Button, {
                  size: 'medium',
                  icon: icon,
                  icon_position: 'left',
                  text: this.context.translation.Pagination
                    .load_button_text,
                  variant: 'secondary',
                  on_click: this.onClickHandler,
                })
              )
            );
      },
    },
  ]);

  return InfinityLoadButton;
})(React.PureComponent);
InfinityLoadButton.contextType = Context;
InfinityLoadButton.defaultProps = {
  element: 'div',
  pressed_element: null,
  icon: 'arrow_down',
};

var ScrollToElement = (function(_React$PureComponent4) {
  _inherits(ScrollToElement, _React$PureComponent4);

  var _super4 = _createSuper$D(ScrollToElement);

  function ScrollToElement() {
    _classCallCheck(this, ScrollToElement);

    return _super4.apply(this, arguments);
  }

  _createClass(ScrollToElement, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var elem = ReactDOM.findDOMNode(this);
        this.scrollToPage(elem);
      },
    },
    {
      key: 'scrollToPage',
      value: function scrollToPage(element) {
        if (element && typeof element.scrollIntoView === 'function') {
          element.scrollIntoView({
            block: 'nearest',
            behavior: 'smooth',
          });
        }
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$props2 = this.props,
          page_element = _this$props2.page_element,
          props = _objectWithoutProperties(_this$props2, ['page_element']);

        var Element = preparePageElement(page_element || React.Fragment);
        return React.createElement(Element, props);
      },
    },
  ]);

  return ScrollToElement;
})(React.PureComponent);

ScrollToElement.defaultProps = {
  page_element: null,
};

var calculatePagination = function calculatePagination(
  page_count,
  current_page
) {
  if (page_count === 1) return [[1]];
  var start = Math.max.apply(Math, [
    1,
    current_page + 2 > page_count
      ? current_page -
        4 +
        (Math.min.apply(Math, [
          page_count,
          current_page - 2 < 1
            ? current_page + 4 - (current_page - 1)
            : current_page + 2,
        ]) -
          current_page)
      : current_page - 2,
  ]);
  var end = Math.min.apply(Math, [
    page_count,
    current_page - 2 < 1
      ? current_page + 4 - (current_page - start)
      : current_page + 2,
  ]);
  var middle = [];

  for (var i = start; i <= end; i++) {
    middle.push(i);
  }

  var pages = [];

  if (start > 2) {
    pages.push([1]);
  } else if (start === 2) {
    middle = [1].concat(middle);
  }

  pages.push(middle);

  if (end <= page_count - 2) {
    pages.push([page_count]);
  } else if (end === page_count - 1) {
    middle.push(page_count);
  }

  return pages;
};
var getDotsAriaLabel = function getDotsAriaLabel(_ref) {
  var more_pages = _ref.more_pages,
    list = _ref.list,
    pages = _ref.pages;
  var count = 0;

  try {
    if (list.length === 1) {
      count =
        list[0] -
        (pages.length === 2
          ? pages[0][pages[0].length - 1]
          : pages[1][pages[1].length - 1]);
    } else if (list.length > 1) {
      count = list[0] - pages[0] - 1;
    }
  } catch (e) {}

  return count > 0 ? more_pages.replace('%s', count) : null;
};

function _createSuper$E(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$F()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$F() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var defaultProps$A = {
  contentRef: null,
  children: null,
  button_title: null,
  prev_title: null,
  next_title: null,
  more_pages: null,
};

var _ref2$8 = React.createElement('div', {
  key: 'dot-1',
});

var _ref3$a = React.createElement('div', {
  key: 'dot-2',
});

var _ref4$6 = React.createElement('div', {
  key: 'dot-3',
});

var PaginationBar = (function(_React$PureComponent) {
  _inherits(PaginationBar, _React$PureComponent);

  var _super = _createSuper$E(PaginationBar);

  function PaginationBar() {
    var _this;

    _classCallCheck(this, PaginationBar);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.setPage = function(currentPage) {
      var event =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;

      _this.keepPageHeight();

      _this.focusPage();

      _this.context.pagination.setState({
        currentPage: currentPage,
      });

      _this.preparePageContent(currentPage);

      dispatchCustomElementEvent(
        _this.context.pagination,
        'on_change',
        _extends(
          {
            page: currentPage,
            pageNo: currentPage,
          },
          _this.context.pagination,
          {
            event: event,
          }
        )
      );
    };

    _this.setPrevPage = function() {
      _this.setPage(_this.context.pagination.currentPage - 1);
    };

    _this.setNextPage = function() {
      _this.setPage(_this.context.pagination.currentPage + 1);
    };

    _this.clickHandler = function(_ref) {
      var pageNo = _ref.pageNo,
        event = _ref.event;

      _this.setPage(pageNo, event);
    };

    return _this;
  }

  _createClass(PaginationBar, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        var pgn = this.context.pagination;
        var currentPage = pgn.startupPage || pgn.currentPage;
        pgn.setState(
          {
            currentPage: currentPage,
          },
          function() {
            return _this2.preparePageContent(currentPage);
          }
        );
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this.prepareTimeout);
      },
    },
    {
      key: 'hasChildrenCallabck',
      value: function hasChildrenCallabck() {
        return typeof this.props.children === 'function';
      },
    },
    {
      key: 'preparePageContent',
      value: function preparePageContent(pageNo) {
        var _this3 = this;

        var items = this.context.pagination.prefillItems(
          this.context.pagination.currentPage,
          {
            skipObserver: true,
          }
        );
        this.context.pagination.setState({
          items: items,
        });

        if (this.hasChildrenCallabck()) {
          var potentialElement = this.props.children(
            _extends(
              {
                pageNo: pageNo,
                page: pageNo,
              },
              this.context.pagination
            )
          );

          if (
            potentialElement &&
            (React.isValidElement(potentialElement) ||
              typeof potentialElement === 'function')
          ) {
            clearTimeout(this.prepareTimeout);
            this.prepareTimeout = setTimeout(function() {
              return _this3.context.pagination.setContent([
                pageNo,
                potentialElement,
              ]);
            }, 1);
          }
        }
      },
    },
    {
      key: 'focusPage',
      value: function focusPage() {
        var _this4 = this;

        this.context.pagination.onPageUpdate(function() {
          try {
            var elem = _this4.props.contentRef.current;
            elem.focus();
          } catch (e) {}
        });
      },
    },
    {
      key: 'keepPageHeight',
      value: function keepPageHeight() {
        var _this5 = this;

        try {
          var elem = this.props.contentRef.current;
          var pageHeight = elem.offsetHeight;
          elem.style.height = ''.concat(pageHeight / 16, 'rem');
          elem.style.minHeight = elem.style.height;
        } catch (e) {}

        this.context.pagination.onPageUpdate(function() {
          try {
            var _elem = _this5.props.contentRef.current;
            _elem.style.height = 'auto';
            _elem.style.minHeight = _elem.style.height;
          } catch (e) {}
        });
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this6 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$A,
          this.context.translation.Pagination
        );
        var button_title = props.button_title,
          prev_title = props.prev_title,
          next_title = props.next_title,
          more_pages = props.more_pages;
        var _this$context$paginat = this.context.pagination,
          pageCount = _this$context$paginat.pageCount,
          currentPage = _this$context$paginat.currentPage;
        var prevIsDisabled = currentPage === 1;
        var nextIsDisabled = currentPage === pageCount || pageCount === 0;
        var pages = calculatePagination(pageCount, currentPage);
        return React.createElement(
          'div',
          {
            className:
              'dnb-pagination__bar' +
              (pageCount >= 8 ? ' dnb-pagination--many-pages' : ''),
          },
          React.createElement(Button, {
            key: 'left-arrow',
            className: 'dnb-pagination__button',
            disabled: prevIsDisabled,
            size: 'small',
            icon: 'chevron_left',
            on_click: this.setPrevPage,
            title: prevIsDisabled ? null : prev_title,
          }),
          React.createElement(
            'div',
            {
              className: 'dnb-pagination__bar__inner',
            },
            pages[0].map(function(pageNo) {
              return React.createElement(Button, {
                key: pageNo,
                className: 'dnb-pagination__button',
                size: 'medium',
                text: String(pageNo),
                'aria-label': button_title.replace('%s', pageNo),
                variant: pageNo === currentPage ? 'primary' : 'secondary',
                'aria-current': pageNo === currentPage ? 'page' : null,
                on_click: function on_click(event) {
                  return _this6.clickHandler({
                    pageNo: pageNo,
                    event: event,
                  });
                },
              });
            }),
            pages.slice(1).map(function(list, idx) {
              return React.createElement(
                React.Fragment,
                {
                  key: idx,
                },
                React.createElement(
                  'div',
                  {
                    key: 'dots-'.concat(idx),
                    className: 'dnb-pagination__dots',
                    'aria-label': getDotsAriaLabel({
                      more_pages: more_pages,
                      list: list,
                      pages: pages,
                    }),
                  },
                  _ref2$8,
                  _ref3$a,
                  _ref4$6
                ),
                list.map(function(pageNo) {
                  return React.createElement(Button, {
                    key: pageNo,
                    className: 'dnb-pagination__button',
                    size: 'medium',
                    text: String(pageNo),
                    'aria-label': button_title.replace('%s', pageNo),
                    variant:
                      pageNo === currentPage ? 'primary' : 'secondary',
                    'aria-current': pageNo === currentPage ? 'page' : null,
                    on_click: function on_click(event) {
                      return _this6.clickHandler({
                        pageNo: pageNo,
                        event: event,
                      });
                    },
                  });
                })
              );
            })
          ),
          React.createElement(Button, {
            key: 'right-arrow',
            className: 'dnb-pagination__button',
            disabled: nextIsDisabled,
            size: 'small',
            icon: 'chevron_right',
            on_click: this.setNextPage,
            title: nextIsDisabled ? null : next_title,
          })
        );
      },
    },
  ]);

  return PaginationBar;
})(React.PureComponent);

PaginationBar.contextType = Context$1;
PaginationBar.defaultProps = defaultProps$A;

function _createSuper$F(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$G()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$G() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$p = {
  on_change: null,
  on_startup: null,
  on_load: null,
};

var defaultProps$B = _extends(
  {
    startup_page: null,
    current_page: null,
    page_count: null,
    mode: 'pagination',
    use_load_button: false,
    items: null,
    hide_progress_indicator: false,
    set_content_handler: null,
    reset_content_handler: null,
    page_element: undefined,
    fallback_element: undefined,
    marker_element: undefined,
    indicator_element: undefined,
    align: 'left',
    startup_count: 1,
    parallel_load_count: 1,
    place_maker_before_content: false,
    min_wait_time: 400,
    class: null,
    className: null,
    children: null,
  },
  renderProps$p
);

var Pagination = (function(_React$PureComponent) {
  _inherits(Pagination, _React$PureComponent);

  var _super = _createSuper$F(Pagination);

  function Pagination() {
    _classCallCheck(this, Pagination);

    return _super.apply(this, arguments);
  }

  _createClass(
    Pagination,
    [
      {
        key: 'render',
        value: function render() {
          return React.createElement(
            PaginationProvider,
            _extends(
              {
                tagName: Pagination.tagName,
              },
              this.props
            ),
            React.createElement(PaginationInstance, this.props)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(Pagination.tagName, Pagination, defaultProps$B);
        },
      },
    ]
  );

  return Pagination;
})(React.PureComponent);

Pagination.tagName = 'dnb-pagination';
Pagination.defaultProps = defaultProps$B;
Pagination.renderProps = renderProps$p;

var _ref2$9 = React.createElement(InfinityScroller, null);

var PaginationInstance = (function(_React$PureComponent2) {
  _inherits(PaginationInstance, _React$PureComponent2);

  var _super2 = _createSuper$F(PaginationInstance);

  function PaginationInstance(props) {
    var _this;

    _classCallCheck(this, PaginationInstance);

    _this = _super2.call(this, props);
    _this._contentRef = React.createRef();
    return _this;
  }

  _createClass(PaginationInstance, [
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$B,
          this.context.formRow,
          this.context.translation.Pagination
        );

        var align = props.align,
          children = props.children,
          className = props.className,
          _className = props.class,
          _tagName = props.tagName,
          _page_count = props.page_count,
          _current_page = props.current_page,
          _startup_page = props.startup_page,
          _mode = props.mode,
          _hide_progress_indicator = props.hide_progress_indicator,
          _use_load_button = props.use_load_button,
          attributes = _objectWithoutProperties(props, [
            'align',
            'children',
            'className',
            'class',
            'tagName',
            'page_count',
            'current_page',
            'startup_page',
            'mode',
            'hide_progress_indicator',
            'use_load_button',
          ]);

        var _this$context$paginat = this.context.pagination,
          currentPage = _this$context$paginat.currentPage,
          items = _this$context$paginat.items,
          fallback_element = _this$context$paginat.fallback_element,
          indicator_element = _this$context$paginat.indicator_element;

        if (this.context.pagination.mode === 'pagination') {
          var _items$find;

          var mainParams = _extends(
            {
              className: classnames(
                'dnb-pagination',
                createSpacingClasses(props),
                className,
                _className,
                align && 'dnb-pagination--'.concat(align)
              ),
            },
            attributes
          );

          validateDOMAttributes(props, mainParams);
          var content =
            (_items$find = items.find(function(_ref) {
              var pageNo = _ref.pageNo;
              return pageNo === currentPage;
            })) === null || _items$find === void 0
              ? void 0
              : _items$find.content;
          return React.createElement(
            React.Fragment,
            null,
            typeof children !== 'function' && children,
            React.createElement(
              'div',
              mainParams,
              React.createElement(
                PaginationBar,
                {
                  contentRef: this._contentRef,
                },
                children
              ),
              items.length > 0 &&
                React.createElement(
                  PaginationContent,
                  {
                    ref: this._contentRef,
                  },
                  content ||
                    React.createElement(PaginationIndicator, {
                      indicator_element:
                        indicator_element || fallback_element,
                    })
                )
            )
          );
        }

        return _ref2$9;
      },
    },
  ]);

  return PaginationInstance;
})(React.PureComponent);

PaginationInstance.defaultProps = defaultProps$B;
PaginationInstance.contextType = Context$1;
var InfinityMarker = (function(_React$PureComponent3) {
  _inherits(InfinityMarker, _React$PureComponent3);

  var _super3 = _createSuper$F(InfinityMarker);

  function InfinityMarker() {
    _classCallCheck(this, InfinityMarker);

    return _super3.apply(this, arguments);
  }

  _createClass(
    InfinityMarker,
    [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            children = _this$props.children,
            props = _objectWithoutProperties(_this$props, ['children']);

          return React.createElement(
            PaginationProvider,
            _extends(
              {
                useMarkerOnly: true,
                tagName: InfinityMarker.tagName,
              },
              props
            ),
            React.createElement(InfinityScroller, props, children)
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(
            InfinityMarker.tagName,
            InfinityMarker,
            defaultProps$B
          );
        },
      },
    ]
  );

  return InfinityMarker;
})(React.PureComponent);
InfinityMarker.tagName = 'dnb-infinity-marker';
InfinityMarker.defaultProps = defaultProps$B;
InfinityMarker.renderProps = renderProps$p;
var PaginationContent = React.forwardRef(function(_ref3, ref) {
  var children = _ref3.children,
    props = _objectWithoutProperties(_ref3, ['children']);

  return React.createElement(
    'div',
    _extends(
      {
        className: 'dnb-pagination__content dnb-no-focus',
        tabIndex: '-1',
      },
      props,
      {
        ref: ref,
      }
    ),
    children
  );
});
Pagination.Bar = PaginationBar;
Pagination.Content = PaginationContent;

function _createSuper$G(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$H()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$H() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$q = {
  on_init: null,
  on_change: null,
  on_drag_start: null,
  on_drag_end: null,
  on_state_update: null,
};

var defaultProps$C = _extends(
  {
    id: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    thump_title: null,
    add_title: '+',
    subtract_title: '−',
    min: 0,
    max: 100,
    value: -1,
    step: null,
    vertical: false,
    reverse: false,
    disabled: false,
    hide_buttons: false,
    use_scrollwheel: false,
    class: null,
    className: null,
    children: null,
  },
  renderProps$q
);

var _ref$a = React.createElement(AlignmentHelper, null);

var _ref2$a = React.createElement('span', {
  className: 'dnb-slider__line dnb-slider__line__after',
});

var Slider = (function(_React$PureComponent) {
  _inherits(Slider, _React$PureComponent);

  var _super = _createSuper$G(Slider);

  _createClass(Slider, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Slider.tagName, Slider, defaultProps$C);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (state.reverse !== props.reverse) {
            state.reverse = isTrue(props.reverse);

            if (isTrue(props.vertical)) {
              state.reverse = !state.reverse;
            }
          }

          if (state.vertical !== props.vertical) {
            state.vertical = isTrue(props.vertical);
          }

          if (state.disabled !== props.disabled) {
            state.disabled = isTrue(props.disabled);
          }

          if (state.min !== props.min) {
            state.min = parseFloat(props.min);
          }

          if (state.max !== props.max) {
            state.max = parseFloat(props.max);
          }

          if (props.value !== -1 && state.value !== props.value) {
            var value = Slider.getValue(props);

            if (value >= -1) {
              state.value = value;

              if (typeof props.on_state_update === 'function') {
                dispatchCustomElementEvent(
                  _extends({}, props),
                  'on_state_update',
                  {
                    value: value,
                  }
                );
              }
            }
          }
        }

        if (state.disabled) {
          return {
            currentState: 'disabled',
          };
        } else if (state.currentState === 'disabled') {
          return {
            currentState: 'normal',
          };
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
    {
      key: 'getValue',
      value: function getValue(props) {
        if (props.value >= -1) {
          return props.value;
        }

        return processChildren(props);
      },
    },
  ]);

  function Slider(props) {
    var _this;

    _classCallCheck(this, Slider);

    _this = _super.call(this, props);
    _this.state = {
      currentState: 'initial',
      value: null,
    };

    _this.onKeyDownHandler = function(event) {
      var _this$state = _this.state,
        min = _this$state.min,
        max = _this$state.max,
        reverse = _this$state.reverse,
        vertical = _this$state.vertical,
        currentValue = _this$state.value;
      var isReverse = vertical ? !reverse : reverse;
      var onePercent = Math.abs((max - min) / 100);
      var step = _this.props.step || onePercent;
      var value = -1;

      switch (keycode(event)) {
        case 'home':
          value = isReverse ? max : min;
          break;

        case 'end':
          value = isReverse ? min : max;
          break;

        case 'page up':
          value = isReverse
            ? currentValue - onePercent
            : currentValue + onePercent * 10;
          break;

        case 'page down':
          value = isReverse
            ? currentValue + onePercent
            : currentValue - onePercent * 10;
          break;

        case 'numpad +':
        case 'right':
        case 'up':
          value = isReverse ? currentValue - step : currentValue + step;
          break;

        case 'numpad -':
        case 'left':
        case 'down':
          value = isReverse ? currentValue + step : currentValue - step;
          break;
      }

      if (value !== -1) {
        event.preventDefault();
        value = clamp(value, min, max);

        _this.emitChange(event, value);
      }
    };

    _this.onFocusHandler = function() {
      _this.setState({
        _listenForPropChanges: false,
        currentState: 'focused',
      });
    };

    _this.onBlurHandler = function() {
      _this.setState({
        _listenForPropChanges: false,
        currentState: 'normal',
      });
    };

    _this.onClickHandler = function(event) {
      var _this$state2 = _this.state,
        min = _this$state2.min,
        max = _this$state2.max,
        reverse = _this$state2.reverse,
        vertical = _this$state2.vertical;
      var percent = calculatePercent(
        _this._trackRef.current,
        event,
        vertical,
        reverse
      );
      var value = percentToValue(percent, min, max);

      _this.emitChange(event, value, function() {
        return _this.setToResetState();
      });
    };

    _this.onSubtractClickHandler = function(event) {
      var step = _this.props.step;
      var _this$state3 = _this.state,
        min = _this$state3.min,
        max = _this$state3.max,
        value = _this$state3.value;

      _this.emitChange(event, clamp(value - (step || 1), min, max));
    };

    _this.onAddClickHandler = function(event) {
      var step = _this.props.step;
      var _this$state4 = _this.state,
        min = _this$state4.min,
        max = _this$state4.max,
        value = _this$state4.value;

      _this.emitChange(event, clamp(value + (step || 1), min, max));
    };

    _this.onMouseDownHandler = function(event) {
      if (typeof document !== 'undefined') {
        try {
          document.body.addEventListener(
            'touchmove',
            _this.onTouchMoveHandler
          );
          document.body.addEventListener(
            'touchend',
            _this.onTouchEndHandler
          );
          document.body.addEventListener(
            'mousemove',
            _this.onMouseMoveHandler
          );
          document.body.addEventListener(
            'mouseup',
            _this.onMouseUpHandler
          );
        } catch (e) {
          console.warn(e);
        }
      }

      _this.setState({
        _listenForPropChanges: false,
        currentState: 'activated',
      });

      if (typeof _this.props.on_drag_start === 'function') {
        dispatchCustomElementEvent(
          _assertThisInitialized(_this),
          'on_drag_start',
          {
            event: event,
          }
        );
      }
    };

    _this.onTouchEndHandler = function(event) {
      return _this.onMouseUpHandler(event);
    };

    _this.onMouseUpHandler = function(event) {
      if (typeof document !== 'undefined') {
        try {
          document.body.removeEventListener(
            'touchmove',
            _this.onTouchMoveHandler
          );
          document.body.removeEventListener(
            'touchend',
            _this.onTouchEndHandler
          );
          document.body.removeEventListener(
            'mousemove',
            _this.onMouseMoveHandler
          );
          document.body.removeEventListener(
            'mouseup',
            _this.onMouseUpHandler
          );
        } catch (e) {
          console.warn(e);
        }
      }

      _this.setState({
        _listenForPropChanges: false,
        currentState: 'normal',
      });

      if (typeof _this.props.on_drag_end === 'function') {
        dispatchCustomElementEvent(
          _assertThisInitialized(_this),
          'on_drag_end',
          {
            event: event,
          }
        );
      }
    };

    _this.onRangeChangeHandler = function(event) {
      var value = event.currentTarget.value;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
      });
    };

    _this.onTouchMoveHandler = function(event) {
      return _this.onMouseMoveHandler(event);
    };

    _this.onMouseMoveHandler = function(event) {
      var elem = _this._trackRef.current;

      if (
        event &&
        event.detail &&
        typeof event.detail.height !== 'undefined'
      ) {
        elem = createMockDiv(event.detail);
        event = event.detail;
      }

      var _this$state5 = _this.state,
        min = _this$state5.min,
        max = _this$state5.max,
        vertical = _this$state5.vertical,
        reverse = _this$state5.reverse;
      var percent = calculatePercent(elem, event, vertical, reverse);
      var value = percentToValue(percent, min, max);

      _this.emitChange(event, value);
    };

    _this.resetStateTimeoutId = -1;
    _this._id = props.id || makeUniqueId();
    _this._trackRef = React.createRef();
    _this.state = {
      _listenForPropChanges: true,
      value: Slider.getValue(props),
    };
    return _this;
  }

  _createClass(Slider, [
    {
      key: 'roundValue',
      value: function roundValue(value) {
        var step = this.props.step;
        return parseFloat(step) > 0
          ? roundToStep(value, step)
          : parseFloat(value).toFixed(3);
      },
    },
    {
      key: 'emitChange',
      value: function emitChange(event, rawValue, callback) {
        var _this$state6 = this.state,
          previousValue = _this$state6.value,
          disabled = _this$state6.disabled;

        if (disabled) {
          return;
        }

        var value = this.roundValue(rawValue);

        if (value > -1) {
          if (
            typeof this.props.on_change === 'function' &&
            value !== this.roundValue(previousValue)
          ) {
            dispatchCustomElementEvent(this, 'on_change', {
              value: value,
              raw_value: rawValue,
              event: event,
            });

            if (typeof callback === 'function') {
              callback();
            }
          }

          this.setState({
            value: rawValue,
            _listenForPropChanges: false,
          });
        }
      },
    },
    {
      key: 'setToResetState',
      value: function setToResetState() {
        var _this2 = this;

        this.setState(
          {
            _listenForPropChanges: false,
            currentState: 'jumped',
          },
          function() {
            clearTimeout(_this2.resetStateTimeoutId);
            _this2.resetStateTimeoutId = setTimeout(function() {
              return _this2.setState({
                _listenForPropChanges: false,
                currentState: 'normal',
              });
            }, 100);
          }
        );
      },
    },
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this3 = this;

        if (this._trackRef.current) {
          if (isTrue(this.props.use_scrollwheel)) {
            var _this$state7 = this.state,
              min = _this$state7.min,
              max = _this$state7.max,
              reverse = _this$state7.reverse,
              vertical = _this$state7.vertical;

            this._trackRef.current.addEventListener('wheel', function(
              event
            ) {
              event.preventDefault();

              _this3.emitChange(
                event,
                clamp(
                  _this3.state.value +
                    ((!vertical && reverse) || (vertical && !reverse)
                      ? -event.deltaY / 10
                      : event.deltaY / 10),
                  min,
                  max
                )
              );
            });
          }
        }

        if (typeof this.props.on_init === 'function') {
          var value = this.state.value;
          dispatchCustomElementEvent(this, 'on_init', {
            value: value,
          });
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (typeof document !== 'undefined') {
          try {
            document.body.removeEventListener(
              'touchmove',
              this.onTouchMoveHandler
            );
            document.body.removeEventListener(
              'touchend',
              this.onTouchEndHandler
            );
            document.body.removeEventListener(
              'mousemove',
              this.onMouseMoveHandler
            );
            document.body.removeEventListener(
              'mouseup',
              this.onMouseUpHandler
            );
          } catch (e) {
            console.warn(e);
          }
        }

        clearTimeout(this.resetStateTimeoutId);
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$state8 = this.state,
          currentState = _this$state8.currentState,
          value = _this$state8.value;
        var props = extendPropsWithContext(
          this.props,
          defaultProps$C,
          this.context.formRow,
          this.context.translation.Slider
        );

        var label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          title = props.thump_title,
          subtract_title = props.subtract_title,
          add_title = props.add_title,
          hide_buttons = props.hide_buttons,
          className = props.className,
          _className = props.class,
          _max = props.max,
          _min = props.min,
          _disabled = props.disabled,
          _reverse = props.reverse,
          _vertical = props.vertical,
          _id = props.id,
          _step = props.step,
          _value = props.value,
          _children = props.children,
          _use_scrollwheel = props.use_scrollwheel,
          attributes = _objectWithoutProperties(props, [
            'label',
            'label_direction',
            'label_sr_only',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'thump_title',
            'subtract_title',
            'add_title',
            'hide_buttons',
            'className',
            'class',
            'max',
            'min',
            'disabled',
            'reverse',
            'vertical',
            'id',
            'step',
            'value',
            'children',
            'use_scrollwheel',
          ]);

        var _this$state9 = this.state,
          min = _this$state9.min,
          max = _this$state9.max,
          reverse = _this$state9.reverse,
          vertical = _this$state9.vertical,
          disabled = _this$state9.disabled;
        var showStatus = status && status !== 'error';
        var showButtons = !isTrue(hide_buttons);
        var id = this._id;
        var mainParams = {
          className: classnames(
            'dnb-slider dnb-form-component',
            createSpacingClasses(props),
            className,
            _className,
            reverse && 'dnb-slider--reverse',
            vertical && 'dnb-slider--vertical',
            label &&
              label_direction &&
              'dnb-slider__label--'.concat(label_direction),
            showStatus && 'dnb-slider__form-status',
            status && 'dnb-slider__status--'.concat(status_state)
          ),
        };
        var percent = clamp(((value - min) * 100) / (max - min));

        var inlineStyleBefore = _defineProperty(
          {},
          vertical ? 'height' : 'width',
          ''.concat(percent, '%')
        );

        var inlineThumbStyles = _defineProperty(
          {},
          vertical ? 'top' : 'left',
          ''.concat(percent, '%')
        );

        var trackParams = {
          className:
            'dnb-slider__track' +
            (currentState
              ? ' dnb-slider__state--'.concat(currentState)
              : ''),
          onTouchStart: this.onClickHandler,
          onTouchStartCapture: this.onMouseDownHandler,
          onMouseDown: this.onClickHandler,
          onMouseDownCapture: this.onMouseDownHandler,
        };

        var rangeParams = _extends(
          {
            title: title,
            disabled: disabled,
          },
          attributes,
          {
            onBlur: this.onBlurHandler,
            onKeyDown: this.onKeyDownHandler,
            onFocus: this.onFocusHandler,
          }
        );

        if (label) {
          rangeParams['aria-labelledby'] = id + '-label';

          if (isTouchDevice()) {
            trackParams['aria-labelledby'] = id + '-label';
          }
        }

        if (showStatus || suffix) {
          rangeParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');

          if (isTouchDevice()) {
            trackParams['aria-describedby'] = ''
              .concat(showStatus ? id + '-status' : '', ' ')
              .concat(suffix ? id + '-suffix' : '');
          }
        }

        if (isTouchDevice()) {
          trackParams.role = 'slider';
          trackParams['aria-valuenow'] = this.roundValue(value);
          trackParams['aria-valuemin'] = min;
          trackParams['aria-valuemax'] = max;
          trackParams['aria-orientation'] = vertical
            ? 'vertical'
            : 'horizontal';
        }

        var buttonParams = {
          disabled: disabled,
        };
        validateDOMAttributes(this.props, trackParams);
        validateDOMAttributes(null, rangeParams);
        validateDOMAttributes(null, buttonParams);
        var subtractButton = React.createElement(
          Button,
          _extends(
            {
              className: 'dnb-slider__button dnb-slider__button--subtract',
              variant: 'secondary',
              icon: 'subtract',
              'aria-label': subtract_title,
              on_click: this.onSubtractClickHandler,
            },
            buttonParams
          )
        );
        var addButton = React.createElement(
          Button,
          _extends(
            {
              className: 'dnb-slider__button dnb-slider__button--add',
              variant: 'secondary',
              icon: 'add',
              'aria-label': add_title,
              on_click: this.onAddClickHandler,
            },
            buttonParams
          )
        );
        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              text: label,
              disabled: disabled,
              label_direction: label_direction,
              sr_only: label_sr_only,
            }),
          React.createElement(
            'span',
            {
              className: 'dnb-slider__wrapper',
            },
            _ref$a,
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text_id: id + '-status',
                text: status,
                status: status_state,
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-slider__inner',
              },
              showButtons && (reverse ? addButton : subtractButton),
              React.createElement(
                'span',
                _extends(
                  {
                    id: this._id,
                    ref: this._trackRef,
                  },
                  trackParams
                ),
                React.createElement(
                  'span',
                  {
                    className: 'dnb-slider__thumb',
                    style: inlineThumbStyles,
                  },
                  !isTouchDevice() &&
                    React.createElement(
                      'input',
                      _extends(
                        {
                          type: 'range',
                          className: 'dnb-slider__button-helper',
                          min: min,
                          max: max,
                          step: _step,
                          value: value,
                          orientation: vertical
                            ? 'vertical'
                            : 'horizontal',
                        },
                        rangeParams,
                        {
                          onChange: this.onRangeChangeHandler,
                        }
                      )
                    ),
                  React.createElement(
                    Button,
                    _extends(
                      {
                        variant: 'secondary',
                        tabIndex: '-1',
                        onMouseDown: this.onMouseDownHandler,
                      },
                      isTouchDevice()
                        ? rangeParams
                        : {
                            'aria-hidden': true,
                          }
                    )
                  )
                ),
                React.createElement('span', {
                  className: 'dnb-slider__line dnb-slider__line__before',
                  style: inlineStyleBefore,
                }),
                _ref2$a
              ),
              showButtons && (reverse ? subtractButton : addButton),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-slider__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          )
        );
      },
    },
  ]);

  return Slider;
})(React.PureComponent);

Slider.tagName = 'dnb-slider';
Slider.defaultProps = defaultProps$C;
Slider.renderProps = renderProps$q;
Slider.contextType = Context;

var percentToValue = function percentToValue(percent, min, max) {
  return ((max - min) * percent) / 100 + min;
};

var roundToStep = function roundToStep(number, step) {
  return Math.round(number / step) * step;
};

var getOffset = function getOffset(node) {
  var _global = global$1,
    pageYOffset = _global.pageYOffset,
    pageXOffset = _global.pageXOffset;

  var _node$getBoundingClie = node.getBoundingClientRect(),
    left = _node$getBoundingClie.left,
    top = _node$getBoundingClie.top;

  return {
    top: top + pageYOffset,
    left: left + pageXOffset,
  };
};

var getMousePosition = function getMousePosition(event) {
  if (event.changedTouches && event.changedTouches[0]) {
    return {
      x: event.changedTouches[0].pageX,
      y: event.changedTouches[0].pageY,
    };
  }

  return {
    x: event.pageX,
    y: event.pageY,
  };
};

var calculatePercent = function calculatePercent(
  node,
  event,
  isVertical,
  isReverted
) {
  var _node$getBoundingClie2 = node.getBoundingClientRect(),
    width = _node$getBoundingClie2.width,
    height = _node$getBoundingClie2.height;

  var _getOffset = getOffset(node),
    top = _getOffset.top,
    left = _getOffset.left;

  var _getMousePosition = getMousePosition(event),
    x = _getMousePosition.x,
    y = _getMousePosition.y;

  var value = isVertical ? y - top : x - left;
  var onePercent = (isVertical ? height : width) / 100;
  return isReverted
    ? 100 - clamp(value / onePercent)
    : clamp(value / onePercent);
};

var clamp = function clamp(value) {
  var min =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max =
    arguments.length > 2 && arguments[2] !== undefined
      ? arguments[2]
      : 100;
  return Math.min(Math.max(value, min), max);
};

var createMockDiv = function createMockDiv(_ref3) {
  var width = _ref3.width,
    height = _ref3.height;
  var div = document.createElement('div');

  _extends(div.style, {
    width: ''.concat(width, 'px'),
    height: ''.concat(height, 'px'),
  });

  div.getBoundingClientRect = function() {
    return {
      width: width,
      height: height,
      top: 0,
      left: 0,
      right: width,
      bottom: height,
    };
  };

  return div;
};

function _createSuper$H(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$I()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$I() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$r = {
  render_content: null,
};

var defaultProps$D = _extends(
  {
    id: null,
    element: 'div',
    inline: null,
    collapse: null,
    top: null,
    right: null,
    bottom: null,
    left: null,
    class: null,
    className: null,
    children: null,
  },
  renderProps$r
);

var Space = (function(_React$PureComponent) {
  _inherits(Space, _React$PureComponent);

  var _super = _createSuper$H(Space);

  function Space() {
    _classCallCheck(this, Space);

    return _super.apply(this, arguments);
  }

  _createClass(
    Space,
    [
      {
        key: 'render',
        value: function render() {
          var props = this.context.space
            ? extendPropsWithContext(
                this.props,
                defaultProps$D,
                this.context.space
              )
            : this.props;

          var element = props.element,
            inline = props.inline,
            collapse = props.collapse,
            top = props.top,
            right = props.right,
            bottom = props.bottom,
            left = props.left,
            _id = props.id,
            className = props.className,
            _className = props.class,
            attributes = _objectWithoutProperties(props, [
              'element',
              'inline',
              'collapse',
              'top',
              'right',
              'bottom',
              'left',
              'id',
              'className',
              'class',
            ]);

          var children = Space.getContent(this.props);

          var params = _extends(
            {
              className: classnames(
                'dnb-space',
                createSpacingClasses({
                  top: top,
                  right: right,
                  bottom: bottom,
                  left: left,
                }),
                className,
                _className,
                isTrue(inline) && 'dnb-space--inline'
              ),
            },
            attributes
          );

          validateDOMAttributes(this.props, params);
          return React.createElement(
            Element$5,
            _extends(
              {
                element: element,
                collapse: collapse,
              },
              params
            ),
            children
          );
        },
      },
    ],
    [
      {
        key: 'enableWebComponent',
        value: function enableWebComponent() {
          registerElement(Space.tagName, Space, defaultProps$D);
        },
      },
      {
        key: 'getContent',
        value: function getContent(props) {
          if (typeof props.render_content === 'function')
            props.render_content(props);
          return typeof props.children === 'function'
            ? props.children(props)
            : props.children;
        },
      },
    ]
  );

  return Space;
})(React.PureComponent);

Space.tagName = 'dnb-space';
Space.defaultProps = defaultProps$D;
Space.contextType = Context;

var Element$5 = function Element(_ref) {
  var E = _ref.element,
    collapse = _ref.collapse,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, [
      'element',
      'collapse',
      'children',
    ]);

  return collapse === false || collapse === 'false'
    ? React.createElement(
        E,
        {
          className: 'dnb-space--no-collapse',
        },
        React.createElement(E, props, children)
      )
    : React.createElement(E, props, children);
};
Element$5.defaultProps = {
  children: null,
  element: 'div',
  collapse: true,
};

function _createSuper$I(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$J()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$J() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var isMac$2 = null;

var StepItem = (function(_React$PureComponent) {
  _inherits(StepItem, _React$PureComponent);

  var _super = _createSuper$I(StepItem);

  function StepItem(props) {
    var _this;

    _classCallCheck(this, StepItem);

    _this = _super.call(this, props);

    _this.onClickHandler = function(_ref) {
      var event = _ref.event,
        item = _ref.item,
        currentItem = _ref.currentItem;
      var _this$props = _this.props,
        use_navigation = _this$props.use_navigation,
        on_click = _this$props.on_click,
        setActimeItem = _this$props.setActimeItem;
      var params = {
        event: event,
        item: item,
        currentItem: currentItem,
      };

      if (isTrue(use_navigation) && typeof setActimeItem === 'function') {
        setActimeItem(currentItem);
      }

      var res = dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_click',
        params
      );

      if (typeof on_click === 'function' && res === false) {
        return;
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        params
      );

      if (_this._ref.current) {
        _this._ref.current.blur();
      }
    };

    _this._ref = React.createRef();
    return _this;
  }

  _createClass(StepItem, [
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        if (isMac$2 === null) {
          isMac$2 = isMac();
        }

        var _this$props2 = this.props,
          activeItem = _this$props2.activeItem,
          currentItem = _this$props2.currentItem,
          is_active = _this$props2.is_active,
          is_current = _this$props2.is_current,
          _url = _this$props2.url,
          url_future = _this$props2.url_future,
          url_passed = _this$props2.url_passed,
          hide_numbers = _this$props2.hide_numbers,
          title = _this$props2.title,
          use_navigation = _this$props2.use_navigation,
          on_item_render = _this$props2.on_item_render,
          on_render = _this$props2.on_render,
          on_click = _this$props2.on_click,
          on_change = _this$props2.on_change,
          setActimeItem = _this$props2.setActimeItem,
          hasReached = _this$props2.hasReached,
          rest = _objectWithoutProperties(_this$props2, [
            'activeItem',
            'currentItem',
            'is_active',
            'is_current',
            'url',
            'url_future',
            'url_passed',
            'hide_numbers',
            'title',
            'use_navigation',
            'on_item_render',
            'on_render',
            'on_click',
            'on_change',
            'setActimeItem',
            'hasReached',
          ]);

        var hasPassedAndIsCurrent = isTrue(is_active);
        var url = _url;

        if (_url) {
          if (currentItem > activeItem) {
            url = url_future;
            hasPassedAndIsCurrent = true;
          }

          if (url_passed && currentItem < activeItem) {
            url = url_passed;
            hasPassedAndIsCurrent = true;
          }
        }

        if (currentItem <= activeItem) {
          hasPassedAndIsCurrent = true;
        }

        if (hasReached.includes(currentItem)) {
          hasPassedAndIsCurrent = true;
        }

        var interactiveParams = _extends({}, rest);

        if (
          !hasPassedAndIsCurrent &&
          currentItem > activeItem &&
          !isTrue(is_active)
        ) {
          interactiveParams['disabled'] = true;
          interactiveParams['aria-disabled'] = true;
        }

        interactiveParams.className =
          'dnb-anchor dnb-step-indicator__item-content dnb-step-indicator__item-content--link' +
          (interactiveParams['disabled'] ? ' dnb-anchor--no-style' : '');

        var StepItemWrapper = function StepItemWrapper(props) {
          return React.createElement(
            React.Fragment,
            null,
            !isTrue(hide_numbers) &&
              React.createElement(
                'span',
                _extends(
                  {
                    className: 'dnb-step-indicator__item-content--number',
                  },
                  props
                ),
                ''.concat(currentItem + 1, '. ')
              ),
            React.createElement(
              'span',
              _extends(
                {
                  className: 'dnb-step-indicator__item-content--text',
                },
                props
              ),
              title
            )
          );
        };

        var itemComponent = React.createElement(StepItemWrapper, null);
        var props = {
          StepItem: StepItemWrapper,
          itemComponent: itemComponent,
          params: rest,
          props: this.props,
        };

        if (typeof on_render === 'function') {
          itemComponent = on_render(props);
        } else if (typeof on_item_render === 'function') {
          itemComponent = on_item_render(props);
        }

        var child = null;

        if (isTrue(use_navigation)) {
          child = React.createElement(
            'button',
            _extends(
              {
                type: 'button',
                onClick: function onClick(event) {
                  return _this2.onClickHandler({
                    event: event,
                    item: _this2.props,
                    currentItem: currentItem,
                  });
                },
              },
              interactiveParams,
              {
                ref: this._ref,
              }
            ),
            itemComponent
          );
        } else if (url) {
          child = React.createElement(
            'a',
            _extends(
              {
                href: url,
                onClick: function onClick(event) {
                  return _this2.onClickHandler({
                    event: event,
                    item: _this2.props,
                    currentItem: currentItem,
                  });
                },
              },
              interactiveParams
            ),
            itemComponent
          );
        } else {
          var contentParams = {};

          if (isMac$2) {
            contentParams.role = 'text';
          }

          child = React.createElement(
            'span',
            _extends(
              {
                className:
                  'dnb-step-indicator__item-content dnb-step-indicator__item-content--static',
              },
              contentParams
            ),
            itemComponent
          );
        }

        var itemParams = {};

        if (currentItem === activeItem || isTrue(is_current)) {
          itemParams['aria-current'] = 'step';
        }

        return React.createElement(
          'li',
          _extends(
            {
              className: classnames(
                'dnb-step-indicator__item',
                (currentItem === activeItem || isTrue(is_current)) &&
                  'dnb-step-indicator--active',
                currentItem < activeItem && 'dnb-step-indicator--visited'
              ),
            },
            itemParams
          ),
          child
        );
      },
    },
  ]);

  return StepItem;
})(React.PureComponent);

StepItem.defaultProps = {
  on_item_render: null,
  on_render: null,
  on_click: null,
  on_change: null,
  setActimeItem: null,
  hasReached: [],
  hide_numbers: false,
  use_navigation: false,
  is_active: null,
  is_current: null,
  url: null,
  url_future: null,
  url_passed: null,
  activeItem: null,
};

function _createSuper$J(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$K()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$K() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$s = {
  on_change: null,
};

var defaultProps$E = _extends(
  {
    data: [],
    active_item: null,
    active_url: null,
    hide_numbers: false,
    use_navigation: false,
    on_item_render: null,
    class: null,
    className: null,
    children: null,
  },
  renderProps$s
);

var StepIndicator = (function(_React$PureComponent) {
  _inherits(StepIndicator, _React$PureComponent);

  var _super = _createSuper$J(StepIndicator);

  _createClass(StepIndicator, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(
          StepIndicator.tagName,
          StepIndicator,
          defaultProps$E
        );
      },
    },
    {
      key: 'getData',
      value: function getData(props) {
        var res = [];
        if (props.data) res = props.data;
        else res = processChildren(props);
        if (typeof res === 'string')
          return res[0] === '[' ? JSON.parse(res) : [];
        return res || [];
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (props.data) {
            if (state._data !== props.data) {
              state._data = props.data;
              state.data = StepIndicator.getData(props);
            }
          }

          if (state.activeItem !== props.active_item) {
            state.activeItem = parseFloat(props.active_item);
          }

          if (props.active_url && state.activeUrl !== props.active_url) {
            state.activeUrl = props.active_url;
          }

          if (
            (state.activeUrl || !(parseFloat(state.activeItem) > 0)) &&
            state.data.length > 0
          ) {
            state.activeItem = state.data.reduce(function(acc, _ref, i) {
              var url = _ref.url;
              return url &&
                (url === state.activeItem || url === state.activeUrl)
                ? i
                : acc;
            }, parseFloat(props.active_item));

            if (!(state.activeItem > -1)) {
              state.activeItem = null;
            }
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function StepIndicator(props) {
    var _this;

    _classCallCheck(this, StepIndicator);

    _this = _super.call(this, props);

    _this.setActimeItem = function(activeItem) {
      _this.setState({
        activeItem: activeItem,
        _listenForPropChanges: false,
      });
    };

    _this.state = {
      hasReached: [],
      _listenForPropChanges: true,
    };
    var sn = 'show_numbers';

    if (typeof props[sn] !== 'undefined') {
      console.warn(
        'StepIndicator: "show_numbers" is deprecated. Use "hide_numbers" instead.'
      );
    }

    return _this;
  }

  _createClass(StepIndicator, [
    {
      key: 'render',
      value: function render() {
        var _this2 = this;

        var props = extendPropsWithContext(
          this.props,
          defaultProps$E,
          this.context.formRow,
          this.context.translation.StepIndicator
        );

        var active_item = props.active_item,
          active_url = props.active_url,
          hide_numbers = props.hide_numbers,
          use_navigation = props.use_navigation,
          on_item_render = props.on_item_render,
          on_change = props.on_change,
          className = props.className,
          _className = props.class,
          _data = props.data,
          children = props.children,
          attributes = _objectWithoutProperties(props, [
            'active_item',
            'active_url',
            'hide_numbers',
            'use_navigation',
            'on_item_render',
            'on_change',
            'className',
            'class',
            'data',
            'children',
          ]);

        var data = StepIndicator.getData(this.props);
        var activeItem = this.state.activeItem;

        var params = _extends(
          {
            className: classnames(
              'dnb-step-indicator',
              createSpacingClasses(props),
              className,
              _className
            ),
          },
          attributes
        );

        validateDOMAttributes(this.props, params);

        if (!this.state.hasReached.includes(activeItem)) {
          this.state.hasReached.push(activeItem);
        }

        return React.createElement(
          'div',
          params,
          data.length > 0 &&
            React.createElement(
              'ul',
              {
                className: 'dnb-step-indicator__list',
              },
              data.map(function(props, i) {
                if (typeof props === 'string') {
                  props = {
                    title: props,
                  };
                }

                var params = _extends(
                  {
                    currentItem: i,
                    activeItem: activeItem,
                    hide_numbers: hide_numbers,
                    use_navigation: use_navigation,
                    on_item_render: on_item_render,
                    on_change: on_change,
                  },
                  props
                );

                return React.createElement(
                  StepItem,
                  _extends(
                    {
                      key: 'bc'.concat(i),
                    },
                    params,
                    {
                      setActimeItem: _this2.setActimeItem,
                      hasReached: _this2.state.hasReached,
                    }
                  )
                );
              })
            )
        );
      },
    },
  ]);

  return StepIndicator;
})(React.PureComponent);

StepIndicator.tagName = 'dnb-step-indicator';
StepIndicator.defaultProps = defaultProps$E;
StepIndicator.contextType = Context;

function _createSuper$K(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$L()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$L() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$t = {
  on_change: null,
  on_change_end: null,
  on_state_update: null,
};

var defaultProps$F = _extends(
  {
    label: null,
    label_position: null,
    title: null,
    default_state: null,
    checked: 'default',
    disabled: null,
    id: null,
    status: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    value: null,
    attributes: null,
    readOnly: false,
    class: null,
    className: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$t
);

var _ref$b = React.createElement(AlignmentHelper, null);

var _ref2$b = React.createElement(
  'span',
  {
    className: 'dnb-switch__button',
    'aria-hidden': true,
  },
  React.createElement(
    'span',
    {
      className: 'dnb-switch__focus',
    },
    React.createElement('span', {
      className: 'dnb-switch__focus__inner',
    })
  )
);

var Switch = (function(_React$Component) {
  _inherits(Switch, _React$Component);

  var _super = _createSuper$K(Switch);

  _createClass(Switch, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Switch.tagName, Switch, defaultProps$F);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (state.hasDefaultState) {
            state.checked = Switch.parseChecked(props.default_state);
            state.hasDefaultState = false;
          } else if (props.checked !== 'default') {
            state.checked = Switch.parseChecked(props.checked);
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
  ]);

  function Switch(props) {
    var _this;

    _classCallCheck(this, Switch);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(event) {
      switch (keycode(event)) {
        case 'enter':
          _this.onChangeHandler(event);

          break;
      }
    };

    _this.onChangeHandler = function(event) {
      if (isTrue(_this.props.readOnly)) {
        return event.preventDefault();
      }

      var checked = !_this.state.checked;

      _this.setState({
        checked: checked,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          checked: checked,
          event: event,
        }
      );

      if (_this.props.on_change_end) {
        clearTimeout(_this._onChangeEndId);

        if (event && event.persist) {
          event.persist();
        }

        _this._onChangeEndId = setTimeout(function() {
          return dispatchCustomElementEvent(
            _assertThisInitialized(_this),
            'on_change_end',
            {
              checked: checked,
              event: event,
            }
          );
        }, 500);
      }

      if (_this._refInput.current) {
        _this._refInput.current.focus();
      }
    };

    _this.onMouseOutHandler = function() {
      if (_this.props.status && _this.props.status_state === 'error') {
        return;
      }

      if (_this._refInput.current) {
        _this._refInput.current.blur();
      }
    };

    _this._refInput = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this.state = {
      _listenForPropChanges: true,
      hasDefaultState: props.default_state !== null,
      checked: Switch.parseChecked(props.default_state || props.checked),
    };
    _this.helperParams = {
      onMouseDown: function onMouseDown(e) {
        return e.preventDefault();
      },
    };
    return _this;
  }

  _createClass(Switch, [
    {
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        if (
          Switch.parseChecked(this.props.checked) !==
          Switch.parseChecked(nextProps.checked)
        ) {
          var checked = nextState.checked;
          dispatchCustomElementEvent(this, 'on_state_update', {
            checked: checked,
          });
        }

        return true;
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this._onChangeEndId);
      },
    },
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$F,
          this.context.formRow,
          this.context.translation.Switch
        );

        var value = props.value,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          label = props.label,
          label_position = props.label_position,
          label_sr_only = props.label_sr_only,
          title = props.title,
          disabled = props.disabled,
          readOnly = props.readOnly,
          className = props.className,
          _className = props.class,
          _id = props.id,
          _default_state = props.default_state,
          _checked = props.checked,
          attributes = props.attributes,
          children = props.children,
          on_change = props.on_change,
          on_state_update = props.on_state_update,
          custom_method = props.custom_method,
          custom_element = props.custom_element,
          rest = _objectWithoutProperties(props, [
            'value',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'label',
            'label_position',
            'label_sr_only',
            'title',
            'disabled',
            'readOnly',
            'className',
            'class',
            'id',
            'default_state',
            'checked',
            'attributes',
            'children',
            'on_change',
            'on_state_update',
            'custom_method',
            'custom_element',
          ]);

        var checked = this.state.checked;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var mainParams = {
          className: classnames(
            'dnb-switch dnb-switch--label-position-'.concat(
              label_position || 'right',
              ' dnb-form-component'
            ),
            createSpacingClasses(props),
            className,
            _className,
            status && 'dnb-switch__status--'.concat(status_state)
          ),
        };

        var inputParams = _extends(
          {
            disabled: isTrue(disabled),
            checked: checked,
            onMouseOut: this.onMouseOutHandler,
          },
          rest
        );

        if (showStatus || suffix) {
          inputParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (readOnly) {
          inputParams['aria-readonly'] = inputParams.readOnly = true;
        }

        validateDOMAttributes(this.props, inputParams);
        var labelComp =
          label &&
          React.createElement(FormLabel, {
            id: id + '-label',
            for_id: id,
            text: label,
            disabled: disabled,
            sr_only: label_sr_only,
          });
        return React.createElement(
          'span',
          mainParams,
          React.createElement(
            'span',
            {
              className: 'dnb-switch__order',
            },
            label_position === 'left' && labelComp,
            React.createElement(
              'span',
              {
                className: 'dnb-switch__inner',
              },
              _ref$b,
              showStatus &&
                React.createElement(FormStatus, {
                  id: id + '-form-status',
                  global_status_id: global_status_id,
                  text_id: id + '-status',
                  width_selector: id + ', ' + id + '-label',
                  text: status,
                  status: status_state,
                  animation: status_animation,
                }),
              React.createElement(
                'span',
                {
                  className: 'dnb-switch__shell',
                },
                (label_position === 'right' || !label_position) &&
                  labelComp,
                React.createElement(
                  'span',
                  {
                    className: 'dnb-switch__row',
                  },
                  React.createElement(
                    'input',
                    _extends(
                      {
                        id: id,
                        name: id,
                        type: 'checkbox',
                        role: 'switch',
                        title: title,
                        'aria-checked': checked,
                        className: 'dnb-switch__input',
                        value: checked ? value || '' : '',
                        ref: this._refInput,
                      },
                      inputParams,
                      {
                        onChange: this.onChangeHandler,
                        onKeyDown: this.onKeyDownHandler,
                      }
                    )
                  ),
                  React.createElement(
                    'span',
                    _extends(
                      {
                        draggable: true,
                        'aria-hidden': true,
                        className: 'dnb-switch__background',
                        onDragStart: this.onChangeHandler,
                      },
                      this.helperParams
                    )
                  ),
                  _ref2$b,
                  suffix &&
                    React.createElement(
                      'span',
                      {
                        className: 'dnb-switch__suffix',
                        id: id + '-suffix',
                      },
                      React.createElement(Suffix, props, suffix)
                    )
                )
              )
            )
          )
        );
      },
    },
  ]);

  return Switch;
})(React.Component);

Switch.tagName = 'dnb-switch';
Switch.defaultProps = defaultProps$F;
Switch.renderProps = renderProps$t;
Switch.contextType = Context;

Switch.parseChecked = function(state) {
  return /true|on/.test(String(state));
};

function _createSuper$L(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$M()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$M() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$u = {
  render: null,
};
var propTypes$3 = {
  data: propTypes.oneOfType([
    propTypes.string,
    propTypes.arrayOf(
      propTypes.shape({
        title: propTypes.oneOfType([
          propTypes.string,
          propTypes.node,
          propTypes.func,
        ]).isRequired,
        key: propTypes.oneOfType([propTypes.string, propTypes.number])
          .isRequired,
        selected: propTypes.bool,
        disabled: propTypes.bool,
      })
    ),
    propTypes.objectOf(
      propTypes.shape({
        title: propTypes.string.isRequired,
        selected: propTypes.bool,
        disabled: propTypes.bool,
      })
    ),
  ]),
  content: propTypes.oneOfType([
    propTypes.object,
    propTypes.node,
    propTypes.func,
  ]),
  label: propTypes.string,
  selected_key: propTypes.oneOfType([propTypes.string, propTypes.number]),
  align: propTypes.oneOf(['left', 'center', 'right']),
  section_style: propTypes.string,
  section_spacing: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  use_hash: propTypes.oneOfType([propTypes.string, propTypes.bool]),
  prevent_rerender: propTypes.oneOfType([
    propTypes.string,
    propTypes.bool,
  ]),
  id: propTypes.string,
  class: propTypes.string,
  className: propTypes.string,
  children: propTypes.oneOfType([
    propTypes.object,
    propTypes.node,
    propTypes.func,
  ]),
  render: propTypes.func,
};

var defaultProps$G = _extends(
  {
    data: null,
    content: null,
    label: null,
    selected_key: null,
    align: 'left',
    section_style: null,
    section_spacing: null,
    use_hash: false,
    prevent_rerender: false,
    id: null,
    class: null,
    className: null,
    children: null,
  },
  renderProps$u
);

var _ref12$1 = React.createElement('span', null, 'Tab content not found');

var Tabs = (function(_React$PureComponent) {
  _inherits(Tabs, _React$PureComponent);

  var _super = _createSuper$L(Tabs);

  _createClass(Tabs, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Tabs.tagName, Tabs, defaultProps$G);
      },
    },
    {
      key: 'getSelectedKeyOrFallback',
      value: function getSelectedKeyOrFallback(selected_key, data) {
        var useKey = selected_key;

        if (!useKey) {
          useKey =
            data.reduce(function(acc, _ref) {
              var selected = _ref.selected,
                key = _ref.key;
              return selected ? key : acc;
            }, null) ||
            (data[0] && data[0].key);
        } else {
          var keyExists = data.findIndex(function(_ref2) {
            var key = _ref2.key;
            return key == selected_key;
          });

          if (keyExists === -1) {
            useKey = data[0] && data[0].key;
          }
        }

        return useKey;
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state._listenForPropChanges) {
          if (props.data) {
            if (state._data !== props.data) {
              state._data = props.data;
              state.data = Tabs.getData(props);
            }
          }

          if (
            props.selected_key &&
            state._selected_key !== props.selected_key
          ) {
            state.selected_key = state._selected_key = Tabs.getSelectedKeyOrFallback(
              props.selected_key,
              state.data
            );
          }
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
    {
      key: 'getData',
      value: function getData(props) {
        var res = [];
        var data =
          !props.data && props.children ? props.children : props.data;

        if (
          Array.isArray(props.children) &&
          (typeof props.children[0] === 'function' ||
            React.isValidElement(props.children[0]))
        ) {
          res = props.children.reduce(function(acc, content, i) {
            if (
              content.props &&
              content.props.displayName === 'CustomContent'
            ) {
              var dataProps =
                (props.tabs &&
                  Array.isArray(props.tabs) &&
                  props.tabs[i]) ||
                {};

              var componentProps = _extends({}, content.props);

              if (componentProps.title === null) {
                delete componentProps.title;
              }

              var _dataProps$componentP = _extends(
                  {},
                  dataProps,
                  {},
                  componentProps,
                  {},
                  {
                    children: null,
                  }
                ),
                title = _dataProps$componentP.title,
                _key = _dataProps$componentP.key,
                hash = _dataProps$componentP.hash,
                rest = _objectWithoutProperties(_dataProps$componentP, [
                  'title',
                  'key',
                  'hash',
                ]);

              acc.push(
                _extends(
                  {
                    title: title,
                    key: (!_key && hash ? hash : _key) || slugify(title),
                    content: content,
                  },
                  rest
                )
              );
            }

            return acc;
          }, []);
        }

        if (!(res && res.length > 0)) {
          if (props.data && Array.isArray(data)) {
            res = data;
          } else if (typeof data === 'string') {
            res = data[0] === '[' ? JSON.parse(data) : [];
          } else if (data && _typeof(data) === 'object') {
            res = Object.entries(data).reduce(function(acc, _ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                key = _ref4[0],
                obj = _ref4[1];

              if (obj) {
                acc.push(
                  _extends(
                    {
                      key: key,
                    },
                    obj
                  )
                );
              }

              return acc;
            }, []);
          }
        }

        return res || [];
      },
    },
  ]);

  function Tabs(props) {
    var _this;

    _classCallCheck(this, Tabs);

    _this = _super.call(this, props);

    _this.onKeyDownHandler = function(e) {
      switch (keycode(e)) {
        case 'up':
        case 'page up':
        case 'left':
          e.preventDefault();

          _this.prevTab(e);

          _this.setFocusOnTablist();

          break;

        case 'down':
        case 'page down':
        case 'right':
          e.preventDefault();

          _this.nextTab(e);

          _this.setFocusOnTablist();

          break;
      }
    };

    _this.prevTab = function(e) {
      _this.openTab(-1, e, 'step');
    };

    _this.nextTab = function(e) {
      _this.openTab(+1, e, 'step');
    };

    _this.setFocusOnTablist = function() {
      if (typeof document !== 'undefined') {
        setTimeout(function() {
          if (_this._tablistRef.current) {
            _this._tablistRef.current.focus();
          }
        }, 1);
        clearTimeout(_this._setFocusOnTablistId);
        _this._setFocusOnTablistId = setTimeout(function() {
          if (_this._tablistRef.current) {
            _this._tablistRef.current.focus();
          }
        }, 50);
      }
    };

    _this.openTabByDOM = function(e) {
      try {
        var selected_key = (function(elem) {
          return (
            getPreviousSibling('dnb-tabs__button', elem) || {
              dataset: {},
            }
          );
        })(e.target).dataset.tabKey;

        _this.openTab(selected_key, e);

        _this.setFocusOnTablist();
      } catch (e) {
        console.warn('Tabs Error:', e);
      }
    };

    _this.getCurrentTitle = function() {
      var selected_key = _this.state.selected_key;

      var current = _this.state.data.filter(function(_ref5) {
        var key = _ref5.key;
        return key == selected_key;
      })[0];

      return (current && current.title) || null;
    };

    _this.openTab = function(selected_key) {
      var event =
        arguments.length > 1 && arguments[1] !== undefined
          ? arguments[1]
          : null;
      var mode =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : null;

      if (mode === 'step' && parseFloat(selected_key)) {
        var currentData = _this.state.data.filter(function(_ref6) {
          var disabled = _ref6.disabled;
          return !disabled;
        });

        var currentIndex = currentData.reduce(function(acc, _ref7, i) {
          var key = _ref7.key;
          return key == _this.state.selected_key ? i : acc;
        }, -1);
        var nextIndex = currentIndex + selected_key;

        if (nextIndex < 0) {
          nextIndex = currentData.length - 1;
        }

        if (nextIndex >= currentData.length) {
          nextIndex = 0;
        }

        selected_key = currentData.reduce(function(acc, _ref8, i) {
          var key = _ref8.key;
          return i === nextIndex ? key : acc;
        }, null);
      }

      if (selected_key) {
        _this.setState({
          selected_key: selected_key,
          _listenForPropChanges: false,
        });
      }

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          key: selected_key,
          event: event,
        }
      );

      if (_this.props.use_hash && typeof window !== 'undefined') {
        try {
          window.history.replaceState(
            undefined,
            undefined,
            '#'.concat(selected_key)
          );
        } catch (e) {
          console.warn('Tabs Error:', e);
        }
      }
    };

    _this.TabsWrapperHandler = function(_ref9) {
      var children = _ref9.children,
        rest = _objectWithoutProperties(_ref9, ['children']);

      var _this$props = _this.props,
        className = _this$props.className,
        _className = _this$props.class;

      var _filterProps = filterProps$1(_this.props, propTypes$3),
        attributes = _extends({}, _filterProps);

      var params = _extends({}, attributes, {
        className: classnames(
          'dnb-tabs',
          createSpacingClasses(_this.props),
          className,
          _className
        ),
      });

      validateDOMAttributes(_this.props, params);
      return React.createElement(
        'div',
        _extends({}, params, rest),
        children
      );
    };

    _this.TabsListHandler = function(_ref10) {
      var children = _ref10.children,
        className = _ref10.className;
      var _this$props2 = _this.props,
        align = _this$props2.align,
        section_style = _this$props2.section_style,
        section_spacing = _this$props2.section_spacing;
      return React.createElement(
        'div',
        {
          className: classnames(
            'dnb-tabs__tabs',
            className,
            align && 'dnb-tabs__tabs--'.concat(align),
            section_style &&
              'dnb-section dnb-section--'.concat(section_style),
            section_spacing &&
              'dnb-section--spacing-'.concat(
                isTrue(section_spacing) ? 'default' : section_spacing
              )
          ),
        },
        children
      );
    };

    _this.TabContentHandler = function() {
      var _ref11 =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {},
        _ref11$showEmptyMessa = _ref11.showEmptyMessage,
        showEmptyMessage =
          _ref11$showEmptyMessa === void 0 ? false : _ref11$showEmptyMessa;

      var selected_key = _this.state.selected_key;

      var content = _this.renderContent();

      return React.createElement(
        ContentWrapper,
        {
          id: _this._id,
          selected_key: selected_key,
        },
        content || (showEmptyMessage && _ref12$1)
      );
    };

    _this.TabsHandler = function() {
      var label = _this.props.label;
      var selected_key = _this.state.selected_key;

      var tabs = _this.state.data.map(function(_ref13) {
        var title = _ref13.title,
          key = _ref13.key,
          _ref13$disabled = _ref13.disabled,
          disabled = _ref13$disabled === void 0 ? false : _ref13$disabled;
        var itemParams = {};

        var isSelected = _this.isSelected(key);

        if (isSelected) {
          itemParams['aria-controls'] = ''
            .concat(_this._id, '-content-')
            .concat(key);
        }

        if (isTrue(disabled)) {
          itemParams.disabled = true;
          itemParams['aria-disabled'] = true;
        }

        return React.createElement(
          'button',
          _extends(
            {
              type: 'button',
              role: 'tab',
              tabIndex: '-1',
              id: ''.concat(_this._id, '-tab-').concat(key),
              'aria-selected': isSelected,
              className:
                'dnb-tabs__button' + (isSelected ? ' selected' : ''),
              onClick: _this.openTabByDOM,
              key: 'tab-'.concat(key),
              'data-tab-key': key,
            },
            itemParams
          ),
          React.createElement(
            'span',
            {
              className: 'dnb-tabs__button__title',
            },
            title
          ),
          React.createElement(Dummy, null, title)
        );
      });

      var params = {};

      if (label) {
        params['aria-label'] = label;
      }

      if (selected_key) {
        params['aria-labelledby'] = ''
          .concat(_this._id, '-tab-')
          .concat(selected_key);
      }

      return React.createElement(
        'div',
        _extends(
          {
            role: 'tablist',
            className: 'dnb-tabs__tabs__tablist',
            tabIndex: '0',
            onKeyDown: _this.onKeyDownHandler,
            ref: _this._tablistRef,
          },
          params
        ),
        tabs
      );
    };

    _this._id = props.id || makeUniqueId();
    var data = Tabs.getData(props);

    var _selected_key = Tabs.getSelectedKeyOrFallback(
      props.selected_key,
      data
    );

    if (props.use_hash && typeof window !== 'undefined') {
      try {
        var useHashKey = String(window.location.hash).replace('#', '');

        if (useHashKey && String(useHashKey).length > 0) {
          _selected_key = Tabs.getSelectedKeyOrFallback(useHashKey, data);
        }
      } catch (e) {}
    }

    _this.state = {
      _listenForPropChanges: true,
      selected_key: _selected_key,
      _selected_key: _selected_key,
      _data: props.data,
      data: data,
    };
    _this._tablistRef = React.createRef();
    return _this;
  }

  _createClass(Tabs, [
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        clearTimeout(this._setFocusOnTablistId);
      },
    },
    {
      key: 'isSelected',
      value: function isSelected(tabKey) {
        return this.state.selected_key == tabKey;
      },
    },
    {
      key: 'renderCachedContent',
      value: function renderCachedContent(selected_key) {
        var content =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : null;

        if (content) {
          this._cache = _extends(
            {},
            this._cache || {},
            _defineProperty({}, selected_key, {
              content: content,
            })
          );
        }

        return Object.entries(this._cache).map(function(_ref14) {
          var _ref15 = _slicedToArray(_ref14, 2),
            key = _ref15[0],
            content = _ref15[1].content;

          var params = {};

          if (key !== selected_key) {
            params.hidden = true;
            params['aria-hidden'] = true;
          }

          return React.createElement(
            'div',
            _extends(
              {
                key: key,
                className: 'dnb-tabs__cached',
              },
              params
            ),
            content
          );
        });
      },
    },
    {
      key: 'renderContent',
      value: function renderContent() {
        var _this$props3 = this.props,
          children = _this$props3.children,
          _content = _this$props3.content,
          prevent_rerender = _this$props3.prevent_rerender;
        var contentToRender = children || _content;
        var selected_key = this.state.selected_key;

        if (
          isTrue(prevent_rerender) &&
          this._cache &&
          this._cache[selected_key]
        ) {
          return this.renderCachedContent(selected_key);
        }

        var content = null;

        if (contentToRender) {
          if (
            _typeof(contentToRender) === 'object' &&
            contentToRender[selected_key]
          ) {
            content = contentToRender[selected_key];
          } else if (typeof contentToRender === 'function') {
            content = contentToRender.apply(this, [selected_key]);
          } else if (React.isValidElement(contentToRender)) {
            content = contentToRender;
          }
        }

        if (!content) {
          var items = [];

          if (Array.isArray(this.state.data)) {
            items = this.state.data;
          } else if (Array.isArray(contentToRender)) {
            items = contentToRender;
          }

          if (items) {
            content = items
              .filter(function(_ref16) {
                var key = _ref16.key;
                return key && selected_key && key == selected_key;
              })
              .reduce(function(acc, _ref17) {
                var content = _ref17.content;
                return content || acc;
              }, null);
          }
        }

        if (typeof content === 'function') {
          var Component = content;
          content = React.createElement(Component, null);
        }

        if (isTrue(prevent_rerender)) {
          return this.renderCachedContent(selected_key, content);
        }

        return content;
      },
    },
    {
      key: 'render',
      value: function render() {
        var customRenderer = this.props.render;
        var Tabs = this.TabsHandler;
        Tabs.displayName = 'Tabs';
        var TabsList = this.TabsListHandler;
        TabsList.displayName = 'TabsList';
        var Wrapper = this.TabsWrapperHandler;
        Wrapper.displayName = 'TabsWrapper';
        var Content = this.TabContentHandler;
        Content.displayName = 'TabContent';

        if (typeof customRenderer === 'function') {
          return customRenderer({
            Wrapper: Wrapper,
            Content: Content,
            TabsList: TabsList,
            Tabs: Tabs,
          });
        }

        return React.createElement(
          Wrapper,
          null,
          React.createElement(
            TabsList,
            null,
            React.createElement(Tabs, null)
          ),
          React.createElement(Content, {
            showEmptyMessage: true,
          })
        );
      },
    },
  ]);

  return Tabs;
})(React.PureComponent);

Tabs.tagName = 'dnb-tabs';
Tabs.defaultProps = defaultProps$G;
Tabs.contextType = Context;

var ContentWrapper = (function(_React$PureComponent2) {
  _inherits(ContentWrapper, _React$PureComponent2);

  var _super2 = _createSuper$L(ContentWrapper);

  function ContentWrapper() {
    _classCallCheck(this, ContentWrapper);

    return _super2.apply(this, arguments);
  }

  _createClass(ContentWrapper, [
    {
      key: 'render',
      value: function render() {
        var _this$props4 = this.props,
          id = _this$props4.id,
          children = _this$props4.children,
          key = _this$props4.selected_key,
          rest = _objectWithoutProperties(_this$props4, [
            'id',
            'children',
            'selected_key',
          ]);

        if (!children) {
          return React.createElement(React.Fragment, null);
        }

        return React.createElement(
          'div',
          {
            role: 'tabpanel',
            id: ''.concat(id, '-content-').concat(key),
            className: classnames(
              'dnb-tabs__content',
              createSpacingClasses(rest)
            ),
            'aria-labelledby': ''.concat(id, '-tab-').concat(key),
          },
          children
        );
      },
    },
  ]);

  return ContentWrapper;
})(React.PureComponent);

var CustomContent = (function(_React$PureComponent3) {
  _inherits(CustomContent, _React$PureComponent3);

  var _super3 = _createSuper$L(CustomContent);

  function CustomContent() {
    _classCallCheck(this, CustomContent);

    return _super3.apply(this, arguments);
  }

  _createClass(CustomContent, [
    {
      key: 'render',
      value: function render() {
        var _this$props5 = this.props,
          children = _this$props5.children,
          displayName = _this$props5.displayName,
          title = _this$props5.title,
          hash = _this$props5.hash,
          selected = _this$props5.selected,
          disabled = _this$props5.disabled,
          className = _this$props5.className,
          _className = _this$props5.class,
          rest = _objectWithoutProperties(_this$props5, [
            'children',
            'displayName',
            'title',
            'hash',
            'selected',
            'disabled',
            'className',
            'class',
          ]);

        return React.createElement(
          'div',
          {
            className: classnames(
              'dnb-tabs__content__inner',
              createSpacingClasses(rest),
              className,
              _className
            ),
          },
          children
        );
      },
    },
  ]);

  return CustomContent;
})(React.PureComponent);

CustomContent.defaultProps = {
  displayName: 'CustomContent',
  title: null,
  hash: null,
  selected: null,
  disabled: null,
  className: null,
  class: null,
};
Tabs.Content = CustomContent;
Tabs.ContentWrapper = ContentWrapper;
var Dummy = function Dummy(_ref18) {
  var children = _ref18.children;
  return React.createElement(
    'span',
    {
      'aria-hidden': true,
      hidden: true,
      className: 'dnb-dummy',
    },
    children
  );
};

function _createSuper$M(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$N()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$N() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$v = {
  on_change: null,
  on_focus: null,
  on_blur: null,
  on_state_update: null,
};

var defaultProps$H = _extends(
  {
    value: 'initval',
    id: null,
    label: null,
    label_direction: null,
    label_sr_only: null,
    status: null,
    textarea_state: null,
    status_state: 'error',
    status_animation: null,
    global_status_id: null,
    suffix: null,
    placeholder: null,
    align: null,
    stretch: null,
    disabled: null,
    textarea_class: null,
    class: null,
    textarea_attributes: null,
    readOnly: false,
    rows: null,
    cols: null,
    className: null,
    textarea_element: null,
    children: null,
    custom_element: null,
    custom_method: null,
  },
  renderProps$v
);

var _ref$c = React.createElement(AlignmentHelper, null);

var Textarea = (function(_React$PureComponent) {
  _inherits(Textarea, _React$PureComponent);

  var _super = _createSuper$M(Textarea);

  _createClass(Textarea, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Textarea.tagName, Textarea, defaultProps$H);
      },
    },
    {
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        var value = Textarea.getValue(props);

        if (
          state._listenForPropChanges &&
          value !== 'initval' &&
          value !== state.value
        ) {
          if (
            value !== state.value &&
            value !== state._value &&
            typeof props.on_state_update === 'function'
          ) {
            dispatchCustomElementEvent(
              {
                props: props,
              },
              'on_state_update',
              {
                value: value,
              }
            );
          }

          state.value = value;
        }

        if (props.textarea_state) {
          state.textareaState = props.textarea_state;
        }

        state._listenForPropChanges = true;
        return state;
      },
    },
    {
      key: 'hasValue',
      value: function hasValue(value) {
        return (
          ((typeof value === 'string' || typeof value === 'number') &&
            String(value).length > 0) ||
          false
        );
      },
    },
    {
      key: 'getValue',
      value: function getValue(props) {
        var value = processChildren(props);

        if (value === '' || Textarea.hasValue(value)) {
          return value;
        }

        return props.value;
      },
    },
  ]);

  function Textarea(props) {
    var _this;

    _classCallCheck(this, Textarea);

    _this = _super.call(this, props);
    _this.state = {
      textareaState: 'virgin',
      value: null,
      _value: null,
    };

    _this.onFocusHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
        textareaState: 'focus',
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_focus',
        {
          value: value,
          event: event,
        }
      );
    };

    _this.onBlurHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
        textareaState: Textarea.hasValue(value) ? 'dirty' : 'initial',
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_blur',
        {
          value: value,
          event: event,
        }
      );
    };

    _this.onChangeHandler = function(event) {
      var value = event.target.value;

      _this.setState({
        value: value,
        _listenForPropChanges: false,
      });

      dispatchCustomElementEvent(
        _assertThisInitialized(_this),
        'on_change',
        {
          value: value,
          event: event,
        }
      );
    };

    _this._ref = React.createRef();
    _this._id = props.id || makeUniqueId();
    _this.state._listenForPropChanges = true;

    if (props.textarea_state) {
      _this.state.textareaState = props.textarea_state;
    }

    _this.state._value = props.value;
    return _this;
  }

  _createClass(Textarea, [
    {
      key: 'render',
      value: function render() {
        var props = extendPropsWithContext(
          this.props,
          defaultProps$H,
          this.context.formRow,
          this.context.translation.Textarea
        );

        var label = props.label,
          label_direction = props.label_direction,
          label_sr_only = props.label_sr_only,
          status = props.status,
          status_state = props.status_state,
          status_animation = props.status_animation,
          global_status_id = props.global_status_id,
          suffix = props.suffix,
          disabled = props.disabled,
          stretch = props.stretch,
          placeholder = props.placeholder,
          align = props.align,
          textarea_class = props.textarea_class,
          readOnly = props.readOnly,
          textarea_attributes = props.textarea_attributes,
          _className = props.class,
          className = props.className,
          _id = props.id,
          children = props.children,
          _value = props.value,
          _textarea_element = props.textarea_element,
          attributes = _objectWithoutProperties(props, [
            'label',
            'label_direction',
            'label_sr_only',
            'status',
            'status_state',
            'status_animation',
            'global_status_id',
            'suffix',
            'disabled',
            'stretch',
            'placeholder',
            'align',
            'textarea_class',
            'readOnly',
            'textarea_attributes',
            'class',
            'className',
            'id',
            'children',
            'value',
            'textarea_element',
          ]);

        var _this$state = this.state,
          value = _this$state.value,
          textareaState = _this$state.textareaState;
        var id = this._id;
        var showStatus = status && status !== 'error';
        var hasValue = Textarea.hasValue(value);

        var _pickRenderProps = pickRenderProps(
            this.props,
            Textarea.renderProps
          ),
          TextareaElement = _pickRenderProps.textarea_element,
          renderProps = _objectWithoutProperties(_pickRenderProps, [
            'textarea_element',
          ]);

        var textareaAttributes = textarea_attributes
          ? typeof textarea_attributes === 'string'
            ? JSON.parse(textarea_attributes)
            : textarea_attributes
          : {};

        var textareaParams = _extends(
          {},
          renderProps,
          {
            className: classnames(
              'dnb-textarea__textarea',
              textarea_class
            ),
            role: 'textbox',
            value: hasValue ? value : '',
            id: id,
            disabled: disabled,
            name: id,
            'aria-placeholder': placeholder,
          },
          attributes,
          {},
          textareaAttributes,
          {
            onChange: this.onChangeHandler,
            onFocus: this.onFocusHandler,
            onBlur: this.onBlurHandler,
          }
        );

        if (showStatus || suffix) {
          textareaParams['aria-describedby'] = ''
            .concat(showStatus ? id + '-status' : '', ' ')
            .concat(suffix ? id + '-suffix' : '');
        }

        if (readOnly) {
          textareaParams['aria-readonly'] = textareaParams.readOnly = true;
        }

        var shellParams = {
          className: 'dnb-textarea__shell',
        };

        if (isTrue(disabled)) {
          shellParams['aria-disabled'] = true;
        }

        var mainParams = {
          className: classnames(
            'dnb-textarea dnb-textarea--'.concat(
              textareaState,
              ' dnb-form-component'
            ),
            createSpacingClasses(props),
            _className,
            className,
            hasValue && 'dnb-textarea--has-content',
            align && 'dnb-textarea__align--'.concat(align),
            status && 'dnb-textarea__status--'.concat(status_state),
            label_direction && 'dnb-textarea--'.concat(label_direction),
            isTrue(stretch) && 'dnb-textarea--stretch'
          ),
        };
        var innerParams = {
          className: 'dnb-textarea__inner',
        };
        var placeholderStyle =
          parseFloat(this.props.rows) > 0
            ? {
                '--textarea-rows': parseFloat(this.props.rows),
              }
            : null;
        validateDOMAttributes(this.props, textareaParams);
        validateDOMAttributes(null, shellParams);

        if (TextareaElement && typeof TextareaElement === 'function') {
          TextareaElement = TextareaElement(textareaParams, this._ref);
        } else if (!TextareaElement && _textarea_element) {
          TextareaElement = _textarea_element;
        }

        return React.createElement(
          'span',
          mainParams,
          label &&
            React.createElement(FormLabel, {
              id: id + '-label',
              for_id: id,
              text: label,
              label_direction: label_direction,
              sr_only: label_sr_only,
              disabled: disabled,
            }),
          React.createElement(
            'span',
            innerParams,
            _ref$c,
            showStatus &&
              React.createElement(FormStatus, {
                id: id + '-form-status',
                global_status_id: global_status_id,
                text_id: id + '-status',
                text: status,
                status: status_state,
                animation: status_animation,
              }),
            React.createElement(
              'span',
              {
                className: 'dnb-textarea__row',
              },
              React.createElement(
                'span',
                shellParams,
                TextareaElement ||
                  React.createElement(
                    'textarea',
                    _extends(
                      {
                        ref: this._ref,
                      },
                      textareaParams
                    )
                  ),
                placeholder &&
                  React.createElement(
                    'span',
                    {
                      'aria-hidden': true,
                      className:
                        'dnb-textarea__placeholder' +
                        (align
                          ? ' dnb-textarea__align--'.concat(align)
                          : ''),
                      style: placeholderStyle,
                    },
                    placeholder
                  )
              ),
              suffix &&
                React.createElement(
                  'span',
                  {
                    className: 'dnb-textarea__suffix',
                    id: id + '-suffix',
                  },
                  React.createElement(Suffix, props, suffix)
                )
            )
          )
        );
      },
    },
  ]);

  return Textarea;
})(React.PureComponent);

Textarea.tagName = 'dnb-textarea';
Textarea.defaultProps = defaultProps$H;
Textarea.renderProps = renderProps$v;
Textarea.contextType = Context;

var getComponents = function getComponents() {
  return {
    Autocomplete: Autocomplete,
    Button: Button,
    Checkbox: Checkbox,
    DatePicker: DatePicker,
    Dropdown: Dropdown,
    FormLabel: FormLabel,
    FormRow: FormRow,
    FormSet: FormSet,
    FormStatus: FormStatus,
    GlobalError: GlobalError,
    GlobalStatus: GlobalStatus,
    Icon: Icon,
    IconPrimary: IconPrimary,
    Input: Input,
    InputMasked: InputMasked,
    LineTitle: LineTitle,
    Logo: Logo,
    Modal: Modal,
    Notification: Notification,
    Number: Number$1,
    Pagination: Pagination,
    ProgressIndicator: ProgressIndicator,
    Radio: Radio,
    Section: Section,
    Slider: Slider,
    Space: Space,
    StepIndicator: StepIndicator,
    Switch: Switch,
    Tabs: Tabs,
    Textarea: Textarea,
    ToggleButton: ToggleButton,
  };
};
var webComponentsAreEnabled = false;
var enableWebComponents = function enableWebComponents() {
  if (webComponentsAreEnabled) return false;
  webComponentsAreEnabled = true;
  var components = getComponents();

  for (var c in components) {
    if (components[c] && components[c].tagName) {
      registerElement(
        components[c].tagName,
        components[c],
        components[c].defaultProps
      );
    }
  }
};

var Anchor = React.forwardRef(function(_ref, ref) {
  var props = _extends({}, _ref);

  if (props.target === '_blank' && typeof props.children !== 'string') {
    props.className = classnames(props.className, 'dnb-anchor--no-icon');
  }

  return React.createElement(
    Element$2,
    _extends(
      {
        ref: ref,
        is: 'a',
        useClass: 'dnb-anchor',
        className: props.className,
      },
      props
    )
  );
});
Anchor.defaultProps = {
  href: null,
  target: null,
  className: null,
  children: null,
};
Anchor.tagName = 'dnb-anchor';

var Blockquote = function Blockquote(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'blockquote',
      },
      p
    )
  );
};

Blockquote.tagName = 'dnb-blockquote';

var Code = function Code(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'code',
      },
      p
    )
  );
};

Code.tagName = 'dnb-code';

var Dl = function Dl(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'dl',
      },
      p
    )
  );
};

Dl.tagName = 'dnb-dl';

var H2 = function H2(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h2',
      },
      p
    )
  );
};

H2.tagName = 'dnb-h2';

var H3 = function H3(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h3',
      },
      p
    )
  );
};

H3.tagName = 'dnb-h3';

var H4 = function H4(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h4',
      },
      p
    )
  );
};

H4.tagName = 'dnb-h4';

var H5 = function H5(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h5',
      },
      p
    )
  );
};

H5.tagName = 'dnb-h5';

var H6 = function H6(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h6',
      },
      p
    )
  );
};

H6.tagName = 'dnb-h6';

var Hr = function Hr(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'hr',
      },
      p
    )
  );
};

Hr.tagName = 'dnb-hr';

var Img = function Img(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'img',
      },
      p
    )
  );
};

Img.tagName = 'dnb-img';
Img.defaultProps = {
  children: null,
};

var Paragraph = function Paragraph(p) {
  return React.createElement(
    P,
    _extends(
      {
        style_type: 'ingress',
      },
      p
    )
  );
};

Paragraph.tagName = 'dnb-p--ingress';

var Lead = function Lead(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'h3',
      },
      p
    )
  );
};

Lead.tagName = 'dnb-lead';

var Link = Anchor;
Link.tagName = 'dnb-link';

var Ol = function Ol(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'ol',
      },
      p
    )
  );
};

Ol.tagName = 'dnb-ol';

var Paragraph$1 = function Paragraph(p) {
  return React.createElement(P, p);
};

Paragraph$1.tagName = 'dnb-p';

function _createSuper$N(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (_isNativeReflectConstruct$O()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}

function _isNativeReflectConstruct$O() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(
      Reflect.construct(Date, [], function() {})
    );
    return true;
  } catch (e) {
    return false;
  }
}
var renderProps$w = {};

var defaultProps$I = _extends(
  {
    sticky: false,
    sticky_offset: null,
    children: null,
  },
  renderProps$w
);

var _ref$d = React.createElement(
  'tr',
  {
    className: 'dnb-table__sticky-helper',
  },
  React.createElement('td', null)
);

var StickyHelper = function StickyHelper() {
  return _ref$d;
};

var Table = (function(_React$PureComponent) {
  _inherits(Table, _React$PureComponent);

  var _super = _createSuper$N(Table);

  _createClass(Table, null, [
    {
      key: 'enableWebComponent',
      value: function enableWebComponent() {
        registerElement(Table.tagName, Table, defaultProps$I);
      },
    },
  ]);

  function Table(props) {
    var _this;

    _classCallCheck(this, Table);

    _this = _super.call(this, props);

    _this.init = function() {
      _this.enableStickyHeader();

      if (_this.intersectionObserver && _this._ref.current) {
        try {
          var tableElem = _this._ref.current;
          var trElem = tableElem.querySelector('thead > tr:first-of-type');
          trElem.classList.add('sticky');

          var tdElem =
            tableElem.querySelector(
              'tbody > tr.dnb-table__sticky-helper > td:first-of-type'
            ) || _this.getTdElement(tableElem);

          if (tdElem) {
            var _this$intersectionObs;

            (_this$intersectionObs = _this.intersectionObserver) ===
              null || _this$intersectionObs === void 0
              ? void 0
              : _this$intersectionObs.observe(tdElem);
          }
        } catch (e) {
          _this.stickyWarning(e);
        }
      }
    };

    _this._ref = React.createRef();
    return _this;
  }

  _createClass(Table, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (isTrue(this.props.sticky)) {
          this.init();
        }
      },
    },
    {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        var _this$intersectionObs2;

        (_this$intersectionObs2 = this.intersectionObserver) === null ||
        _this$intersectionObs2 === void 0
          ? void 0
          : _this$intersectionObs2.disconnect();
      },
    },
    {
      key: 'getTdElement',
      value: function getTdElement(e) {
        return e.querySelector(
          'tbody > tr:not(.dnb-table__sticky-helper):first-of-type > td:first-of-type, tbody > .dnb-table__tr:first-of-type > .dnb-table__td:first-of-type'
        );
      },
    },
    {
      key: 'getThElement',
      value: function getThElement(e) {
        return e.querySelector(
          'thead > tr:first-of-type > th:first-of-type, thead > .dnb-table__tr:first-of-type > .dnb-table__th:first-of-type'
        );
      },
    },
    {
      key: 'enableStickyHeader',
      value: function enableStickyHeader() {
        var _this2 = this;

        if (
          !(
            typeof window !== 'undefined' &&
            typeof IntersectionObserver !== 'undefined' &&
            this._ref.current
          )
        ) {
          return;
        }

        var tableElem = this._ref.current;
        var trElem = tableElem.querySelector(
          'thead > tr:first-of-type, thead > .dnb-table__tr:first-of-type'
        );
        var thElem = this.getThElement(tableElem);
        var tdElem = this.getTdElement(tableElem);
        var thHeight = 80;
        var tdHeight = 64;
        var offsetTop = 0;

        try {
          offsetTop = parseFloat(this.props.sticky_offset) || offsetTop;

          if (offsetTop > 0) {
            if (
              typeof this.props.sticky_offset === 'string' &&
              String(this.props.sticky_offset).includes('em')
            ) {
              offsetTop = offsetTop * 16;
            }

            trElem.style.top = this.props.sticky_offset;
          }

          thHeight =
            (thElem &&
              parseFloat(window.getComputedStyle(thElem).height)) ||
            thHeight;
          tdHeight =
            (tdElem &&
              parseFloat(window.getComputedStyle(tdElem).height)) ||
            tdHeight;
        } catch (e) {
          this.stickyWarning(e);
        }

        var marginTop = thHeight + tdHeight + offsetTop;
        this.intersectionObserver = new IntersectionObserver(
          function(entries) {
            var _entries = _slicedToArray(entries, 1),
              entry = _entries[0];

            try {
              if (entry.isIntersecting) {
                trElem.classList.remove('show-shadow');
              } else {
                trElem.classList.add('show-shadow');
              }
            } catch (e) {
              _this2.stickyWarning(e);
            }
          },
          {
            rootMargin: '-'.concat(marginTop, 'px 0px 0px 0px'),
          }
        );
      },
    },
    {
      key: 'stickyWarning',
      value: function stickyWarning() {
        var e =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : '';
        console.warn('Could not enable Sticky mode in table:', e);
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this$props = this.props,
          sticky = _this$props.sticky,
          props = _objectWithoutProperties(_this$props, ['sticky']);

        return React.createElement(
          Element$2,
          _extends(
            {
              is: 'table',
            },
            props,
            {
              ref: this._ref,
            }
          )
        );
      },
    },
  ]);

  return Table;
})(React.PureComponent);

Table.tagName = 'dnb-table';
Table.defaultProps = defaultProps$I;
Table.renderProps = renderProps$w;
Table.StickyHelper = StickyHelper;

var Ul = function Ul(p) {
  return React.createElement(
    Element$2,
    _extends(
      {
        is: 'ul',
      },
      p
    )
  );
};

Ul.tagName = 'dnb-ul';

var getElements = function getElements() {
  return {
    Anchor: Anchor,
    Blockquote: Blockquote,
    Code: Code,
    Dl: Dl,
    H1: H1,
    H2: H2,
    H3: H3,
    H4: H4,
    H5: H5,
    H6: H6,
    Hr: Hr,
    Img: Img,
    Ingress: Paragraph,
    Lead: Lead,
    Link: Link,
    Ol: Ol,
    P: P,
    Paragraph: Paragraph$1,
    Table: Table,
    Ul: Ul,
  };
};

export {
  Anchor,
  Autocomplete,
  Blockquote,
  Button,
  Checkbox,
  Code,
  DatePicker,
  Dl,
  Dropdown,
  FormLabel,
  FormRow,
  FormSet,
  FormStatus,
  GlobalError,
  GlobalStatus,
  H1,
  H2,
  H3,
  H4,
  H5,
  H6,
  Hr,
  Icon,
  IconPrimary,
  Img,
  Paragraph as Ingress,
  Input,
  InputMasked,
  Lead,
  LineTitle,
  Link,
  Logo,
  Modal,
  Notification,
  Number$1 as Number,
  Ol,
  P,
  Pagination,
  Paragraph$1 as Paragraph,
  ProgressIndicator,
  Radio,
  Section,
  Slider,
  Space,
  StepIndicator,
  Switch,
  Table,
  Tabs,
  Textarea,
  ToggleButton,
  Ul,
  enableWebComponents,
  getComponents,
  getElements,
};
//# sourceMappingURL=dnb-ui-lib.min.mjs.map
